declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            modelValue: number;
            showFirst: boolean;
            showPrevious: boolean;
            showNext: boolean;
            showLast: boolean;
            totalItems: number;
            siblingCount: number;
            boundaryCount: number;
            itemsPerPage: number;
            activeClass: string;
            defaultClass: string;
            simple: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: NumberConstructor;
                default: number;
            };
            showFirst: {
                type: BooleanConstructor;
                default: boolean;
            };
            showPrevious: {
                type: BooleanConstructor;
                default: boolean;
            };
            showNext: {
                type: BooleanConstructor;
                default: boolean;
            };
            showLast: {
                type: BooleanConstructor;
                default: boolean;
            };
            totalItems: {
                type: NumberConstructor;
                default: number;
            };
            siblingCount: {
                type: NumberConstructor;
                default: number;
            };
            boundaryCount: {
                type: NumberConstructor;
                default: number;
            };
            itemsPerPage: {
                type: NumberConstructor;
                default: number;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            defaultClass: {
                type: StringConstructor;
                default: string;
            };
            simple: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "modelValue" | "showFirst" | "showPrevious" | "showNext" | "showLast" | "totalItems" | "siblingCount" | "boundaryCount" | "itemsPerPage" | "activeClass" | "defaultClass" | "simple">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "update:modelValue", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: NumberConstructor;
                default: number;
            };
            showFirst: {
                type: BooleanConstructor;
                default: boolean;
            };
            showPrevious: {
                type: BooleanConstructor;
                default: boolean;
            };
            showNext: {
                type: BooleanConstructor;
                default: boolean;
            };
            showLast: {
                type: BooleanConstructor;
                default: boolean;
            };
            totalItems: {
                type: NumberConstructor;
                default: number;
            };
            siblingCount: {
                type: NumberConstructor;
                default: number;
            };
            boundaryCount: {
                type: NumberConstructor;
                default: number;
            };
            itemsPerPage: {
                type: NumberConstructor;
                default: number;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            defaultClass: {
                type: StringConstructor;
                default: string;
            };
            simple: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], string, {
            modelValue: number;
            showFirst: boolean;
            showPrevious: boolean;
            showNext: boolean;
            showLast: boolean;
            totalItems: number;
            siblingCount: number;
            boundaryCount: number;
            itemsPerPage: number;
            activeClass: string;
            defaultClass: string;
            simple: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: NumberConstructor;
            default: number;
        };
        showFirst: {
            type: BooleanConstructor;
            default: boolean;
        };
        showPrevious: {
            type: BooleanConstructor;
            default: boolean;
        };
        showNext: {
            type: BooleanConstructor;
            default: boolean;
        };
        showLast: {
            type: BooleanConstructor;
            default: boolean;
        };
        totalItems: {
            type: NumberConstructor;
            default: number;
        };
        siblingCount: {
            type: NumberConstructor;
            default: number;
        };
        boundaryCount: {
            type: NumberConstructor;
            default: number;
        };
        itemsPerPage: {
            type: NumberConstructor;
            default: number;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        defaultClass: {
            type: StringConstructor;
            default: string;
        };
        simple: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    showFirst: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPrevious: {
        type: BooleanConstructor;
        default: boolean;
    };
    showNext: {
        type: BooleanConstructor;
        default: boolean;
    };
    showLast: {
        type: BooleanConstructor;
        default: boolean;
    };
    totalItems: {
        type: NumberConstructor;
        default: number;
    };
    siblingCount: {
        type: NumberConstructor;
        default: number;
    };
    boundaryCount: {
        type: NumberConstructor;
        default: number;
    };
    itemsPerPage: {
        type: NumberConstructor;
        default: number;
    };
    activeClass: {
        type: StringConstructor;
        default: string;
    };
    defaultClass: {
        type: StringConstructor;
        default: string;
    };
    simple: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", {
    modelValue: number;
    showFirst: boolean;
    showPrevious: boolean;
    showNext: boolean;
    showLast: boolean;
    totalItems: number;
    siblingCount: number;
    boundaryCount: number;
    itemsPerPage: number;
    activeClass: string;
    defaultClass: string;
    simple: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: typeof import('./VPagination.vue.__VLS_template').default;
});
export default _default;
