import { defineComponent as i, toRefs as f, ref as p, watch as d, openBlock as n, createBlock as c, Transition as m, withCtx as y, createElementBlock as b, mergeProps as h, renderSlot as B, createCommentVNode as g } from "vue";
const w = {
  inheritAttrs: !1
}, v = i({
  ...w,
  __name: "VAppBar",
  props: {
    modelValue: {
      type: Boolean,
      default: !0
    },
    fixed: {
      type: Boolean,
      default: !1
    },
    sticky: {
      type: Boolean,
      default: !1
    },
    bordered: {
      type: Boolean,
      default: !1
    },
    shadow: {
      type: [Boolean, String],
      default: !1
    },
    color: {
      type: String,
      default: "default"
    },
    transition: {
      type: String,
      default: "fade"
    },
    size: {
      type: String,
      default: "md"
    }
  },
  emits: ["update:modelValue"],
  setup(e, { expose: r, emit: s }) {
    const u = e, { modelValue: l } = f(u), t = p(l.value);
    d(t, (a) => {
      s("update:modelValue", a);
    }), d(l, (a) => {
      t.value = a;
    });
    const o = () => t.value = !t.value;
    return r(o), (a, V) => (n(), c(m, { name: e.transition }, {
      default: y(() => [
        t.value ? (n(), b("header", h({
          key: 0,
          class: ["app-bar", [
            `app-bar-${e.color}`,
            typeof e.shadow == "string" ? `app-bar--shadow-${e.shadow}` : e.shadow ? "app-bar--shadow" : "",
            e.size ? `app-bar--${e.size}` : "",
            {
              "app-bar--fixed": e.fixed,
              "app-bar--sticky": e.sticky,
              "app-bar--bordered": e.bordered
            }
          ]]
        }, a.$attrs), [
          B(a.$slots, "default", { toggle: o })
        ], 16)) : g("", !0)
      ]),
      _: 3
    }, 8, ["name"]));
  }
});
export {
  v as VAppBar,
  v as default
};
