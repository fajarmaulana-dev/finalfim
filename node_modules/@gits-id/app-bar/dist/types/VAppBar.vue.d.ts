import { PropType } from 'vue';
import type { DefaultColors } from '@gits-id/theme/defaultTheme';
export declare type AppBarShadow = boolean | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'inner' | 'none';
export declare type AppBarColors = DefaultColors | 'default';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            fixed: boolean;
            modelValue: boolean;
            sticky: boolean;
            bordered: boolean;
            shadow: AppBarShadow;
            color: AppBarColors;
            transition: string;
            size: "sm" | "md" | "lg";
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: BooleanConstructor;
                default: boolean;
            };
            fixed: {
                type: BooleanConstructor;
                default: boolean;
            };
            sticky: {
                type: BooleanConstructor;
                default: boolean;
            };
            bordered: {
                type: BooleanConstructor;
                default: boolean;
            };
            shadow: {
                type: PropType<AppBarShadow>;
                default: boolean;
            };
            color: {
                type: PropType<AppBarColors>;
                default: string;
            };
            transition: {
                type: StringConstructor;
                default: string;
            };
            size: {
                type: PropType<"sm" | "md" | "lg">;
                default: string;
            };
        }>> & {
            "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "fixed" | "modelValue" | "sticky" | "bordered" | "shadow" | "color" | "transition" | "size">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "update:modelValue", value: boolean) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: BooleanConstructor;
                default: boolean;
            };
            fixed: {
                type: BooleanConstructor;
                default: boolean;
            };
            sticky: {
                type: BooleanConstructor;
                default: boolean;
            };
            bordered: {
                type: BooleanConstructor;
                default: boolean;
            };
            shadow: {
                type: PropType<AppBarShadow>;
                default: boolean;
            };
            color: {
                type: PropType<AppBarColors>;
                default: string;
            };
            transition: {
                type: StringConstructor;
                default: string;
            };
            size: {
                type: PropType<"sm" | "md" | "lg">;
                default: string;
            };
        }>> & {
            "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            "update:modelValue": (value: boolean) => void;
        }, string, {
            fixed: boolean;
            modelValue: boolean;
            sticky: boolean;
            bordered: boolean;
            shadow: AppBarShadow;
            color: AppBarColors;
            transition: string;
            size: "sm" | "md" | "lg";
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        fixed: {
            type: BooleanConstructor;
            default: boolean;
        };
        sticky: {
            type: BooleanConstructor;
            default: boolean;
        };
        bordered: {
            type: BooleanConstructor;
            default: boolean;
        };
        shadow: {
            type: PropType<AppBarShadow>;
            default: boolean;
        };
        color: {
            type: PropType<AppBarColors>;
            default: string;
        };
        transition: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: PropType<"sm" | "md" | "lg">;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    fixed: {
        type: BooleanConstructor;
        default: boolean;
    };
    sticky: {
        type: BooleanConstructor;
        default: boolean;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    shadow: {
        type: PropType<AppBarShadow>;
        default: boolean;
    };
    color: {
        type: PropType<AppBarColors>;
        default: string;
    };
    transition: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<"sm" | "md" | "lg">;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: boolean) => void;
}, string, {
    fixed: boolean;
    modelValue: boolean;
    sticky: boolean;
    bordered: boolean;
    shadow: AppBarShadow;
    color: AppBarColors;
    transition: string;
    size: "sm" | "md" | "lg";
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: typeof import('./VAppBar.vue.__VLS_template').default;
});
export default _default;
