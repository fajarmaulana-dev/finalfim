export declare type ToastTypes = 'success' | 'error' | 'warning' | 'question';
export declare type ToastPlacement = 'center' | 'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            title: string;
            confirm: boolean;
            modelValue: boolean;
            confirmColor: string;
            confirmProps: Record<string, any>;
            confirmText: string;
            closeText: string;
            closeProps: Record<string, any>;
            headerClass: string;
            bodyClass: string;
            actionsClass: string;
            placement: string;
            actions: boolean;
            timeout: number;
            hideXIcon: boolean;
            overlay: boolean;
            color: string;
            type: string;
            loading: boolean;
            persistent: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: BooleanConstructor;
                default: boolean;
            };
            title: {
                type: StringConstructor;
                default: string;
            };
            confirm: {
                type: BooleanConstructor;
                default: boolean;
            };
            confirmColor: {
                type: StringConstructor;
                default: string;
            };
            confirmProps: {
                type: ObjectConstructor;
                default: () => {};
            };
            confirmText: {
                type: StringConstructor;
                default: string;
            };
            closeText: {
                type: StringConstructor;
                default: string;
            };
            closeProps: {
                type: ObjectConstructor;
                default: () => {};
            };
            headerClass: {
                type: StringConstructor;
                default: string;
            };
            bodyClass: {
                type: StringConstructor;
                default: string;
            };
            actionsClass: {
                type: StringConstructor;
                default: string;
            };
            placement: {
                type: StringConstructor;
                default: string;
            };
            actions: {
                type: BooleanConstructor;
                default: boolean;
            };
            timeout: {
                type: NumberConstructor;
                default: number;
            };
            hideXIcon: {
                type: BooleanConstructor;
                default: boolean;
            };
            overlay: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            persistent: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            onConfirm?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onOpen?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "title" | "confirm" | "modelValue" | "confirmColor" | "confirmProps" | "confirmText" | "closeText" | "closeProps" | "headerClass" | "bodyClass" | "actionsClass" | "placement" | "actions" | "timeout" | "hideXIcon" | "overlay" | "color" | "type" | "loading" | "persistent">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "update:modelValue" | "confirm" | "close" | "open", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: BooleanConstructor;
                default: boolean;
            };
            title: {
                type: StringConstructor;
                default: string;
            };
            confirm: {
                type: BooleanConstructor;
                default: boolean;
            };
            confirmColor: {
                type: StringConstructor;
                default: string;
            };
            confirmProps: {
                type: ObjectConstructor;
                default: () => {};
            };
            confirmText: {
                type: StringConstructor;
                default: string;
            };
            closeText: {
                type: StringConstructor;
                default: string;
            };
            closeProps: {
                type: ObjectConstructor;
                default: () => {};
            };
            headerClass: {
                type: StringConstructor;
                default: string;
            };
            bodyClass: {
                type: StringConstructor;
                default: string;
            };
            actionsClass: {
                type: StringConstructor;
                default: string;
            };
            placement: {
                type: StringConstructor;
                default: string;
            };
            actions: {
                type: BooleanConstructor;
                default: boolean;
            };
            timeout: {
                type: NumberConstructor;
                default: number;
            };
            hideXIcon: {
                type: BooleanConstructor;
                default: boolean;
            };
            overlay: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            persistent: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            onConfirm?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onOpen?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "confirm" | "close" | "open")[], string, {
            title: string;
            confirm: boolean;
            modelValue: boolean;
            confirmColor: string;
            confirmProps: Record<string, any>;
            confirmText: string;
            closeText: string;
            closeProps: Record<string, any>;
            headerClass: string;
            bodyClass: string;
            actionsClass: string;
            placement: string;
            actions: boolean;
            timeout: number;
            hideXIcon: boolean;
            overlay: boolean;
            color: string;
            type: string;
            loading: boolean;
            persistent: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        confirm: {
            type: BooleanConstructor;
            default: boolean;
        };
        confirmColor: {
            type: StringConstructor;
            default: string;
        };
        confirmProps: {
            type: ObjectConstructor;
            default: () => {};
        };
        confirmText: {
            type: StringConstructor;
            default: string;
        };
        closeText: {
            type: StringConstructor;
            default: string;
        };
        closeProps: {
            type: ObjectConstructor;
            default: () => {};
        };
        headerClass: {
            type: StringConstructor;
            default: string;
        };
        bodyClass: {
            type: StringConstructor;
            default: string;
        };
        actionsClass: {
            type: StringConstructor;
            default: string;
        };
        placement: {
            type: StringConstructor;
            default: string;
        };
        actions: {
            type: BooleanConstructor;
            default: boolean;
        };
        timeout: {
            type: NumberConstructor;
            default: number;
        };
        hideXIcon: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        persistent: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        onConfirm?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    confirm: {
        type: BooleanConstructor;
        default: boolean;
    };
    confirmColor: {
        type: StringConstructor;
        default: string;
    };
    confirmProps: {
        type: ObjectConstructor;
        default: () => {};
    };
    confirmText: {
        type: StringConstructor;
        default: string;
    };
    closeText: {
        type: StringConstructor;
        default: string;
    };
    closeProps: {
        type: ObjectConstructor;
        default: () => {};
    };
    headerClass: {
        type: StringConstructor;
        default: string;
    };
    bodyClass: {
        type: StringConstructor;
        default: string;
    };
    actionsClass: {
        type: StringConstructor;
        default: string;
    };
    placement: {
        type: StringConstructor;
        default: string;
    };
    actions: {
        type: BooleanConstructor;
        default: boolean;
    };
    timeout: {
        type: NumberConstructor;
        default: number;
    };
    hideXIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    persistent: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onConfirm?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "confirm" | "close" | "open")[], "update:modelValue" | "confirm" | "close" | "open", {
    title: string;
    confirm: boolean;
    modelValue: boolean;
    confirmColor: string;
    confirmProps: Record<string, any>;
    confirmText: string;
    closeText: string;
    closeProps: Record<string, any>;
    headerClass: string;
    bodyClass: string;
    actionsClass: string;
    placement: string;
    actions: boolean;
    timeout: number;
    hideXIcon: boolean;
    overlay: boolean;
    color: string;
    type: string;
    loading: boolean;
    persistent: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: typeof import('./VToast.vue.__VLS_template').default;
});
export default _default;
