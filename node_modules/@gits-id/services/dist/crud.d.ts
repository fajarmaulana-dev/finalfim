export declare type GenericPayload = Record<string, any>;
export declare type CreatePayload = Record<string, any>;
export declare type UpdatePayload = Record<string, any>;
export declare type CrudOptions = {
    generic: GenericPayload;
    create: CreatePayload;
    update: UpdatePayload;
};
export declare type CrudPayload<T = unknown> = Record<string, T>;
export declare type Payload = Record<string, any>;
export declare type QueryParams = Record<string, any>;
export declare type ResponseWithMeta<T> = {
    data: T;
    meta: RawPaginationMeta;
};
export interface RawPaginationMeta {
    total: number;
    per_page: number;
    current_page: number;
    last_page: number;
    first_page: number;
    first_page_url: string;
    last_page_url: string;
    next_page_url: string;
    previous_page_url?: string;
}
export interface PaginationMeta {
    total: number;
    perPage: number;
    currentPage: number;
    lastPage: number;
    firstPage: number;
    firstPageUrl: string;
    lastPageUrl: string;
    nextPageUrl: string;
    previousPageUrl?: string;
}
export interface CrudInterface {
    all<T = CrudPayload>(params?: T): Promise<any>;
    create<T = CrudPayload>(payload: T): Promise<any>;
    find<T = string>(id: T): Promise<any>;
    update<T = string, P = CrudPayload>(id: T, payload: P): Promise<any>;
    delete<T = string>(id: T): Promise<any>;
}
export declare abstract class CrudService<E> implements CrudInterface {
    protected path: string;
    all<T = GenericPayload>(params: T): Promise<import("axios").AxiosResponse<ResponseWithMeta<E[]>, any>>;
    create<T = CreatePayload>(payload: T): Promise<import("axios").AxiosResponse<any, any>>;
    find<T = string>(id: T): Promise<import("axios").AxiosResponse<E, any>>;
    update<T = string, U = UpdatePayload>(id: T, payload: U): Promise<import("axios").AxiosResponse<any, any>>;
    delete<T = string, R = any>(id: T): Promise<import("axios").AxiosResponse<R, any>>;
}
