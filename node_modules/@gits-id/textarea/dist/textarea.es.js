import { defineComponent, toRefs, computed, openBlock, createElementBlock, toDisplayString, createCommentVNode, withDirectives, createElementVNode, mergeProps, isRef, unref, vModelText } from 'vue';
import { useTextSize, useInputClasses } from '@gits-id/utils';
import { useField } from 'vee-validate';

const _hoisted_1 = { class: "mb-4" };
const _hoisted_2 = ["for"];
const _hoisted_3 = ["id", "readonly", "disabled", "cols", "rows"];
const _hoisted_4 = { class: "flex p-0 relative" };
const _hoisted_5 = ["textContent"];
const _hoisted_6 = {
  key: 1,
  class: "absolute right-0"
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  props: {
    modelValue: {
      type: String,
      default: ""
    },
    value: {
      type: String,
      default: ""
    },
    name: {
      type: String,
      default: ""
    },
    error: {
      type: Boolean,
      default: false
    },
    errorMessages: {
      type: Array,
      default: () => []
    },
    readonly: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    counter: {
      type: Boolean,
      default: false
    },
    shadow: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: ""
    },
    cols: {
      type: [String, Number],
      default: void 0
    },
    rows: {
      type: [String, Number],
      default: void 0
    },
    label: {
      type: String,
      default: ""
    },
    rules: {
      type: String,
      default: ""
    }
  },
  emits: ["input:modelValue"],
  setup(__props) {
    const props = __props;
    const { error, size } = toRefs(props);
    const { value, errorMessage } = useField(props.name, props.rules, {
      initialValue: props.modelValue || props.value
    });
    const { class: sizeClass } = useTextSize(size.value);
    const inputClass = computed(() => useInputClasses(error.value || !!errorMessage.value));
    const classes = computed(() => [
      inputClass.value,
      sizeClass.value,
      { shadow: props.shadow }
    ]);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, [
        __props.label ? (openBlock(), createElementBlock("label", {
          key: 0,
          for: __props.name,
          class: "mb-1 block"
        }, toDisplayString(__props.label), 9, _hoisted_2)) : createCommentVNode("", true),
        withDirectives(createElementVNode("textarea", mergeProps({
          id: __props.name,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(value) ? value.value = $event : null),
          class: ["block w-full", unref(classes)],
          readonly: __props.readonly,
          disabled: __props.disabled,
          cols: __props.cols,
          rows: __props.rows
        }, _ctx.$attrs), null, 16, _hoisted_3), [
          [vModelText, unref(value)]
        ]),
        createElementVNode("div", _hoisted_4, [
          unref(errorMessage) ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: "text-error-600 text-sm mt-1",
            textContent: toDisplayString(unref(errorMessage))
          }, null, 8, _hoisted_5)) : createCommentVNode("", true),
          __props.counter ? (openBlock(), createElementBlock("div", _hoisted_6, toDisplayString(unref(value).length), 1)) : createCommentVNode("", true)
        ])
      ]);
    };
  }
});

export { _sfc_main as VTextArea, _sfc_main as default };
