import { PropType } from 'vue';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            readonly: boolean;
            label: string;
            error: boolean;
            value: string | number | boolean | Record<string, any>;
            modelValue: string | number | boolean | Record<string, any>;
            items: {
                [x: string]: any;
                text: string;
                value: any;
            }[];
            color: string;
            placeholder: string;
            searchable: boolean;
            hideCheckIcon: boolean;
            btnClass: string;
            top: boolean;
            itemText: string;
            itemValue: string;
            name: string;
            errorMessages: unknown[];
            returnObject: boolean;
            clearable: boolean;
            clearText: string;
            disabled: boolean;
            labelClass: string;
            wrapperClass: string;
            errorClass: string;
            rules: string;
            shadow: boolean;
            shadowClass: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            value: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor)[];
                default: string;
            };
            modelValue: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor)[];
                default: string;
            };
            items: {
                type: PropType<{
                    [x: string]: any;
                    text: string;
                    value: any;
                }[]>;
                default: () => never[];
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            searchable: {
                type: BooleanConstructor;
                default: boolean;
            };
            hideCheckIcon: {
                type: BooleanConstructor;
                default: boolean;
            };
            btnClass: {
                type: StringConstructor;
                default: string;
            };
            top: {
                type: BooleanConstructor;
                default: boolean;
            };
            itemText: {
                type: StringConstructor;
                default: string;
            };
            itemValue: {
                type: StringConstructor;
                default: string;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            error: {
                type: BooleanConstructor;
                default: boolean;
            };
            errorMessages: {
                type: ArrayConstructor;
                default: () => never[];
            };
            returnObject: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearText: {
                type: StringConstructor;
                default: string;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            labelClass: {
                type: StringConstructor;
                default: string;
            };
            wrapperClass: {
                type: StringConstructor;
                default: string;
            };
            errorClass: {
                type: StringConstructor;
                default: string;
            };
            rules: {
                type: StringConstructor;
                default: string;
            };
            shadow: {
                type: BooleanConstructor;
                default: boolean;
            };
            shadowClass: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onUpdate:value"?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "readonly" | "label" | "error" | "value" | "modelValue" | "items" | "color" | "placeholder" | "searchable" | "hideCheckIcon" | "btnClass" | "top" | "itemText" | "itemValue" | "name" | "errorMessages" | "returnObject" | "clearable" | "clearText" | "disabled" | "labelClass" | "wrapperClass" | "errorClass" | "rules" | "shadow" | "shadowClass">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "update:modelValue" | "update:value" | "search", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            value: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor)[];
                default: string;
            };
            modelValue: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor)[];
                default: string;
            };
            items: {
                type: PropType<{
                    [x: string]: any;
                    text: string;
                    value: any;
                }[]>;
                default: () => never[];
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            searchable: {
                type: BooleanConstructor;
                default: boolean;
            };
            hideCheckIcon: {
                type: BooleanConstructor;
                default: boolean;
            };
            btnClass: {
                type: StringConstructor;
                default: string;
            };
            top: {
                type: BooleanConstructor;
                default: boolean;
            };
            itemText: {
                type: StringConstructor;
                default: string;
            };
            itemValue: {
                type: StringConstructor;
                default: string;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            error: {
                type: BooleanConstructor;
                default: boolean;
            };
            errorMessages: {
                type: ArrayConstructor;
                default: () => never[];
            };
            returnObject: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearText: {
                type: StringConstructor;
                default: string;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            labelClass: {
                type: StringConstructor;
                default: string;
            };
            wrapperClass: {
                type: StringConstructor;
                default: string;
            };
            errorClass: {
                type: StringConstructor;
                default: string;
            };
            rules: {
                type: StringConstructor;
                default: string;
            };
            shadow: {
                type: BooleanConstructor;
                default: boolean;
            };
            shadowClass: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onUpdate:value"?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:value" | "search")[], string, {
            readonly: boolean;
            label: string;
            error: boolean;
            value: string | number | boolean | Record<string, any>;
            modelValue: string | number | boolean | Record<string, any>;
            items: {
                [x: string]: any;
                text: string;
                value: any;
            }[];
            color: string;
            placeholder: string;
            searchable: boolean;
            hideCheckIcon: boolean;
            btnClass: string;
            top: boolean;
            itemText: string;
            itemValue: string;
            name: string;
            errorMessages: unknown[];
            returnObject: boolean;
            clearable: boolean;
            clearText: string;
            disabled: boolean;
            labelClass: string;
            wrapperClass: string;
            errorClass: string;
            rules: string;
            shadow: boolean;
            shadowClass: string;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        value: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor)[];
            default: string;
        };
        modelValue: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor)[];
            default: string;
        };
        items: {
            type: PropType<{
                [x: string]: any;
                text: string;
                value: any;
            }[]>;
            default: () => never[];
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        searchable: {
            type: BooleanConstructor;
            default: boolean;
        };
        hideCheckIcon: {
            type: BooleanConstructor;
            default: boolean;
        };
        btnClass: {
            type: StringConstructor;
            default: string;
        };
        top: {
            type: BooleanConstructor;
            default: boolean;
        };
        itemText: {
            type: StringConstructor;
            default: string;
        };
        itemValue: {
            type: StringConstructor;
            default: string;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        error: {
            type: BooleanConstructor;
            default: boolean;
        };
        errorMessages: {
            type: ArrayConstructor;
            default: () => never[];
        };
        returnObject: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearText: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        labelClass: {
            type: StringConstructor;
            default: string;
        };
        wrapperClass: {
            type: StringConstructor;
            default: string;
        };
        errorClass: {
            type: StringConstructor;
            default: string;
        };
        rules: {
            type: StringConstructor;
            default: string;
        };
        shadow: {
            type: BooleanConstructor;
            default: boolean;
        };
        shadowClass: {
            type: StringConstructor;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onUpdate:value"?: ((...args: any[]) => any) | undefined;
        onSearch?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor)[];
        default: string;
    };
    modelValue: {
        type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor)[];
        default: string;
    };
    items: {
        type: PropType<{
            [x: string]: any;
            text: string;
            value: any;
        }[]>;
        default: () => never[];
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    searchable: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideCheckIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    btnClass: {
        type: StringConstructor;
        default: string;
    };
    top: {
        type: BooleanConstructor;
        default: boolean;
    };
    itemText: {
        type: StringConstructor;
        default: string;
    };
    itemValue: {
        type: StringConstructor;
        default: string;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorMessages: {
        type: ArrayConstructor;
        default: () => never[];
    };
    returnObject: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearText: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    labelClass: {
        type: StringConstructor;
        default: string;
    };
    wrapperClass: {
        type: StringConstructor;
        default: string;
    };
    errorClass: {
        type: StringConstructor;
        default: string;
    };
    rules: {
        type: StringConstructor;
        default: string;
    };
    shadow: {
        type: BooleanConstructor;
        default: boolean;
    };
    shadowClass: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    onSearch?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:value" | "search")[], "search" | "update:modelValue" | "update:value", {
    readonly: boolean;
    label: string;
    error: boolean;
    value: string | number | boolean | Record<string, any>;
    modelValue: string | number | boolean | Record<string, any>;
    items: {
        [x: string]: any;
        text: string;
        value: any;
    }[];
    color: string;
    placeholder: string;
    searchable: boolean;
    hideCheckIcon: boolean;
    btnClass: string;
    top: boolean;
    itemText: string;
    itemValue: string;
    name: string;
    errorMessages: unknown[];
    returnObject: boolean;
    clearable: boolean;
    clearText: string;
    disabled: boolean;
    labelClass: string;
    wrapperClass: string;
    errorClass: string;
    rules: string;
    shadow: boolean;
    shadowClass: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: typeof import('./VSelect.vue.__VLS_template').default;
});
export default _default;
