declare namespace _default {
    export const title: string;
    export { VMultiSelect as component };
    export const argTypes: {};
    export namespace args {
        export { items };
        export const modelValue: never[];
        export const itemText: string;
        export const itemValue: string;
        export const searchBy: string;
        export const placeholder: string;
        export const name: string;
        export const error: boolean;
        export const errorMessages: never[];
        export const clearable: boolean;
        export const maxBadge: number;
        export const delay: number;
        export const id: string;
        export const inputProps: {};
        export const selectAll: boolean;
        export const loading: boolean;
    }
}
export default _default;
export function Default(args: any): {
    components: {
        VMultiSelect: {
            new (...args: any[]): {
                $: import("vue").ComponentInternalInstance;
                $data: {};
                $props: Partial<{
                    label: string;
                    modelValue: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    items: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    itemText: string;
                    itemValue: string;
                    searchBy: string;
                    maxBadge: number;
                    placeholder: string;
                    delay: number;
                    id: string;
                    name: string;
                    inputProps: Record<string, any>;
                    selectAll: boolean;
                    loading: boolean;
                    error: boolean;
                    errorMessages: unknown[];
                    wrapperClass: string;
                    inputClass: string;
                    badgeColor: string;
                    badgeClass: string;
                    badgeProps: Record<string, any>;
                    dropdownClass: string;
                    itemClass: string;
                    checkWrapperClass: string;
                    checkIconClass: string;
                    noDataClass: string;
                    loadingClass: string;
                    labelClass: string;
                    rules: string;
                    errorClass: string;
                }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    items: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    itemText: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemValue: {
                        type: StringConstructor;
                        default: string;
                    };
                    searchBy: {
                        type: StringConstructor;
                        default: string;
                    };
                    maxBadge: {
                        type: NumberConstructor;
                        default: number;
                    };
                    placeholder: {
                        type: StringConstructor;
                        default: string;
                    };
                    delay: {
                        type: NumberConstructor;
                        default: number;
                    };
                    id: {
                        type: StringConstructor;
                        default: string;
                    };
                    name: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputProps: {
                        type: import("vue").PropType<Record<string, any>>;
                        default: () => {};
                    };
                    selectAll: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    error: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    errorMessages: {
                        type: ArrayConstructor;
                        default: () => never[];
                    };
                    wrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeProps: {
                        type: ObjectConstructor;
                        default: () => {};
                    };
                    dropdownClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkWrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkIconClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    noDataClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    loadingClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    label: {
                        type: StringConstructor;
                        default: string;
                    };
                    labelClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    rules: {
                        type: StringConstructor;
                        default: string;
                    };
                    errorClass: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onClick:outside"?: ((...args: any[]) => any) | undefined;
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    onSearch?: ((...args: any[]) => any) | undefined;
                    onSelected?: ((...args: any[]) => any) | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "label" | "modelValue" | "items" | "itemText" | "itemValue" | "searchBy" | "maxBadge" | "placeholder" | "delay" | "id" | "name" | "inputProps" | "selectAll" | "loading" | "error" | "errorMessages" | "wrapperClass" | "inputClass" | "badgeColor" | "badgeClass" | "badgeProps" | "dropdownClass" | "itemClass" | "checkWrapperClass" | "checkIconClass" | "noDataClass" | "loadingClass" | "labelClass" | "rules" | "errorClass">;
                $attrs: {
                    [x: string]: unknown;
                };
                $refs: {
                    [x: string]: unknown;
                };
                $slots: Readonly<{
                    [name: string]: import("vue").Slot | undefined;
                }>;
                $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $emit: (event: "click:outside" | "update:modelValue" | "search" | "selected", ...args: any[]) => void;
                $el: any;
                $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    items: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    itemText: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemValue: {
                        type: StringConstructor;
                        default: string;
                    };
                    searchBy: {
                        type: StringConstructor;
                        default: string;
                    };
                    maxBadge: {
                        type: NumberConstructor;
                        default: number;
                    };
                    placeholder: {
                        type: StringConstructor;
                        default: string;
                    };
                    delay: {
                        type: NumberConstructor;
                        default: number;
                    };
                    id: {
                        type: StringConstructor;
                        default: string;
                    };
                    name: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputProps: {
                        type: import("vue").PropType<Record<string, any>>;
                        default: () => {};
                    };
                    selectAll: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    error: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    errorMessages: {
                        type: ArrayConstructor;
                        default: () => never[];
                    };
                    wrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeProps: {
                        type: ObjectConstructor;
                        default: () => {};
                    };
                    dropdownClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkWrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkIconClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    noDataClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    loadingClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    label: {
                        type: StringConstructor;
                        default: string;
                    };
                    labelClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    rules: {
                        type: StringConstructor;
                        default: string;
                    };
                    errorClass: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onClick:outside"?: ((...args: any[]) => any) | undefined;
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    onSearch?: ((...args: any[]) => any) | undefined;
                    onSelected?: ((...args: any[]) => any) | undefined;
                }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click:outside" | "update:modelValue" | "search" | "selected")[], string, {
                    label: string;
                    modelValue: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    items: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    itemText: string;
                    itemValue: string;
                    searchBy: string;
                    maxBadge: number;
                    placeholder: string;
                    delay: number;
                    id: string;
                    name: string;
                    inputProps: Record<string, any>;
                    selectAll: boolean;
                    loading: boolean;
                    error: boolean;
                    errorMessages: unknown[];
                    wrapperClass: string;
                    inputClass: string;
                    badgeColor: string;
                    badgeClass: string;
                    badgeProps: Record<string, any>;
                    dropdownClass: string;
                    itemClass: string;
                    checkWrapperClass: string;
                    checkIconClass: string;
                    noDataClass: string;
                    loadingClass: string;
                    labelClass: string;
                    rules: string;
                    errorClass: string;
                }> & {
                    beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                    created?: ((() => void) | (() => void)[]) | undefined;
                    beforeMount?: ((() => void) | (() => void)[]) | undefined;
                    mounted?: ((() => void) | (() => void)[]) | undefined;
                    beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                    updated?: ((() => void) | (() => void)[]) | undefined;
                    activated?: ((() => void) | (() => void)[]) | undefined;
                    deactivated?: ((() => void) | (() => void)[]) | undefined;
                    beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                    beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                    destroyed?: ((() => void) | (() => void)[]) | undefined;
                    unmounted?: ((() => void) | (() => void)[]) | undefined;
                    renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                };
                $forceUpdate: () => void;
                $nextTick: typeof import("vue").nextTick;
                $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
            } & Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: import("vue").PropType<{
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[]>;
                    default: () => never[];
                };
                items: {
                    type: import("vue").PropType<{
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[]>;
                    default: () => never[];
                };
                itemText: {
                    type: StringConstructor;
                    default: string;
                };
                itemValue: {
                    type: StringConstructor;
                    default: string;
                };
                searchBy: {
                    type: StringConstructor;
                    default: string;
                };
                maxBadge: {
                    type: NumberConstructor;
                    default: number;
                };
                placeholder: {
                    type: StringConstructor;
                    default: string;
                };
                delay: {
                    type: NumberConstructor;
                    default: number;
                };
                id: {
                    type: StringConstructor;
                    default: string;
                };
                name: {
                    type: StringConstructor;
                    default: string;
                };
                inputProps: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => {};
                };
                selectAll: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                error: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                errorMessages: {
                    type: ArrayConstructor;
                    default: () => never[];
                };
                wrapperClass: {
                    type: StringConstructor;
                    default: string;
                };
                inputClass: {
                    type: StringConstructor;
                    default: string;
                };
                badgeColor: {
                    type: StringConstructor;
                    default: string;
                };
                badgeClass: {
                    type: StringConstructor;
                    default: string;
                };
                badgeProps: {
                    type: ObjectConstructor;
                    default: () => {};
                };
                dropdownClass: {
                    type: StringConstructor;
                    default: string;
                };
                itemClass: {
                    type: StringConstructor;
                    default: string;
                };
                checkWrapperClass: {
                    type: StringConstructor;
                    default: string;
                };
                checkIconClass: {
                    type: StringConstructor;
                    default: string;
                };
                noDataClass: {
                    type: StringConstructor;
                    default: string;
                };
                loadingClass: {
                    type: StringConstructor;
                    default: string;
                };
                label: {
                    type: StringConstructor;
                    default: string;
                };
                labelClass: {
                    type: StringConstructor;
                    default: string;
                };
                rules: {
                    type: StringConstructor;
                    default: string;
                };
                errorClass: {
                    type: StringConstructor;
                    default: string;
                };
            }>> & {
                "onClick:outside"?: ((...args: any[]) => any) | undefined;
                "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                onSearch?: ((...args: any[]) => any) | undefined;
                onSelected?: ((...args: any[]) => any) | undefined;
            } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
            __isFragment?: undefined;
            __isTeleport?: undefined;
            __isSuspense?: undefined;
        } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: import("vue").PropType<{
                    [x: string]: any;
                    text: string;
                    value: any;
                }[]>;
                default: () => never[];
            };
            items: {
                type: import("vue").PropType<{
                    [x: string]: any;
                    text: string;
                    value: any;
                }[]>;
                default: () => never[];
            };
            itemText: {
                type: StringConstructor;
                default: string;
            };
            itemValue: {
                type: StringConstructor;
                default: string;
            };
            searchBy: {
                type: StringConstructor;
                default: string;
            };
            maxBadge: {
                type: NumberConstructor;
                default: number;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            delay: {
                type: NumberConstructor;
                default: number;
            };
            id: {
                type: StringConstructor;
                default: string;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            inputProps: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => {};
            };
            selectAll: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            error: {
                type: BooleanConstructor;
                default: boolean;
            };
            errorMessages: {
                type: ArrayConstructor;
                default: () => never[];
            };
            wrapperClass: {
                type: StringConstructor;
                default: string;
            };
            inputClass: {
                type: StringConstructor;
                default: string;
            };
            badgeColor: {
                type: StringConstructor;
                default: string;
            };
            badgeClass: {
                type: StringConstructor;
                default: string;
            };
            badgeProps: {
                type: ObjectConstructor;
                default: () => {};
            };
            dropdownClass: {
                type: StringConstructor;
                default: string;
            };
            itemClass: {
                type: StringConstructor;
                default: string;
            };
            checkWrapperClass: {
                type: StringConstructor;
                default: string;
            };
            checkIconClass: {
                type: StringConstructor;
                default: string;
            };
            noDataClass: {
                type: StringConstructor;
                default: string;
            };
            loadingClass: {
                type: StringConstructor;
                default: string;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            labelClass: {
                type: StringConstructor;
                default: string;
            };
            rules: {
                type: StringConstructor;
                default: string;
            };
            errorClass: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            "onClick:outside"?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
            onSelected?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click:outside" | "update:modelValue" | "search" | "selected")[], "search" | "click:outside" | "update:modelValue" | "selected", {
            label: string;
            modelValue: {
                [x: string]: any;
                text: string;
                value: any;
            }[];
            items: {
                [x: string]: any;
                text: string;
                value: any;
            }[];
            itemText: string;
            itemValue: string;
            searchBy: string;
            maxBadge: number;
            placeholder: string;
            delay: number;
            id: string;
            name: string;
            inputProps: Record<string, any>;
            selectAll: boolean;
            loading: boolean;
            error: boolean;
            errorMessages: unknown[];
            wrapperClass: string;
            inputClass: string;
            badgeColor: string;
            badgeClass: string;
            badgeProps: Record<string, any>;
            dropdownClass: string;
            itemClass: string;
            checkWrapperClass: string;
            checkIconClass: string;
            noDataClass: string;
            loadingClass: string;
            labelClass: string;
            rules: string;
            errorClass: string;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
            $slots: {};
        });
    };
    setup(): {
        args: any;
    };
    template: string;
};
export namespace Default {
    const args_1: {};
    export { args_1 as args };
    export namespace parameters {
        namespace docs {
            namespace source {
                const code: string;
            }
        }
    }
}
export function Clearable(args: any): {
    components: {
        VMultiSelect: {
            new (...args: any[]): {
                $: import("vue").ComponentInternalInstance;
                $data: {};
                $props: Partial<{
                    label: string;
                    modelValue: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    items: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    itemText: string;
                    itemValue: string;
                    searchBy: string;
                    maxBadge: number;
                    placeholder: string;
                    delay: number;
                    id: string;
                    name: string;
                    inputProps: Record<string, any>;
                    selectAll: boolean;
                    loading: boolean;
                    error: boolean;
                    errorMessages: unknown[];
                    wrapperClass: string;
                    inputClass: string;
                    badgeColor: string;
                    badgeClass: string;
                    badgeProps: Record<string, any>;
                    dropdownClass: string;
                    itemClass: string;
                    checkWrapperClass: string;
                    checkIconClass: string;
                    noDataClass: string;
                    loadingClass: string;
                    labelClass: string;
                    rules: string;
                    errorClass: string;
                }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    items: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    itemText: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemValue: {
                        type: StringConstructor;
                        default: string;
                    };
                    searchBy: {
                        type: StringConstructor;
                        default: string;
                    };
                    maxBadge: {
                        type: NumberConstructor;
                        default: number;
                    };
                    placeholder: {
                        type: StringConstructor;
                        default: string;
                    };
                    delay: {
                        type: NumberConstructor;
                        default: number;
                    };
                    id: {
                        type: StringConstructor;
                        default: string;
                    };
                    name: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputProps: {
                        type: import("vue").PropType<Record<string, any>>;
                        default: () => {};
                    };
                    selectAll: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    error: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    errorMessages: {
                        type: ArrayConstructor;
                        default: () => never[];
                    };
                    wrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeProps: {
                        type: ObjectConstructor;
                        default: () => {};
                    };
                    dropdownClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkWrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkIconClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    noDataClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    loadingClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    label: {
                        type: StringConstructor;
                        default: string;
                    };
                    labelClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    rules: {
                        type: StringConstructor;
                        default: string;
                    };
                    errorClass: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onClick:outside"?: ((...args: any[]) => any) | undefined;
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    onSearch?: ((...args: any[]) => any) | undefined;
                    onSelected?: ((...args: any[]) => any) | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "label" | "modelValue" | "items" | "itemText" | "itemValue" | "searchBy" | "maxBadge" | "placeholder" | "delay" | "id" | "name" | "inputProps" | "selectAll" | "loading" | "error" | "errorMessages" | "wrapperClass" | "inputClass" | "badgeColor" | "badgeClass" | "badgeProps" | "dropdownClass" | "itemClass" | "checkWrapperClass" | "checkIconClass" | "noDataClass" | "loadingClass" | "labelClass" | "rules" | "errorClass">;
                $attrs: {
                    [x: string]: unknown;
                };
                $refs: {
                    [x: string]: unknown;
                };
                $slots: Readonly<{
                    [name: string]: import("vue").Slot | undefined;
                }>;
                $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $emit: (event: "click:outside" | "update:modelValue" | "search" | "selected", ...args: any[]) => void;
                $el: any;
                $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    items: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    itemText: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemValue: {
                        type: StringConstructor;
                        default: string;
                    };
                    searchBy: {
                        type: StringConstructor;
                        default: string;
                    };
                    maxBadge: {
                        type: NumberConstructor;
                        default: number;
                    };
                    placeholder: {
                        type: StringConstructor;
                        default: string;
                    };
                    delay: {
                        type: NumberConstructor;
                        default: number;
                    };
                    id: {
                        type: StringConstructor;
                        default: string;
                    };
                    name: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputProps: {
                        type: import("vue").PropType<Record<string, any>>;
                        default: () => {};
                    };
                    selectAll: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    error: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    errorMessages: {
                        type: ArrayConstructor;
                        default: () => never[];
                    };
                    wrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeProps: {
                        type: ObjectConstructor;
                        default: () => {};
                    };
                    dropdownClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkWrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkIconClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    noDataClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    loadingClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    label: {
                        type: StringConstructor;
                        default: string;
                    };
                    labelClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    rules: {
                        type: StringConstructor;
                        default: string;
                    };
                    errorClass: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onClick:outside"?: ((...args: any[]) => any) | undefined;
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    onSearch?: ((...args: any[]) => any) | undefined;
                    onSelected?: ((...args: any[]) => any) | undefined;
                }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click:outside" | "update:modelValue" | "search" | "selected")[], string, {
                    label: string;
                    modelValue: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    items: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    itemText: string;
                    itemValue: string;
                    searchBy: string;
                    maxBadge: number;
                    placeholder: string;
                    delay: number;
                    id: string;
                    name: string;
                    inputProps: Record<string, any>;
                    selectAll: boolean;
                    loading: boolean;
                    error: boolean;
                    errorMessages: unknown[];
                    wrapperClass: string;
                    inputClass: string;
                    badgeColor: string;
                    badgeClass: string;
                    badgeProps: Record<string, any>;
                    dropdownClass: string;
                    itemClass: string;
                    checkWrapperClass: string;
                    checkIconClass: string;
                    noDataClass: string;
                    loadingClass: string;
                    labelClass: string;
                    rules: string;
                    errorClass: string;
                }> & {
                    beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                    created?: ((() => void) | (() => void)[]) | undefined;
                    beforeMount?: ((() => void) | (() => void)[]) | undefined;
                    mounted?: ((() => void) | (() => void)[]) | undefined;
                    beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                    updated?: ((() => void) | (() => void)[]) | undefined;
                    activated?: ((() => void) | (() => void)[]) | undefined;
                    deactivated?: ((() => void) | (() => void)[]) | undefined;
                    beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                    beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                    destroyed?: ((() => void) | (() => void)[]) | undefined;
                    unmounted?: ((() => void) | (() => void)[]) | undefined;
                    renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                };
                $forceUpdate: () => void;
                $nextTick: typeof import("vue").nextTick;
                $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
            } & Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: import("vue").PropType<{
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[]>;
                    default: () => never[];
                };
                items: {
                    type: import("vue").PropType<{
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[]>;
                    default: () => never[];
                };
                itemText: {
                    type: StringConstructor;
                    default: string;
                };
                itemValue: {
                    type: StringConstructor;
                    default: string;
                };
                searchBy: {
                    type: StringConstructor;
                    default: string;
                };
                maxBadge: {
                    type: NumberConstructor;
                    default: number;
                };
                placeholder: {
                    type: StringConstructor;
                    default: string;
                };
                delay: {
                    type: NumberConstructor;
                    default: number;
                };
                id: {
                    type: StringConstructor;
                    default: string;
                };
                name: {
                    type: StringConstructor;
                    default: string;
                };
                inputProps: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => {};
                };
                selectAll: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                error: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                errorMessages: {
                    type: ArrayConstructor;
                    default: () => never[];
                };
                wrapperClass: {
                    type: StringConstructor;
                    default: string;
                };
                inputClass: {
                    type: StringConstructor;
                    default: string;
                };
                badgeColor: {
                    type: StringConstructor;
                    default: string;
                };
                badgeClass: {
                    type: StringConstructor;
                    default: string;
                };
                badgeProps: {
                    type: ObjectConstructor;
                    default: () => {};
                };
                dropdownClass: {
                    type: StringConstructor;
                    default: string;
                };
                itemClass: {
                    type: StringConstructor;
                    default: string;
                };
                checkWrapperClass: {
                    type: StringConstructor;
                    default: string;
                };
                checkIconClass: {
                    type: StringConstructor;
                    default: string;
                };
                noDataClass: {
                    type: StringConstructor;
                    default: string;
                };
                loadingClass: {
                    type: StringConstructor;
                    default: string;
                };
                label: {
                    type: StringConstructor;
                    default: string;
                };
                labelClass: {
                    type: StringConstructor;
                    default: string;
                };
                rules: {
                    type: StringConstructor;
                    default: string;
                };
                errorClass: {
                    type: StringConstructor;
                    default: string;
                };
            }>> & {
                "onClick:outside"?: ((...args: any[]) => any) | undefined;
                "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                onSearch?: ((...args: any[]) => any) | undefined;
                onSelected?: ((...args: any[]) => any) | undefined;
            } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
            __isFragment?: undefined;
            __isTeleport?: undefined;
            __isSuspense?: undefined;
        } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: import("vue").PropType<{
                    [x: string]: any;
                    text: string;
                    value: any;
                }[]>;
                default: () => never[];
            };
            items: {
                type: import("vue").PropType<{
                    [x: string]: any;
                    text: string;
                    value: any;
                }[]>;
                default: () => never[];
            };
            itemText: {
                type: StringConstructor;
                default: string;
            };
            itemValue: {
                type: StringConstructor;
                default: string;
            };
            searchBy: {
                type: StringConstructor;
                default: string;
            };
            maxBadge: {
                type: NumberConstructor;
                default: number;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            delay: {
                type: NumberConstructor;
                default: number;
            };
            id: {
                type: StringConstructor;
                default: string;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            inputProps: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => {};
            };
            selectAll: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            error: {
                type: BooleanConstructor;
                default: boolean;
            };
            errorMessages: {
                type: ArrayConstructor;
                default: () => never[];
            };
            wrapperClass: {
                type: StringConstructor;
                default: string;
            };
            inputClass: {
                type: StringConstructor;
                default: string;
            };
            badgeColor: {
                type: StringConstructor;
                default: string;
            };
            badgeClass: {
                type: StringConstructor;
                default: string;
            };
            badgeProps: {
                type: ObjectConstructor;
                default: () => {};
            };
            dropdownClass: {
                type: StringConstructor;
                default: string;
            };
            itemClass: {
                type: StringConstructor;
                default: string;
            };
            checkWrapperClass: {
                type: StringConstructor;
                default: string;
            };
            checkIconClass: {
                type: StringConstructor;
                default: string;
            };
            noDataClass: {
                type: StringConstructor;
                default: string;
            };
            loadingClass: {
                type: StringConstructor;
                default: string;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            labelClass: {
                type: StringConstructor;
                default: string;
            };
            rules: {
                type: StringConstructor;
                default: string;
            };
            errorClass: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            "onClick:outside"?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
            onSelected?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click:outside" | "update:modelValue" | "search" | "selected")[], "search" | "click:outside" | "update:modelValue" | "selected", {
            label: string;
            modelValue: {
                [x: string]: any;
                text: string;
                value: any;
            }[];
            items: {
                [x: string]: any;
                text: string;
                value: any;
            }[];
            itemText: string;
            itemValue: string;
            searchBy: string;
            maxBadge: number;
            placeholder: string;
            delay: number;
            id: string;
            name: string;
            inputProps: Record<string, any>;
            selectAll: boolean;
            loading: boolean;
            error: boolean;
            errorMessages: unknown[];
            wrapperClass: string;
            inputClass: string;
            badgeColor: string;
            badgeClass: string;
            badgeProps: Record<string, any>;
            dropdownClass: string;
            itemClass: string;
            checkWrapperClass: string;
            checkIconClass: string;
            noDataClass: string;
            loadingClass: string;
            labelClass: string;
            rules: string;
            errorClass: string;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
            $slots: {};
        });
    };
    setup(): {
        args: any;
    };
    template: string;
};
export namespace Clearable {
    export namespace args_2 {
        const clearable_1: boolean;
        export { clearable_1 as clearable };
    }
    export { args_2 as args };
    export namespace parameters_1 {
        export namespace docs_1 {
            export namespace source_1 {
                const code_1: string;
                export { code_1 as code };
            }
            export { source_1 as source };
        }
        export { docs_1 as docs };
    }
    export { parameters_1 as parameters };
}
export function MaxBadge(args: any): {
    components: {
        VMultiSelect: {
            new (...args: any[]): {
                $: import("vue").ComponentInternalInstance;
                $data: {};
                $props: Partial<{
                    label: string;
                    modelValue: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    items: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    itemText: string;
                    itemValue: string;
                    searchBy: string;
                    maxBadge: number;
                    placeholder: string;
                    delay: number;
                    id: string;
                    name: string;
                    inputProps: Record<string, any>;
                    selectAll: boolean;
                    loading: boolean;
                    error: boolean;
                    errorMessages: unknown[];
                    wrapperClass: string;
                    inputClass: string;
                    badgeColor: string;
                    badgeClass: string;
                    badgeProps: Record<string, any>;
                    dropdownClass: string;
                    itemClass: string;
                    checkWrapperClass: string;
                    checkIconClass: string;
                    noDataClass: string;
                    loadingClass: string;
                    labelClass: string;
                    rules: string;
                    errorClass: string;
                }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    items: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    itemText: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemValue: {
                        type: StringConstructor;
                        default: string;
                    };
                    searchBy: {
                        type: StringConstructor;
                        default: string;
                    };
                    maxBadge: {
                        type: NumberConstructor;
                        default: number;
                    };
                    placeholder: {
                        type: StringConstructor;
                        default: string;
                    };
                    delay: {
                        type: NumberConstructor;
                        default: number;
                    };
                    id: {
                        type: StringConstructor;
                        default: string;
                    };
                    name: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputProps: {
                        type: import("vue").PropType<Record<string, any>>;
                        default: () => {};
                    };
                    selectAll: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    error: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    errorMessages: {
                        type: ArrayConstructor;
                        default: () => never[];
                    };
                    wrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeProps: {
                        type: ObjectConstructor;
                        default: () => {};
                    };
                    dropdownClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkWrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkIconClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    noDataClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    loadingClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    label: {
                        type: StringConstructor;
                        default: string;
                    };
                    labelClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    rules: {
                        type: StringConstructor;
                        default: string;
                    };
                    errorClass: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onClick:outside"?: ((...args: any[]) => any) | undefined;
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    onSearch?: ((...args: any[]) => any) | undefined;
                    onSelected?: ((...args: any[]) => any) | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "label" | "modelValue" | "items" | "itemText" | "itemValue" | "searchBy" | "maxBadge" | "placeholder" | "delay" | "id" | "name" | "inputProps" | "selectAll" | "loading" | "error" | "errorMessages" | "wrapperClass" | "inputClass" | "badgeColor" | "badgeClass" | "badgeProps" | "dropdownClass" | "itemClass" | "checkWrapperClass" | "checkIconClass" | "noDataClass" | "loadingClass" | "labelClass" | "rules" | "errorClass">;
                $attrs: {
                    [x: string]: unknown;
                };
                $refs: {
                    [x: string]: unknown;
                };
                $slots: Readonly<{
                    [name: string]: import("vue").Slot | undefined;
                }>;
                $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $emit: (event: "click:outside" | "update:modelValue" | "search" | "selected", ...args: any[]) => void;
                $el: any;
                $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    items: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    itemText: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemValue: {
                        type: StringConstructor;
                        default: string;
                    };
                    searchBy: {
                        type: StringConstructor;
                        default: string;
                    };
                    maxBadge: {
                        type: NumberConstructor;
                        default: number;
                    };
                    placeholder: {
                        type: StringConstructor;
                        default: string;
                    };
                    delay: {
                        type: NumberConstructor;
                        default: number;
                    };
                    id: {
                        type: StringConstructor;
                        default: string;
                    };
                    name: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputProps: {
                        type: import("vue").PropType<Record<string, any>>;
                        default: () => {};
                    };
                    selectAll: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    error: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    errorMessages: {
                        type: ArrayConstructor;
                        default: () => never[];
                    };
                    wrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeProps: {
                        type: ObjectConstructor;
                        default: () => {};
                    };
                    dropdownClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkWrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkIconClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    noDataClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    loadingClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    label: {
                        type: StringConstructor;
                        default: string;
                    };
                    labelClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    rules: {
                        type: StringConstructor;
                        default: string;
                    };
                    errorClass: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onClick:outside"?: ((...args: any[]) => any) | undefined;
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    onSearch?: ((...args: any[]) => any) | undefined;
                    onSelected?: ((...args: any[]) => any) | undefined;
                }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click:outside" | "update:modelValue" | "search" | "selected")[], string, {
                    label: string;
                    modelValue: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    items: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    itemText: string;
                    itemValue: string;
                    searchBy: string;
                    maxBadge: number;
                    placeholder: string;
                    delay: number;
                    id: string;
                    name: string;
                    inputProps: Record<string, any>;
                    selectAll: boolean;
                    loading: boolean;
                    error: boolean;
                    errorMessages: unknown[];
                    wrapperClass: string;
                    inputClass: string;
                    badgeColor: string;
                    badgeClass: string;
                    badgeProps: Record<string, any>;
                    dropdownClass: string;
                    itemClass: string;
                    checkWrapperClass: string;
                    checkIconClass: string;
                    noDataClass: string;
                    loadingClass: string;
                    labelClass: string;
                    rules: string;
                    errorClass: string;
                }> & {
                    beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                    created?: ((() => void) | (() => void)[]) | undefined;
                    beforeMount?: ((() => void) | (() => void)[]) | undefined;
                    mounted?: ((() => void) | (() => void)[]) | undefined;
                    beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                    updated?: ((() => void) | (() => void)[]) | undefined;
                    activated?: ((() => void) | (() => void)[]) | undefined;
                    deactivated?: ((() => void) | (() => void)[]) | undefined;
                    beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                    beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                    destroyed?: ((() => void) | (() => void)[]) | undefined;
                    unmounted?: ((() => void) | (() => void)[]) | undefined;
                    renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                };
                $forceUpdate: () => void;
                $nextTick: typeof import("vue").nextTick;
                $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
            } & Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: import("vue").PropType<{
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[]>;
                    default: () => never[];
                };
                items: {
                    type: import("vue").PropType<{
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[]>;
                    default: () => never[];
                };
                itemText: {
                    type: StringConstructor;
                    default: string;
                };
                itemValue: {
                    type: StringConstructor;
                    default: string;
                };
                searchBy: {
                    type: StringConstructor;
                    default: string;
                };
                maxBadge: {
                    type: NumberConstructor;
                    default: number;
                };
                placeholder: {
                    type: StringConstructor;
                    default: string;
                };
                delay: {
                    type: NumberConstructor;
                    default: number;
                };
                id: {
                    type: StringConstructor;
                    default: string;
                };
                name: {
                    type: StringConstructor;
                    default: string;
                };
                inputProps: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => {};
                };
                selectAll: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                error: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                errorMessages: {
                    type: ArrayConstructor;
                    default: () => never[];
                };
                wrapperClass: {
                    type: StringConstructor;
                    default: string;
                };
                inputClass: {
                    type: StringConstructor;
                    default: string;
                };
                badgeColor: {
                    type: StringConstructor;
                    default: string;
                };
                badgeClass: {
                    type: StringConstructor;
                    default: string;
                };
                badgeProps: {
                    type: ObjectConstructor;
                    default: () => {};
                };
                dropdownClass: {
                    type: StringConstructor;
                    default: string;
                };
                itemClass: {
                    type: StringConstructor;
                    default: string;
                };
                checkWrapperClass: {
                    type: StringConstructor;
                    default: string;
                };
                checkIconClass: {
                    type: StringConstructor;
                    default: string;
                };
                noDataClass: {
                    type: StringConstructor;
                    default: string;
                };
                loadingClass: {
                    type: StringConstructor;
                    default: string;
                };
                label: {
                    type: StringConstructor;
                    default: string;
                };
                labelClass: {
                    type: StringConstructor;
                    default: string;
                };
                rules: {
                    type: StringConstructor;
                    default: string;
                };
                errorClass: {
                    type: StringConstructor;
                    default: string;
                };
            }>> & {
                "onClick:outside"?: ((...args: any[]) => any) | undefined;
                "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                onSearch?: ((...args: any[]) => any) | undefined;
                onSelected?: ((...args: any[]) => any) | undefined;
            } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
            __isFragment?: undefined;
            __isTeleport?: undefined;
            __isSuspense?: undefined;
        } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: import("vue").PropType<{
                    [x: string]: any;
                    text: string;
                    value: any;
                }[]>;
                default: () => never[];
            };
            items: {
                type: import("vue").PropType<{
                    [x: string]: any;
                    text: string;
                    value: any;
                }[]>;
                default: () => never[];
            };
            itemText: {
                type: StringConstructor;
                default: string;
            };
            itemValue: {
                type: StringConstructor;
                default: string;
            };
            searchBy: {
                type: StringConstructor;
                default: string;
            };
            maxBadge: {
                type: NumberConstructor;
                default: number;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            delay: {
                type: NumberConstructor;
                default: number;
            };
            id: {
                type: StringConstructor;
                default: string;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            inputProps: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => {};
            };
            selectAll: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            error: {
                type: BooleanConstructor;
                default: boolean;
            };
            errorMessages: {
                type: ArrayConstructor;
                default: () => never[];
            };
            wrapperClass: {
                type: StringConstructor;
                default: string;
            };
            inputClass: {
                type: StringConstructor;
                default: string;
            };
            badgeColor: {
                type: StringConstructor;
                default: string;
            };
            badgeClass: {
                type: StringConstructor;
                default: string;
            };
            badgeProps: {
                type: ObjectConstructor;
                default: () => {};
            };
            dropdownClass: {
                type: StringConstructor;
                default: string;
            };
            itemClass: {
                type: StringConstructor;
                default: string;
            };
            checkWrapperClass: {
                type: StringConstructor;
                default: string;
            };
            checkIconClass: {
                type: StringConstructor;
                default: string;
            };
            noDataClass: {
                type: StringConstructor;
                default: string;
            };
            loadingClass: {
                type: StringConstructor;
                default: string;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            labelClass: {
                type: StringConstructor;
                default: string;
            };
            rules: {
                type: StringConstructor;
                default: string;
            };
            errorClass: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            "onClick:outside"?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
            onSelected?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click:outside" | "update:modelValue" | "search" | "selected")[], "search" | "click:outside" | "update:modelValue" | "selected", {
            label: string;
            modelValue: {
                [x: string]: any;
                text: string;
                value: any;
            }[];
            items: {
                [x: string]: any;
                text: string;
                value: any;
            }[];
            itemText: string;
            itemValue: string;
            searchBy: string;
            maxBadge: number;
            placeholder: string;
            delay: number;
            id: string;
            name: string;
            inputProps: Record<string, any>;
            selectAll: boolean;
            loading: boolean;
            error: boolean;
            errorMessages: unknown[];
            wrapperClass: string;
            inputClass: string;
            badgeColor: string;
            badgeClass: string;
            badgeProps: Record<string, any>;
            dropdownClass: string;
            itemClass: string;
            checkWrapperClass: string;
            checkIconClass: string;
            noDataClass: string;
            loadingClass: string;
            labelClass: string;
            rules: string;
            errorClass: string;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
            $slots: {};
        });
    };
    setup(): {
        args: any;
    };
    template: string;
};
export namespace MaxBadge {
    export namespace args_3 {
        const clearable_2: boolean;
        export { clearable_2 as clearable };
        const maxBadge_1: number;
        export { maxBadge_1 as maxBadge };
    }
    export { args_3 as args };
    export namespace parameters_2 {
        export namespace docs_2 {
            export namespace source_2 {
                const code_2: string;
                export { code_2 as code };
            }
            export { source_2 as source };
        }
        export { docs_2 as docs };
    }
    export { parameters_2 as parameters };
}
export function Label(args: any): {
    components: {
        VMultiSelect: {
            new (...args: any[]): {
                $: import("vue").ComponentInternalInstance;
                $data: {};
                $props: Partial<{
                    label: string;
                    modelValue: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    items: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    itemText: string;
                    itemValue: string;
                    searchBy: string;
                    maxBadge: number;
                    placeholder: string;
                    delay: number;
                    id: string;
                    name: string;
                    inputProps: Record<string, any>;
                    selectAll: boolean;
                    loading: boolean;
                    error: boolean;
                    errorMessages: unknown[];
                    wrapperClass: string;
                    inputClass: string;
                    badgeColor: string;
                    badgeClass: string;
                    badgeProps: Record<string, any>;
                    dropdownClass: string;
                    itemClass: string;
                    checkWrapperClass: string;
                    checkIconClass: string;
                    noDataClass: string;
                    loadingClass: string;
                    labelClass: string;
                    rules: string;
                    errorClass: string;
                }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    items: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    itemText: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemValue: {
                        type: StringConstructor;
                        default: string;
                    };
                    searchBy: {
                        type: StringConstructor;
                        default: string;
                    };
                    maxBadge: {
                        type: NumberConstructor;
                        default: number;
                    };
                    placeholder: {
                        type: StringConstructor;
                        default: string;
                    };
                    delay: {
                        type: NumberConstructor;
                        default: number;
                    };
                    id: {
                        type: StringConstructor;
                        default: string;
                    };
                    name: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputProps: {
                        type: import("vue").PropType<Record<string, any>>;
                        default: () => {};
                    };
                    selectAll: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    error: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    errorMessages: {
                        type: ArrayConstructor;
                        default: () => never[];
                    };
                    wrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeProps: {
                        type: ObjectConstructor;
                        default: () => {};
                    };
                    dropdownClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkWrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkIconClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    noDataClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    loadingClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    label: {
                        type: StringConstructor;
                        default: string;
                    };
                    labelClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    rules: {
                        type: StringConstructor;
                        default: string;
                    };
                    errorClass: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onClick:outside"?: ((...args: any[]) => any) | undefined;
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    onSearch?: ((...args: any[]) => any) | undefined;
                    onSelected?: ((...args: any[]) => any) | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "label" | "modelValue" | "items" | "itemText" | "itemValue" | "searchBy" | "maxBadge" | "placeholder" | "delay" | "id" | "name" | "inputProps" | "selectAll" | "loading" | "error" | "errorMessages" | "wrapperClass" | "inputClass" | "badgeColor" | "badgeClass" | "badgeProps" | "dropdownClass" | "itemClass" | "checkWrapperClass" | "checkIconClass" | "noDataClass" | "loadingClass" | "labelClass" | "rules" | "errorClass">;
                $attrs: {
                    [x: string]: unknown;
                };
                $refs: {
                    [x: string]: unknown;
                };
                $slots: Readonly<{
                    [name: string]: import("vue").Slot | undefined;
                }>;
                $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $emit: (event: "click:outside" | "update:modelValue" | "search" | "selected", ...args: any[]) => void;
                $el: any;
                $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    items: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    itemText: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemValue: {
                        type: StringConstructor;
                        default: string;
                    };
                    searchBy: {
                        type: StringConstructor;
                        default: string;
                    };
                    maxBadge: {
                        type: NumberConstructor;
                        default: number;
                    };
                    placeholder: {
                        type: StringConstructor;
                        default: string;
                    };
                    delay: {
                        type: NumberConstructor;
                        default: number;
                    };
                    id: {
                        type: StringConstructor;
                        default: string;
                    };
                    name: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputProps: {
                        type: import("vue").PropType<Record<string, any>>;
                        default: () => {};
                    };
                    selectAll: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    error: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    errorMessages: {
                        type: ArrayConstructor;
                        default: () => never[];
                    };
                    wrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeProps: {
                        type: ObjectConstructor;
                        default: () => {};
                    };
                    dropdownClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkWrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkIconClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    noDataClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    loadingClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    label: {
                        type: StringConstructor;
                        default: string;
                    };
                    labelClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    rules: {
                        type: StringConstructor;
                        default: string;
                    };
                    errorClass: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onClick:outside"?: ((...args: any[]) => any) | undefined;
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    onSearch?: ((...args: any[]) => any) | undefined;
                    onSelected?: ((...args: any[]) => any) | undefined;
                }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click:outside" | "update:modelValue" | "search" | "selected")[], string, {
                    label: string;
                    modelValue: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    items: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    itemText: string;
                    itemValue: string;
                    searchBy: string;
                    maxBadge: number;
                    placeholder: string;
                    delay: number;
                    id: string;
                    name: string;
                    inputProps: Record<string, any>;
                    selectAll: boolean;
                    loading: boolean;
                    error: boolean;
                    errorMessages: unknown[];
                    wrapperClass: string;
                    inputClass: string;
                    badgeColor: string;
                    badgeClass: string;
                    badgeProps: Record<string, any>;
                    dropdownClass: string;
                    itemClass: string;
                    checkWrapperClass: string;
                    checkIconClass: string;
                    noDataClass: string;
                    loadingClass: string;
                    labelClass: string;
                    rules: string;
                    errorClass: string;
                }> & {
                    beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                    created?: ((() => void) | (() => void)[]) | undefined;
                    beforeMount?: ((() => void) | (() => void)[]) | undefined;
                    mounted?: ((() => void) | (() => void)[]) | undefined;
                    beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                    updated?: ((() => void) | (() => void)[]) | undefined;
                    activated?: ((() => void) | (() => void)[]) | undefined;
                    deactivated?: ((() => void) | (() => void)[]) | undefined;
                    beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                    beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                    destroyed?: ((() => void) | (() => void)[]) | undefined;
                    unmounted?: ((() => void) | (() => void)[]) | undefined;
                    renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                };
                $forceUpdate: () => void;
                $nextTick: typeof import("vue").nextTick;
                $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
            } & Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: import("vue").PropType<{
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[]>;
                    default: () => never[];
                };
                items: {
                    type: import("vue").PropType<{
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[]>;
                    default: () => never[];
                };
                itemText: {
                    type: StringConstructor;
                    default: string;
                };
                itemValue: {
                    type: StringConstructor;
                    default: string;
                };
                searchBy: {
                    type: StringConstructor;
                    default: string;
                };
                maxBadge: {
                    type: NumberConstructor;
                    default: number;
                };
                placeholder: {
                    type: StringConstructor;
                    default: string;
                };
                delay: {
                    type: NumberConstructor;
                    default: number;
                };
                id: {
                    type: StringConstructor;
                    default: string;
                };
                name: {
                    type: StringConstructor;
                    default: string;
                };
                inputProps: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => {};
                };
                selectAll: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                error: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                errorMessages: {
                    type: ArrayConstructor;
                    default: () => never[];
                };
                wrapperClass: {
                    type: StringConstructor;
                    default: string;
                };
                inputClass: {
                    type: StringConstructor;
                    default: string;
                };
                badgeColor: {
                    type: StringConstructor;
                    default: string;
                };
                badgeClass: {
                    type: StringConstructor;
                    default: string;
                };
                badgeProps: {
                    type: ObjectConstructor;
                    default: () => {};
                };
                dropdownClass: {
                    type: StringConstructor;
                    default: string;
                };
                itemClass: {
                    type: StringConstructor;
                    default: string;
                };
                checkWrapperClass: {
                    type: StringConstructor;
                    default: string;
                };
                checkIconClass: {
                    type: StringConstructor;
                    default: string;
                };
                noDataClass: {
                    type: StringConstructor;
                    default: string;
                };
                loadingClass: {
                    type: StringConstructor;
                    default: string;
                };
                label: {
                    type: StringConstructor;
                    default: string;
                };
                labelClass: {
                    type: StringConstructor;
                    default: string;
                };
                rules: {
                    type: StringConstructor;
                    default: string;
                };
                errorClass: {
                    type: StringConstructor;
                    default: string;
                };
            }>> & {
                "onClick:outside"?: ((...args: any[]) => any) | undefined;
                "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                onSearch?: ((...args: any[]) => any) | undefined;
                onSelected?: ((...args: any[]) => any) | undefined;
            } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
            __isFragment?: undefined;
            __isTeleport?: undefined;
            __isSuspense?: undefined;
        } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: import("vue").PropType<{
                    [x: string]: any;
                    text: string;
                    value: any;
                }[]>;
                default: () => never[];
            };
            items: {
                type: import("vue").PropType<{
                    [x: string]: any;
                    text: string;
                    value: any;
                }[]>;
                default: () => never[];
            };
            itemText: {
                type: StringConstructor;
                default: string;
            };
            itemValue: {
                type: StringConstructor;
                default: string;
            };
            searchBy: {
                type: StringConstructor;
                default: string;
            };
            maxBadge: {
                type: NumberConstructor;
                default: number;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            delay: {
                type: NumberConstructor;
                default: number;
            };
            id: {
                type: StringConstructor;
                default: string;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            inputProps: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => {};
            };
            selectAll: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            error: {
                type: BooleanConstructor;
                default: boolean;
            };
            errorMessages: {
                type: ArrayConstructor;
                default: () => never[];
            };
            wrapperClass: {
                type: StringConstructor;
                default: string;
            };
            inputClass: {
                type: StringConstructor;
                default: string;
            };
            badgeColor: {
                type: StringConstructor;
                default: string;
            };
            badgeClass: {
                type: StringConstructor;
                default: string;
            };
            badgeProps: {
                type: ObjectConstructor;
                default: () => {};
            };
            dropdownClass: {
                type: StringConstructor;
                default: string;
            };
            itemClass: {
                type: StringConstructor;
                default: string;
            };
            checkWrapperClass: {
                type: StringConstructor;
                default: string;
            };
            checkIconClass: {
                type: StringConstructor;
                default: string;
            };
            noDataClass: {
                type: StringConstructor;
                default: string;
            };
            loadingClass: {
                type: StringConstructor;
                default: string;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            labelClass: {
                type: StringConstructor;
                default: string;
            };
            rules: {
                type: StringConstructor;
                default: string;
            };
            errorClass: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            "onClick:outside"?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
            onSelected?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click:outside" | "update:modelValue" | "search" | "selected")[], "search" | "click:outside" | "update:modelValue" | "selected", {
            label: string;
            modelValue: {
                [x: string]: any;
                text: string;
                value: any;
            }[];
            items: {
                [x: string]: any;
                text: string;
                value: any;
            }[];
            itemText: string;
            itemValue: string;
            searchBy: string;
            maxBadge: number;
            placeholder: string;
            delay: number;
            id: string;
            name: string;
            inputProps: Record<string, any>;
            selectAll: boolean;
            loading: boolean;
            error: boolean;
            errorMessages: unknown[];
            wrapperClass: string;
            inputClass: string;
            badgeColor: string;
            badgeClass: string;
            badgeProps: Record<string, any>;
            dropdownClass: string;
            itemClass: string;
            checkWrapperClass: string;
            checkIconClass: string;
            noDataClass: string;
            loadingClass: string;
            labelClass: string;
            rules: string;
            errorClass: string;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
            $slots: {};
        });
    };
    setup(): {
        args: any;
    };
    template: string;
};
export namespace Label {
    export namespace args_4 {
        const label: string;
    }
    export { args_4 as args };
    export namespace parameters_3 {
        export namespace docs_3 {
            export namespace source_3 {
                const code_3: string;
                export { code_3 as code };
            }
            export { source_3 as source };
        }
        export { docs_3 as docs };
    }
    export { parameters_3 as parameters };
}
export function CustomStyle(args: any): {
    components: {
        VMultiSelect: {
            new (...args: any[]): {
                $: import("vue").ComponentInternalInstance;
                $data: {};
                $props: Partial<{
                    label: string;
                    modelValue: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    items: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    itemText: string;
                    itemValue: string;
                    searchBy: string;
                    maxBadge: number;
                    placeholder: string;
                    delay: number;
                    id: string;
                    name: string;
                    inputProps: Record<string, any>;
                    selectAll: boolean;
                    loading: boolean;
                    error: boolean;
                    errorMessages: unknown[];
                    wrapperClass: string;
                    inputClass: string;
                    badgeColor: string;
                    badgeClass: string;
                    badgeProps: Record<string, any>;
                    dropdownClass: string;
                    itemClass: string;
                    checkWrapperClass: string;
                    checkIconClass: string;
                    noDataClass: string;
                    loadingClass: string;
                    labelClass: string;
                    rules: string;
                    errorClass: string;
                }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    items: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    itemText: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemValue: {
                        type: StringConstructor;
                        default: string;
                    };
                    searchBy: {
                        type: StringConstructor;
                        default: string;
                    };
                    maxBadge: {
                        type: NumberConstructor;
                        default: number;
                    };
                    placeholder: {
                        type: StringConstructor;
                        default: string;
                    };
                    delay: {
                        type: NumberConstructor;
                        default: number;
                    };
                    id: {
                        type: StringConstructor;
                        default: string;
                    };
                    name: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputProps: {
                        type: import("vue").PropType<Record<string, any>>;
                        default: () => {};
                    };
                    selectAll: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    error: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    errorMessages: {
                        type: ArrayConstructor;
                        default: () => never[];
                    };
                    wrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeProps: {
                        type: ObjectConstructor;
                        default: () => {};
                    };
                    dropdownClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkWrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkIconClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    noDataClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    loadingClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    label: {
                        type: StringConstructor;
                        default: string;
                    };
                    labelClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    rules: {
                        type: StringConstructor;
                        default: string;
                    };
                    errorClass: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onClick:outside"?: ((...args: any[]) => any) | undefined;
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    onSearch?: ((...args: any[]) => any) | undefined;
                    onSelected?: ((...args: any[]) => any) | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "label" | "modelValue" | "items" | "itemText" | "itemValue" | "searchBy" | "maxBadge" | "placeholder" | "delay" | "id" | "name" | "inputProps" | "selectAll" | "loading" | "error" | "errorMessages" | "wrapperClass" | "inputClass" | "badgeColor" | "badgeClass" | "badgeProps" | "dropdownClass" | "itemClass" | "checkWrapperClass" | "checkIconClass" | "noDataClass" | "loadingClass" | "labelClass" | "rules" | "errorClass">;
                $attrs: {
                    [x: string]: unknown;
                };
                $refs: {
                    [x: string]: unknown;
                };
                $slots: Readonly<{
                    [name: string]: import("vue").Slot | undefined;
                }>;
                $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $emit: (event: "click:outside" | "update:modelValue" | "search" | "selected", ...args: any[]) => void;
                $el: any;
                $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    items: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    itemText: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemValue: {
                        type: StringConstructor;
                        default: string;
                    };
                    searchBy: {
                        type: StringConstructor;
                        default: string;
                    };
                    maxBadge: {
                        type: NumberConstructor;
                        default: number;
                    };
                    placeholder: {
                        type: StringConstructor;
                        default: string;
                    };
                    delay: {
                        type: NumberConstructor;
                        default: number;
                    };
                    id: {
                        type: StringConstructor;
                        default: string;
                    };
                    name: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputProps: {
                        type: import("vue").PropType<Record<string, any>>;
                        default: () => {};
                    };
                    selectAll: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    error: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    errorMessages: {
                        type: ArrayConstructor;
                        default: () => never[];
                    };
                    wrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeProps: {
                        type: ObjectConstructor;
                        default: () => {};
                    };
                    dropdownClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkWrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkIconClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    noDataClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    loadingClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    label: {
                        type: StringConstructor;
                        default: string;
                    };
                    labelClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    rules: {
                        type: StringConstructor;
                        default: string;
                    };
                    errorClass: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onClick:outside"?: ((...args: any[]) => any) | undefined;
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    onSearch?: ((...args: any[]) => any) | undefined;
                    onSelected?: ((...args: any[]) => any) | undefined;
                }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click:outside" | "update:modelValue" | "search" | "selected")[], string, {
                    label: string;
                    modelValue: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    items: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    itemText: string;
                    itemValue: string;
                    searchBy: string;
                    maxBadge: number;
                    placeholder: string;
                    delay: number;
                    id: string;
                    name: string;
                    inputProps: Record<string, any>;
                    selectAll: boolean;
                    loading: boolean;
                    error: boolean;
                    errorMessages: unknown[];
                    wrapperClass: string;
                    inputClass: string;
                    badgeColor: string;
                    badgeClass: string;
                    badgeProps: Record<string, any>;
                    dropdownClass: string;
                    itemClass: string;
                    checkWrapperClass: string;
                    checkIconClass: string;
                    noDataClass: string;
                    loadingClass: string;
                    labelClass: string;
                    rules: string;
                    errorClass: string;
                }> & {
                    beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                    created?: ((() => void) | (() => void)[]) | undefined;
                    beforeMount?: ((() => void) | (() => void)[]) | undefined;
                    mounted?: ((() => void) | (() => void)[]) | undefined;
                    beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                    updated?: ((() => void) | (() => void)[]) | undefined;
                    activated?: ((() => void) | (() => void)[]) | undefined;
                    deactivated?: ((() => void) | (() => void)[]) | undefined;
                    beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                    beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                    destroyed?: ((() => void) | (() => void)[]) | undefined;
                    unmounted?: ((() => void) | (() => void)[]) | undefined;
                    renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                };
                $forceUpdate: () => void;
                $nextTick: typeof import("vue").nextTick;
                $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
            } & Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: import("vue").PropType<{
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[]>;
                    default: () => never[];
                };
                items: {
                    type: import("vue").PropType<{
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[]>;
                    default: () => never[];
                };
                itemText: {
                    type: StringConstructor;
                    default: string;
                };
                itemValue: {
                    type: StringConstructor;
                    default: string;
                };
                searchBy: {
                    type: StringConstructor;
                    default: string;
                };
                maxBadge: {
                    type: NumberConstructor;
                    default: number;
                };
                placeholder: {
                    type: StringConstructor;
                    default: string;
                };
                delay: {
                    type: NumberConstructor;
                    default: number;
                };
                id: {
                    type: StringConstructor;
                    default: string;
                };
                name: {
                    type: StringConstructor;
                    default: string;
                };
                inputProps: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => {};
                };
                selectAll: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                error: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                errorMessages: {
                    type: ArrayConstructor;
                    default: () => never[];
                };
                wrapperClass: {
                    type: StringConstructor;
                    default: string;
                };
                inputClass: {
                    type: StringConstructor;
                    default: string;
                };
                badgeColor: {
                    type: StringConstructor;
                    default: string;
                };
                badgeClass: {
                    type: StringConstructor;
                    default: string;
                };
                badgeProps: {
                    type: ObjectConstructor;
                    default: () => {};
                };
                dropdownClass: {
                    type: StringConstructor;
                    default: string;
                };
                itemClass: {
                    type: StringConstructor;
                    default: string;
                };
                checkWrapperClass: {
                    type: StringConstructor;
                    default: string;
                };
                checkIconClass: {
                    type: StringConstructor;
                    default: string;
                };
                noDataClass: {
                    type: StringConstructor;
                    default: string;
                };
                loadingClass: {
                    type: StringConstructor;
                    default: string;
                };
                label: {
                    type: StringConstructor;
                    default: string;
                };
                labelClass: {
                    type: StringConstructor;
                    default: string;
                };
                rules: {
                    type: StringConstructor;
                    default: string;
                };
                errorClass: {
                    type: StringConstructor;
                    default: string;
                };
            }>> & {
                "onClick:outside"?: ((...args: any[]) => any) | undefined;
                "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                onSearch?: ((...args: any[]) => any) | undefined;
                onSelected?: ((...args: any[]) => any) | undefined;
            } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
            __isFragment?: undefined;
            __isTeleport?: undefined;
            __isSuspense?: undefined;
        } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: import("vue").PropType<{
                    [x: string]: any;
                    text: string;
                    value: any;
                }[]>;
                default: () => never[];
            };
            items: {
                type: import("vue").PropType<{
                    [x: string]: any;
                    text: string;
                    value: any;
                }[]>;
                default: () => never[];
            };
            itemText: {
                type: StringConstructor;
                default: string;
            };
            itemValue: {
                type: StringConstructor;
                default: string;
            };
            searchBy: {
                type: StringConstructor;
                default: string;
            };
            maxBadge: {
                type: NumberConstructor;
                default: number;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            delay: {
                type: NumberConstructor;
                default: number;
            };
            id: {
                type: StringConstructor;
                default: string;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            inputProps: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => {};
            };
            selectAll: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            error: {
                type: BooleanConstructor;
                default: boolean;
            };
            errorMessages: {
                type: ArrayConstructor;
                default: () => never[];
            };
            wrapperClass: {
                type: StringConstructor;
                default: string;
            };
            inputClass: {
                type: StringConstructor;
                default: string;
            };
            badgeColor: {
                type: StringConstructor;
                default: string;
            };
            badgeClass: {
                type: StringConstructor;
                default: string;
            };
            badgeProps: {
                type: ObjectConstructor;
                default: () => {};
            };
            dropdownClass: {
                type: StringConstructor;
                default: string;
            };
            itemClass: {
                type: StringConstructor;
                default: string;
            };
            checkWrapperClass: {
                type: StringConstructor;
                default: string;
            };
            checkIconClass: {
                type: StringConstructor;
                default: string;
            };
            noDataClass: {
                type: StringConstructor;
                default: string;
            };
            loadingClass: {
                type: StringConstructor;
                default: string;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            labelClass: {
                type: StringConstructor;
                default: string;
            };
            rules: {
                type: StringConstructor;
                default: string;
            };
            errorClass: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            "onClick:outside"?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
            onSelected?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click:outside" | "update:modelValue" | "search" | "selected")[], "search" | "click:outside" | "update:modelValue" | "selected", {
            label: string;
            modelValue: {
                [x: string]: any;
                text: string;
                value: any;
            }[];
            items: {
                [x: string]: any;
                text: string;
                value: any;
            }[];
            itemText: string;
            itemValue: string;
            searchBy: string;
            maxBadge: number;
            placeholder: string;
            delay: number;
            id: string;
            name: string;
            inputProps: Record<string, any>;
            selectAll: boolean;
            loading: boolean;
            error: boolean;
            errorMessages: unknown[];
            wrapperClass: string;
            inputClass: string;
            badgeColor: string;
            badgeClass: string;
            badgeProps: Record<string, any>;
            dropdownClass: string;
            itemClass: string;
            checkWrapperClass: string;
            checkIconClass: string;
            noDataClass: string;
            loadingClass: string;
            labelClass: string;
            rules: string;
            errorClass: string;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
            $slots: {};
        });
    };
    setup(): {
        args: any;
    };
    template: string;
};
export namespace CustomStyle {
    export namespace args_5 {
        const wrapperClass: string;
        const inputClass: string;
        const dropdownClass: string;
        const itemClass: string;
        const badgeColor: string;
        const checkWrapperClass: string;
    }
    export { args_5 as args };
}
export function Validation(args: any): {
    components: {
        VBtn: {
            new (...args: any[]): {
                $: import("vue").ComponentInternalInstance;
                $data: {};
                $props: Partial<{
                    text: boolean;
                    size: string;
                    color: string;
                    to: string | Record<string, any>;
                    href: string;
                    outlined: boolean;
                    rounded: boolean;
                    disabled: boolean;
                    ring: boolean;
                    tile: boolean;
                    icon: boolean;
                    block: boolean;
                    type: string;
                    solid: boolean;
                    noRing: boolean;
                    loading: boolean;
                    loadingText: string;
                    newTab: boolean;
                    shadow: boolean;
                }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                    size: {
                        type: StringConstructor;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: (StringConstructor | ObjectConstructor)[];
                        default: string;
                    };
                    href: {
                        type: StringConstructor;
                        default: string;
                    };
                    text: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    outlined: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    rounded: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    ring: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    tile: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    icon: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    solid: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    noRing: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loadingText: {
                        type: StringConstructor;
                        default: string;
                    };
                    newTab: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    shadow: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "text" | "loading" | "type" | "color" | "rounded" | "outlined" | "size" | "to" | "href" | "disabled" | "ring" | "tile" | "icon" | "block" | "solid" | "noRing" | "loadingText" | "newTab" | "shadow">;
                $attrs: {
                    [x: string]: unknown;
                };
                $refs: {
                    [x: string]: unknown;
                };
                $slots: Readonly<{
                    [name: string]: import("vue").Slot | undefined;
                }>;
                $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $emit: (event: string, ...args: any[]) => void;
                $el: any;
                $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                    size: {
                        type: StringConstructor;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: (StringConstructor | ObjectConstructor)[];
                        default: string;
                    };
                    href: {
                        type: StringConstructor;
                        default: string;
                    };
                    text: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    outlined: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    rounded: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    ring: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    tile: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    icon: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    solid: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    noRing: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loadingText: {
                        type: StringConstructor;
                        default: string;
                    };
                    newTab: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    shadow: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
                    text: boolean;
                    size: string;
                    color: string;
                    to: string | Record<string, any>;
                    href: string;
                    outlined: boolean;
                    rounded: boolean;
                    disabled: boolean;
                    ring: boolean;
                    tile: boolean;
                    icon: boolean;
                    block: boolean;
                    type: string;
                    solid: boolean;
                    noRing: boolean;
                    loading: boolean;
                    loadingText: string;
                    newTab: boolean;
                    shadow: boolean;
                }> & {
                    beforeCreate?: (() => void) | (() => void)[] | undefined;
                    created?: (() => void) | (() => void)[] | undefined;
                    beforeMount?: (() => void) | (() => void)[] | undefined;
                    mounted?: (() => void) | (() => void)[] | undefined;
                    beforeUpdate?: (() => void) | (() => void)[] | undefined;
                    updated?: (() => void) | (() => void)[] | undefined;
                    activated?: (() => void) | (() => void)[] | undefined;
                    deactivated?: (() => void) | (() => void)[] | undefined;
                    beforeDestroy?: (() => void) | (() => void)[] | undefined;
                    beforeUnmount?: (() => void) | (() => void)[] | undefined;
                    destroyed?: (() => void) | (() => void)[] | undefined;
                    unmounted?: (() => void) | (() => void)[] | undefined;
                    renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[] | undefined;
                    renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[] | undefined;
                    errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[] | undefined;
                };
                $forceUpdate: () => void;
                $nextTick: typeof import("vue").nextTick;
                $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
            } & Readonly<import("vue").ExtractPropTypes<{
                size: {
                    type: StringConstructor;
                    default: string;
                    validator: (v: string) => boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: (StringConstructor | ObjectConstructor)[];
                    default: string;
                };
                href: {
                    type: StringConstructor;
                    default: string;
                };
                text: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                outlined: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                rounded: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                ring: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                tile: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                icon: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                solid: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                noRing: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                loadingText: {
                    type: StringConstructor;
                    default: string;
                };
                newTab: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                shadow: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }>> & import("vue").ShallowUnwrapRef<{}> & import("vue").ComponentCustomProperties;
            __isFragment?: undefined;
            __isTeleport?: undefined;
            __isSuspense?: undefined;
        } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            size: {
                type: StringConstructor;
                default: string;
                validator: (v: string) => boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: (StringConstructor | ObjectConstructor)[];
                default: string;
            };
            href: {
                type: StringConstructor;
                default: string;
            };
            text: {
                type: BooleanConstructor;
                default: boolean;
            };
            outlined: {
                type: BooleanConstructor;
                default: boolean;
            };
            rounded: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            ring: {
                type: BooleanConstructor;
                default: boolean;
            };
            tile: {
                type: BooleanConstructor;
                default: boolean;
            };
            icon: {
                type: BooleanConstructor;
                default: boolean;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            solid: {
                type: BooleanConstructor;
                default: boolean;
            };
            noRing: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            loadingText: {
                type: StringConstructor;
                default: string;
            };
            newTab: {
                type: BooleanConstructor;
                default: boolean;
            };
            shadow: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            text: boolean;
            size: string;
            color: string;
            to: string | Record<string, any>;
            href: string;
            outlined: boolean;
            rounded: boolean;
            disabled: boolean;
            ring: boolean;
            tile: boolean;
            icon: boolean;
            block: boolean;
            type: string;
            solid: boolean;
            noRing: boolean;
            loading: boolean;
            loadingText: string;
            newTab: boolean;
            shadow: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
            $slots: any;
        });
        VMultiSelect: {
            new (...args: any[]): {
                $: import("vue").ComponentInternalInstance;
                $data: {};
                $props: Partial<{
                    label: string;
                    modelValue: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    items: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    itemText: string;
                    itemValue: string;
                    searchBy: string;
                    maxBadge: number;
                    placeholder: string;
                    delay: number;
                    id: string;
                    name: string;
                    inputProps: Record<string, any>;
                    selectAll: boolean;
                    loading: boolean;
                    error: boolean;
                    errorMessages: unknown[];
                    wrapperClass: string;
                    inputClass: string;
                    badgeColor: string;
                    badgeClass: string;
                    badgeProps: Record<string, any>;
                    dropdownClass: string;
                    itemClass: string;
                    checkWrapperClass: string;
                    checkIconClass: string;
                    noDataClass: string;
                    loadingClass: string;
                    labelClass: string;
                    rules: string;
                    errorClass: string;
                }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    items: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    itemText: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemValue: {
                        type: StringConstructor;
                        default: string;
                    };
                    searchBy: {
                        type: StringConstructor;
                        default: string;
                    };
                    maxBadge: {
                        type: NumberConstructor;
                        default: number;
                    };
                    placeholder: {
                        type: StringConstructor;
                        default: string;
                    };
                    delay: {
                        type: NumberConstructor;
                        default: number;
                    };
                    id: {
                        type: StringConstructor;
                        default: string;
                    };
                    name: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputProps: {
                        type: import("vue").PropType<Record<string, any>>;
                        default: () => {};
                    };
                    selectAll: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    error: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    errorMessages: {
                        type: ArrayConstructor;
                        default: () => never[];
                    };
                    wrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeProps: {
                        type: ObjectConstructor;
                        default: () => {};
                    };
                    dropdownClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkWrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkIconClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    noDataClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    loadingClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    label: {
                        type: StringConstructor;
                        default: string;
                    };
                    labelClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    rules: {
                        type: StringConstructor;
                        default: string;
                    };
                    errorClass: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onClick:outside"?: ((...args: any[]) => any) | undefined;
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    onSearch?: ((...args: any[]) => any) | undefined;
                    onSelected?: ((...args: any[]) => any) | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "label" | "modelValue" | "items" | "itemText" | "itemValue" | "searchBy" | "maxBadge" | "placeholder" | "delay" | "id" | "name" | "inputProps" | "selectAll" | "loading" | "error" | "errorMessages" | "wrapperClass" | "inputClass" | "badgeColor" | "badgeClass" | "badgeProps" | "dropdownClass" | "itemClass" | "checkWrapperClass" | "checkIconClass" | "noDataClass" | "loadingClass" | "labelClass" | "rules" | "errorClass">;
                $attrs: {
                    [x: string]: unknown;
                };
                $refs: {
                    [x: string]: unknown;
                };
                $slots: Readonly<{
                    [name: string]: import("vue").Slot | undefined;
                }>;
                $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $emit: (event: "click:outside" | "update:modelValue" | "search" | "selected", ...args: any[]) => void;
                $el: any;
                $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    items: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    itemText: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemValue: {
                        type: StringConstructor;
                        default: string;
                    };
                    searchBy: {
                        type: StringConstructor;
                        default: string;
                    };
                    maxBadge: {
                        type: NumberConstructor;
                        default: number;
                    };
                    placeholder: {
                        type: StringConstructor;
                        default: string;
                    };
                    delay: {
                        type: NumberConstructor;
                        default: number;
                    };
                    id: {
                        type: StringConstructor;
                        default: string;
                    };
                    name: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputProps: {
                        type: import("vue").PropType<Record<string, any>>;
                        default: () => {};
                    };
                    selectAll: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    error: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    errorMessages: {
                        type: ArrayConstructor;
                        default: () => never[];
                    };
                    wrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeProps: {
                        type: ObjectConstructor;
                        default: () => {};
                    };
                    dropdownClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkWrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkIconClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    noDataClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    loadingClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    label: {
                        type: StringConstructor;
                        default: string;
                    };
                    labelClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    rules: {
                        type: StringConstructor;
                        default: string;
                    };
                    errorClass: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onClick:outside"?: ((...args: any[]) => any) | undefined;
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    onSearch?: ((...args: any[]) => any) | undefined;
                    onSelected?: ((...args: any[]) => any) | undefined;
                }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click:outside" | "update:modelValue" | "search" | "selected")[], string, {
                    label: string;
                    modelValue: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    items: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    itemText: string;
                    itemValue: string;
                    searchBy: string;
                    maxBadge: number;
                    placeholder: string;
                    delay: number;
                    id: string;
                    name: string;
                    inputProps: Record<string, any>;
                    selectAll: boolean;
                    loading: boolean;
                    error: boolean;
                    errorMessages: unknown[];
                    wrapperClass: string;
                    inputClass: string;
                    badgeColor: string;
                    badgeClass: string;
                    badgeProps: Record<string, any>;
                    dropdownClass: string;
                    itemClass: string;
                    checkWrapperClass: string;
                    checkIconClass: string;
                    noDataClass: string;
                    loadingClass: string;
                    labelClass: string;
                    rules: string;
                    errorClass: string;
                }> & {
                    beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                    created?: ((() => void) | (() => void)[]) | undefined;
                    beforeMount?: ((() => void) | (() => void)[]) | undefined;
                    mounted?: ((() => void) | (() => void)[]) | undefined;
                    beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                    updated?: ((() => void) | (() => void)[]) | undefined;
                    activated?: ((() => void) | (() => void)[]) | undefined;
                    deactivated?: ((() => void) | (() => void)[]) | undefined;
                    beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                    beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                    destroyed?: ((() => void) | (() => void)[]) | undefined;
                    unmounted?: ((() => void) | (() => void)[]) | undefined;
                    renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                };
                $forceUpdate: () => void;
                $nextTick: typeof import("vue").nextTick;
                $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
            } & Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: import("vue").PropType<{
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[]>;
                    default: () => never[];
                };
                items: {
                    type: import("vue").PropType<{
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[]>;
                    default: () => never[];
                };
                itemText: {
                    type: StringConstructor;
                    default: string;
                };
                itemValue: {
                    type: StringConstructor;
                    default: string;
                };
                searchBy: {
                    type: StringConstructor;
                    default: string;
                };
                maxBadge: {
                    type: NumberConstructor;
                    default: number;
                };
                placeholder: {
                    type: StringConstructor;
                    default: string;
                };
                delay: {
                    type: NumberConstructor;
                    default: number;
                };
                id: {
                    type: StringConstructor;
                    default: string;
                };
                name: {
                    type: StringConstructor;
                    default: string;
                };
                inputProps: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => {};
                };
                selectAll: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                error: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                errorMessages: {
                    type: ArrayConstructor;
                    default: () => never[];
                };
                wrapperClass: {
                    type: StringConstructor;
                    default: string;
                };
                inputClass: {
                    type: StringConstructor;
                    default: string;
                };
                badgeColor: {
                    type: StringConstructor;
                    default: string;
                };
                badgeClass: {
                    type: StringConstructor;
                    default: string;
                };
                badgeProps: {
                    type: ObjectConstructor;
                    default: () => {};
                };
                dropdownClass: {
                    type: StringConstructor;
                    default: string;
                };
                itemClass: {
                    type: StringConstructor;
                    default: string;
                };
                checkWrapperClass: {
                    type: StringConstructor;
                    default: string;
                };
                checkIconClass: {
                    type: StringConstructor;
                    default: string;
                };
                noDataClass: {
                    type: StringConstructor;
                    default: string;
                };
                loadingClass: {
                    type: StringConstructor;
                    default: string;
                };
                label: {
                    type: StringConstructor;
                    default: string;
                };
                labelClass: {
                    type: StringConstructor;
                    default: string;
                };
                rules: {
                    type: StringConstructor;
                    default: string;
                };
                errorClass: {
                    type: StringConstructor;
                    default: string;
                };
            }>> & {
                "onClick:outside"?: ((...args: any[]) => any) | undefined;
                "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                onSearch?: ((...args: any[]) => any) | undefined;
                onSelected?: ((...args: any[]) => any) | undefined;
            } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
            __isFragment?: undefined;
            __isTeleport?: undefined;
            __isSuspense?: undefined;
        } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: import("vue").PropType<{
                    [x: string]: any;
                    text: string;
                    value: any;
                }[]>;
                default: () => never[];
            };
            items: {
                type: import("vue").PropType<{
                    [x: string]: any;
                    text: string;
                    value: any;
                }[]>;
                default: () => never[];
            };
            itemText: {
                type: StringConstructor;
                default: string;
            };
            itemValue: {
                type: StringConstructor;
                default: string;
            };
            searchBy: {
                type: StringConstructor;
                default: string;
            };
            maxBadge: {
                type: NumberConstructor;
                default: number;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            delay: {
                type: NumberConstructor;
                default: number;
            };
            id: {
                type: StringConstructor;
                default: string;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            inputProps: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => {};
            };
            selectAll: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            error: {
                type: BooleanConstructor;
                default: boolean;
            };
            errorMessages: {
                type: ArrayConstructor;
                default: () => never[];
            };
            wrapperClass: {
                type: StringConstructor;
                default: string;
            };
            inputClass: {
                type: StringConstructor;
                default: string;
            };
            badgeColor: {
                type: StringConstructor;
                default: string;
            };
            badgeClass: {
                type: StringConstructor;
                default: string;
            };
            badgeProps: {
                type: ObjectConstructor;
                default: () => {};
            };
            dropdownClass: {
                type: StringConstructor;
                default: string;
            };
            itemClass: {
                type: StringConstructor;
                default: string;
            };
            checkWrapperClass: {
                type: StringConstructor;
                default: string;
            };
            checkIconClass: {
                type: StringConstructor;
                default: string;
            };
            noDataClass: {
                type: StringConstructor;
                default: string;
            };
            loadingClass: {
                type: StringConstructor;
                default: string;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            labelClass: {
                type: StringConstructor;
                default: string;
            };
            rules: {
                type: StringConstructor;
                default: string;
            };
            errorClass: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            "onClick:outside"?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
            onSelected?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click:outside" | "update:modelValue" | "search" | "selected")[], "search" | "click:outside" | "update:modelValue" | "selected", {
            label: string;
            modelValue: {
                [x: string]: any;
                text: string;
                value: any;
            }[];
            items: {
                [x: string]: any;
                text: string;
                value: any;
            }[];
            itemText: string;
            itemValue: string;
            searchBy: string;
            maxBadge: number;
            placeholder: string;
            delay: number;
            id: string;
            name: string;
            inputProps: Record<string, any>;
            selectAll: boolean;
            loading: boolean;
            error: boolean;
            errorMessages: unknown[];
            wrapperClass: string;
            inputClass: string;
            badgeColor: string;
            badgeClass: string;
            badgeProps: Record<string, any>;
            dropdownClass: string;
            itemClass: string;
            checkWrapperClass: string;
            checkIconClass: string;
            noDataClass: string;
            loadingClass: string;
            labelClass: string;
            rules: string;
            errorClass: string;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
            $slots: {};
        });
    };
    setup(): {
        onSubmit: (e?: Event | undefined) => Promise<void | undefined>;
        resetForm: (state?: Partial<import("vee-validate").FormState<Record<string, any>>> | undefined) => void;
        values: Record<string, any>;
        genres: import("vue").Ref<{
            text: string;
            value: string;
        }[]>;
    };
    template: string;
};
export function InitialErrors(args: any): {
    components: {
        VBtn: {
            new (...args: any[]): {
                $: import("vue").ComponentInternalInstance;
                $data: {};
                $props: Partial<{
                    text: boolean;
                    size: string;
                    color: string;
                    to: string | Record<string, any>;
                    href: string;
                    outlined: boolean;
                    rounded: boolean;
                    disabled: boolean;
                    ring: boolean;
                    tile: boolean;
                    icon: boolean;
                    block: boolean;
                    type: string;
                    solid: boolean;
                    noRing: boolean;
                    loading: boolean;
                    loadingText: string;
                    newTab: boolean;
                    shadow: boolean;
                }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                    size: {
                        type: StringConstructor;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: (StringConstructor | ObjectConstructor)[];
                        default: string;
                    };
                    href: {
                        type: StringConstructor;
                        default: string;
                    };
                    text: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    outlined: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    rounded: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    ring: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    tile: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    icon: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    solid: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    noRing: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loadingText: {
                        type: StringConstructor;
                        default: string;
                    };
                    newTab: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    shadow: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "text" | "loading" | "type" | "color" | "rounded" | "outlined" | "size" | "to" | "href" | "disabled" | "ring" | "tile" | "icon" | "block" | "solid" | "noRing" | "loadingText" | "newTab" | "shadow">;
                $attrs: {
                    [x: string]: unknown;
                };
                $refs: {
                    [x: string]: unknown;
                };
                $slots: Readonly<{
                    [name: string]: import("vue").Slot | undefined;
                }>;
                $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $emit: (event: string, ...args: any[]) => void;
                $el: any;
                $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                    size: {
                        type: StringConstructor;
                        default: string;
                        validator: (v: string) => boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                    to: {
                        type: (StringConstructor | ObjectConstructor)[];
                        default: string;
                    };
                    href: {
                        type: StringConstructor;
                        default: string;
                    };
                    text: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    outlined: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    rounded: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    ring: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    tile: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    icon: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    block: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    type: {
                        type: StringConstructor;
                        default: string;
                    };
                    solid: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    noRing: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loadingText: {
                        type: StringConstructor;
                        default: string;
                    };
                    newTab: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    shadow: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
                    text: boolean;
                    size: string;
                    color: string;
                    to: string | Record<string, any>;
                    href: string;
                    outlined: boolean;
                    rounded: boolean;
                    disabled: boolean;
                    ring: boolean;
                    tile: boolean;
                    icon: boolean;
                    block: boolean;
                    type: string;
                    solid: boolean;
                    noRing: boolean;
                    loading: boolean;
                    loadingText: string;
                    newTab: boolean;
                    shadow: boolean;
                }> & {
                    beforeCreate?: (() => void) | (() => void)[] | undefined;
                    created?: (() => void) | (() => void)[] | undefined;
                    beforeMount?: (() => void) | (() => void)[] | undefined;
                    mounted?: (() => void) | (() => void)[] | undefined;
                    beforeUpdate?: (() => void) | (() => void)[] | undefined;
                    updated?: (() => void) | (() => void)[] | undefined;
                    activated?: (() => void) | (() => void)[] | undefined;
                    deactivated?: (() => void) | (() => void)[] | undefined;
                    beforeDestroy?: (() => void) | (() => void)[] | undefined;
                    beforeUnmount?: (() => void) | (() => void)[] | undefined;
                    destroyed?: (() => void) | (() => void)[] | undefined;
                    unmounted?: (() => void) | (() => void)[] | undefined;
                    renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[] | undefined;
                    renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[] | undefined;
                    errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[] | undefined;
                };
                $forceUpdate: () => void;
                $nextTick: typeof import("vue").nextTick;
                $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
            } & Readonly<import("vue").ExtractPropTypes<{
                size: {
                    type: StringConstructor;
                    default: string;
                    validator: (v: string) => boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: (StringConstructor | ObjectConstructor)[];
                    default: string;
                };
                href: {
                    type: StringConstructor;
                    default: string;
                };
                text: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                outlined: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                rounded: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                ring: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                tile: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                icon: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                solid: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                noRing: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                loadingText: {
                    type: StringConstructor;
                    default: string;
                };
                newTab: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                shadow: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }>> & import("vue").ShallowUnwrapRef<{}> & import("vue").ComponentCustomProperties;
            __isFragment?: undefined;
            __isTeleport?: undefined;
            __isSuspense?: undefined;
        } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            size: {
                type: StringConstructor;
                default: string;
                validator: (v: string) => boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: (StringConstructor | ObjectConstructor)[];
                default: string;
            };
            href: {
                type: StringConstructor;
                default: string;
            };
            text: {
                type: BooleanConstructor;
                default: boolean;
            };
            outlined: {
                type: BooleanConstructor;
                default: boolean;
            };
            rounded: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            ring: {
                type: BooleanConstructor;
                default: boolean;
            };
            tile: {
                type: BooleanConstructor;
                default: boolean;
            };
            icon: {
                type: BooleanConstructor;
                default: boolean;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            solid: {
                type: BooleanConstructor;
                default: boolean;
            };
            noRing: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            loadingText: {
                type: StringConstructor;
                default: string;
            };
            newTab: {
                type: BooleanConstructor;
                default: boolean;
            };
            shadow: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            text: boolean;
            size: string;
            color: string;
            to: string | Record<string, any>;
            href: string;
            outlined: boolean;
            rounded: boolean;
            disabled: boolean;
            ring: boolean;
            tile: boolean;
            icon: boolean;
            block: boolean;
            type: string;
            solid: boolean;
            noRing: boolean;
            loading: boolean;
            loadingText: string;
            newTab: boolean;
            shadow: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
            $slots: any;
        });
        VMultiSelect: {
            new (...args: any[]): {
                $: import("vue").ComponentInternalInstance;
                $data: {};
                $props: Partial<{
                    label: string;
                    modelValue: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    items: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    itemText: string;
                    itemValue: string;
                    searchBy: string;
                    maxBadge: number;
                    placeholder: string;
                    delay: number;
                    id: string;
                    name: string;
                    inputProps: Record<string, any>;
                    selectAll: boolean;
                    loading: boolean;
                    error: boolean;
                    errorMessages: unknown[];
                    wrapperClass: string;
                    inputClass: string;
                    badgeColor: string;
                    badgeClass: string;
                    badgeProps: Record<string, any>;
                    dropdownClass: string;
                    itemClass: string;
                    checkWrapperClass: string;
                    checkIconClass: string;
                    noDataClass: string;
                    loadingClass: string;
                    labelClass: string;
                    rules: string;
                    errorClass: string;
                }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    items: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    itemText: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemValue: {
                        type: StringConstructor;
                        default: string;
                    };
                    searchBy: {
                        type: StringConstructor;
                        default: string;
                    };
                    maxBadge: {
                        type: NumberConstructor;
                        default: number;
                    };
                    placeholder: {
                        type: StringConstructor;
                        default: string;
                    };
                    delay: {
                        type: NumberConstructor;
                        default: number;
                    };
                    id: {
                        type: StringConstructor;
                        default: string;
                    };
                    name: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputProps: {
                        type: import("vue").PropType<Record<string, any>>;
                        default: () => {};
                    };
                    selectAll: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    error: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    errorMessages: {
                        type: ArrayConstructor;
                        default: () => never[];
                    };
                    wrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeProps: {
                        type: ObjectConstructor;
                        default: () => {};
                    };
                    dropdownClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkWrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkIconClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    noDataClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    loadingClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    label: {
                        type: StringConstructor;
                        default: string;
                    };
                    labelClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    rules: {
                        type: StringConstructor;
                        default: string;
                    };
                    errorClass: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onClick:outside"?: ((...args: any[]) => any) | undefined;
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    onSearch?: ((...args: any[]) => any) | undefined;
                    onSelected?: ((...args: any[]) => any) | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "label" | "modelValue" | "items" | "itemText" | "itemValue" | "searchBy" | "maxBadge" | "placeholder" | "delay" | "id" | "name" | "inputProps" | "selectAll" | "loading" | "error" | "errorMessages" | "wrapperClass" | "inputClass" | "badgeColor" | "badgeClass" | "badgeProps" | "dropdownClass" | "itemClass" | "checkWrapperClass" | "checkIconClass" | "noDataClass" | "loadingClass" | "labelClass" | "rules" | "errorClass">;
                $attrs: {
                    [x: string]: unknown;
                };
                $refs: {
                    [x: string]: unknown;
                };
                $slots: Readonly<{
                    [name: string]: import("vue").Slot | undefined;
                }>;
                $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $emit: (event: "click:outside" | "update:modelValue" | "search" | "selected", ...args: any[]) => void;
                $el: any;
                $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    items: {
                        type: import("vue").PropType<{
                            [x: string]: any;
                            text: string;
                            value: any;
                        }[]>;
                        default: () => never[];
                    };
                    itemText: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemValue: {
                        type: StringConstructor;
                        default: string;
                    };
                    searchBy: {
                        type: StringConstructor;
                        default: string;
                    };
                    maxBadge: {
                        type: NumberConstructor;
                        default: number;
                    };
                    placeholder: {
                        type: StringConstructor;
                        default: string;
                    };
                    delay: {
                        type: NumberConstructor;
                        default: number;
                    };
                    id: {
                        type: StringConstructor;
                        default: string;
                    };
                    name: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputProps: {
                        type: import("vue").PropType<Record<string, any>>;
                        default: () => {};
                    };
                    selectAll: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    loading: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    error: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    errorMessages: {
                        type: ArrayConstructor;
                        default: () => never[];
                    };
                    wrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    inputClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeColor: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    badgeProps: {
                        type: ObjectConstructor;
                        default: () => {};
                    };
                    dropdownClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    itemClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkWrapperClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    checkIconClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    noDataClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    loadingClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    label: {
                        type: StringConstructor;
                        default: string;
                    };
                    labelClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    rules: {
                        type: StringConstructor;
                        default: string;
                    };
                    errorClass: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onClick:outside"?: ((...args: any[]) => any) | undefined;
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    onSearch?: ((...args: any[]) => any) | undefined;
                    onSelected?: ((...args: any[]) => any) | undefined;
                }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click:outside" | "update:modelValue" | "search" | "selected")[], string, {
                    label: string;
                    modelValue: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    items: {
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[];
                    itemText: string;
                    itemValue: string;
                    searchBy: string;
                    maxBadge: number;
                    placeholder: string;
                    delay: number;
                    id: string;
                    name: string;
                    inputProps: Record<string, any>;
                    selectAll: boolean;
                    loading: boolean;
                    error: boolean;
                    errorMessages: unknown[];
                    wrapperClass: string;
                    inputClass: string;
                    badgeColor: string;
                    badgeClass: string;
                    badgeProps: Record<string, any>;
                    dropdownClass: string;
                    itemClass: string;
                    checkWrapperClass: string;
                    checkIconClass: string;
                    noDataClass: string;
                    loadingClass: string;
                    labelClass: string;
                    rules: string;
                    errorClass: string;
                }> & {
                    beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                    created?: ((() => void) | (() => void)[]) | undefined;
                    beforeMount?: ((() => void) | (() => void)[]) | undefined;
                    mounted?: ((() => void) | (() => void)[]) | undefined;
                    beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                    updated?: ((() => void) | (() => void)[]) | undefined;
                    activated?: ((() => void) | (() => void)[]) | undefined;
                    deactivated?: ((() => void) | (() => void)[]) | undefined;
                    beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                    beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                    destroyed?: ((() => void) | (() => void)[]) | undefined;
                    unmounted?: ((() => void) | (() => void)[]) | undefined;
                    renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                };
                $forceUpdate: () => void;
                $nextTick: typeof import("vue").nextTick;
                $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
            } & Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: import("vue").PropType<{
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[]>;
                    default: () => never[];
                };
                items: {
                    type: import("vue").PropType<{
                        [x: string]: any;
                        text: string;
                        value: any;
                    }[]>;
                    default: () => never[];
                };
                itemText: {
                    type: StringConstructor;
                    default: string;
                };
                itemValue: {
                    type: StringConstructor;
                    default: string;
                };
                searchBy: {
                    type: StringConstructor;
                    default: string;
                };
                maxBadge: {
                    type: NumberConstructor;
                    default: number;
                };
                placeholder: {
                    type: StringConstructor;
                    default: string;
                };
                delay: {
                    type: NumberConstructor;
                    default: number;
                };
                id: {
                    type: StringConstructor;
                    default: string;
                };
                name: {
                    type: StringConstructor;
                    default: string;
                };
                inputProps: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => {};
                };
                selectAll: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                error: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                errorMessages: {
                    type: ArrayConstructor;
                    default: () => never[];
                };
                wrapperClass: {
                    type: StringConstructor;
                    default: string;
                };
                inputClass: {
                    type: StringConstructor;
                    default: string;
                };
                badgeColor: {
                    type: StringConstructor;
                    default: string;
                };
                badgeClass: {
                    type: StringConstructor;
                    default: string;
                };
                badgeProps: {
                    type: ObjectConstructor;
                    default: () => {};
                };
                dropdownClass: {
                    type: StringConstructor;
                    default: string;
                };
                itemClass: {
                    type: StringConstructor;
                    default: string;
                };
                checkWrapperClass: {
                    type: StringConstructor;
                    default: string;
                };
                checkIconClass: {
                    type: StringConstructor;
                    default: string;
                };
                noDataClass: {
                    type: StringConstructor;
                    default: string;
                };
                loadingClass: {
                    type: StringConstructor;
                    default: string;
                };
                label: {
                    type: StringConstructor;
                    default: string;
                };
                labelClass: {
                    type: StringConstructor;
                    default: string;
                };
                rules: {
                    type: StringConstructor;
                    default: string;
                };
                errorClass: {
                    type: StringConstructor;
                    default: string;
                };
            }>> & {
                "onClick:outside"?: ((...args: any[]) => any) | undefined;
                "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                onSearch?: ((...args: any[]) => any) | undefined;
                onSelected?: ((...args: any[]) => any) | undefined;
            } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
            __isFragment?: undefined;
            __isTeleport?: undefined;
            __isSuspense?: undefined;
        } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: import("vue").PropType<{
                    [x: string]: any;
                    text: string;
                    value: any;
                }[]>;
                default: () => never[];
            };
            items: {
                type: import("vue").PropType<{
                    [x: string]: any;
                    text: string;
                    value: any;
                }[]>;
                default: () => never[];
            };
            itemText: {
                type: StringConstructor;
                default: string;
            };
            itemValue: {
                type: StringConstructor;
                default: string;
            };
            searchBy: {
                type: StringConstructor;
                default: string;
            };
            maxBadge: {
                type: NumberConstructor;
                default: number;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            delay: {
                type: NumberConstructor;
                default: number;
            };
            id: {
                type: StringConstructor;
                default: string;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            inputProps: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => {};
            };
            selectAll: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            error: {
                type: BooleanConstructor;
                default: boolean;
            };
            errorMessages: {
                type: ArrayConstructor;
                default: () => never[];
            };
            wrapperClass: {
                type: StringConstructor;
                default: string;
            };
            inputClass: {
                type: StringConstructor;
                default: string;
            };
            badgeColor: {
                type: StringConstructor;
                default: string;
            };
            badgeClass: {
                type: StringConstructor;
                default: string;
            };
            badgeProps: {
                type: ObjectConstructor;
                default: () => {};
            };
            dropdownClass: {
                type: StringConstructor;
                default: string;
            };
            itemClass: {
                type: StringConstructor;
                default: string;
            };
            checkWrapperClass: {
                type: StringConstructor;
                default: string;
            };
            checkIconClass: {
                type: StringConstructor;
                default: string;
            };
            noDataClass: {
                type: StringConstructor;
                default: string;
            };
            loadingClass: {
                type: StringConstructor;
                default: string;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            labelClass: {
                type: StringConstructor;
                default: string;
            };
            rules: {
                type: StringConstructor;
                default: string;
            };
            errorClass: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            "onClick:outside"?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
            onSelected?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click:outside" | "update:modelValue" | "search" | "selected")[], "search" | "click:outside" | "update:modelValue" | "selected", {
            label: string;
            modelValue: {
                [x: string]: any;
                text: string;
                value: any;
            }[];
            items: {
                [x: string]: any;
                text: string;
                value: any;
            }[];
            itemText: string;
            itemValue: string;
            searchBy: string;
            maxBadge: number;
            placeholder: string;
            delay: number;
            id: string;
            name: string;
            inputProps: Record<string, any>;
            selectAll: boolean;
            loading: boolean;
            error: boolean;
            errorMessages: unknown[];
            wrapperClass: string;
            inputClass: string;
            badgeColor: string;
            badgeClass: string;
            badgeProps: Record<string, any>;
            dropdownClass: string;
            itemClass: string;
            checkWrapperClass: string;
            checkIconClass: string;
            noDataClass: string;
            loadingClass: string;
            labelClass: string;
            rules: string;
            errorClass: string;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
            $slots: {};
        });
    };
    setup(): {
        onSubmit: (e?: Event | undefined) => Promise<void | undefined>;
        resetForm: (state?: Partial<import("vee-validate").FormState<{
            genre: unknown;
        }>> | undefined) => void;
        values: {
            genre: unknown;
        };
        genres: import("vue").Ref<{
            text: string;
            value: string;
        }[]>;
    };
    template: string;
};
import VMultiSelect from "./VMultiSelect.vue";
declare const items: {
    value: number;
    text: string;
}[];
