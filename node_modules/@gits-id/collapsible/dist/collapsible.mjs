import { openBlock as c, createElementBlock as m, normalizeClass as f, renderSlot as h, defineComponent as C, toRefs as b, ref as V, watch as v, createElementVNode as $, unref as u, createTextVNode as w, toDisplayString as T, createBlock as _, createCommentVNode as B, createVNode as S, withCtx as y, Fragment as k, renderList as O, mergeProps as N } from "vue";
import { ChevronDownIcon as F } from "@heroicons/vue/outline";
const I = (e, l) => {
  const o = e.__vccOpts || e;
  for (const [n, r] of l)
    o[n] = r;
  return o;
}, W = {
  duration: {
    type: [Number, Object],
    default: 300
  },
  transition: {
    type: String,
    default: "ease-in-out"
  },
  show: Boolean,
  navbar: Boolean
}, E = {
  name: "VCollapse",
  props: W,
  emits: ["finish"],
  data() {
    return {
      collapsing: !1,
      heightWatcher: null,
      visible: this.show,
      el: null
    };
  },
  computed: {
    toggleTime() {
      return (this.visible ? this.duration.show : this.duration.hide) || this.duration;
    }
  },
  watch: {
    show(e) {
      this.visible = e;
    },
    visible(e) {
      this.toggleTime ? this.collapseController(e) : this.reset();
    }
  },
  mounted() {
    this.$el.style.display = this.visible ? "" : "none";
  },
  beforeUnmount() {
    clearTimeout(this.heightWatcher);
  },
  methods: {
    collapseController(e) {
      if (this.collapsing === !1)
        e ? this.toggle(!0) : this.toggle(!1), this.setFinishTimer(this.toggleTime);
      else {
        this.setTransition(), this.turn();
        const l = Number(this.collapsing.slice(0, -2)), o = this.$el.offsetHeight, n = (e ? l - o : o) / l;
        this.setFinishTimer(this.toggleTime * n);
      }
    },
    turn() {
      this.visible ? this.$el.style.height = this.collapsing : this.$el.style.height = 0;
    },
    toggle(e) {
      this.$el.style.display = "", this.collapsing = this.$el.scrollHeight + "px", this.$el.style.height = e ? 0 : this.$el.scrollHeight + "px", this.$el.style.overflow = "hidden", this.setTransition();
      const l = this;
      setTimeout(() => {
        l.$el.style.height = e ? this.collapsing : 0;
      }, 0);
    },
    setTransition() {
      this.$el.style.transition = `all ${this.toggleTime}ms ${this.transition}`;
    },
    setFinishTimer(e) {
      clearTimeout(this.heightWatcher), this.heightWatcher = setTimeout(() => this.reset(), e);
    },
    reset() {
      this.collapsing = !1, this.$el.style.display = this.visible ? "" : "none", this.$el.style.height = "", this.$el.style.overflow = "", this.$el.style.transition = "", this.$emit("finish", this.visible);
    }
  }
};
function H(e, l, o, n, r, p) {
  return c(), m("div", {
    class: f({ "navbar-collapse": e.navbar })
  }, [
    h(e.$slots, "default", { open: r.visible })
  ], 2);
}
const U = /* @__PURE__ */ I(E, [["render", H]]), j = /* @__PURE__ */ C({
  __name: "VCollapsible",
  props: {
    modelValue: {
      type: Boolean,
      default: !1
    },
    defaultOpen: {
      type: Boolean,
      default: !1
    },
    title: {
      type: String,
      default: ""
    },
    activeClass: {
      type: String,
      default: ""
    },
    wrapperClass: {
      type: String,
      default: "mb-5"
    },
    inactiveClass: {
      type: String,
      default: ""
    },
    activatorClass: {
      type: String,
      default: ""
    },
    panelClass: {
      type: String,
      default: "px-4 pb-4"
    },
    hideIcon: {
      type: Boolean,
      default: !1
    }
  },
  emits: ["update:modelValue", "change"],
  setup(e, { emit: l }) {
    const o = e, {
      modelValue: n,
      title: r,
      activeClass: p,
      inactiveClass: g,
      activatorClass: i,
      panelClass: d
    } = b(o), t = V(n.value), a = () => t.value = !t.value;
    return v(
      n,
      (s) => {
        t.value = s;
      },
      { immediate: !0 }
    ), v(t, (s) => {
      l("update:modelValue", s), l("change", s);
    }), (s, G) => (c(), m("div", null, [
      $("div", {
        class: f(["py-3 w-full flex justify-between items-center px-4 gap-x-4 transition duration-300 group cursor-pointer font-semibold", [u(i), t.value ? u(p) : u(g)]]),
        onClick: a
      }, [
        h(s.$slots, "header", { isOpen: t.value }, () => [
          w(T(u(r)), 1)
        ]),
        h(s.$slots, "icon", {}, () => [
          e.hideIcon ? B("", !0) : (c(), _(u(F), {
            key: 0,
            class: f(["w-5 h-5 transform transition duration-300", [t.value ? "rotate-180" : ""]])
          }, null, 8, ["class"]))
        ])
      ], 2),
      S(U, { show: t.value }, {
        default: y(() => [
          $("div", {
            class: f(u(d))
          }, [
            h(s.$slots, "default")
          ], 2)
        ]),
        _: 3
      }, 8, ["show"])
    ]));
  }
}), D = { ref: "root" }, L = /* @__PURE__ */ C({
  __name: "VCollapsibleGroup",
  props: {
    modelValue: { type: Boolean, default: !1 },
    accordion: { type: Boolean, default: !1 },
    items: { default: () => [] }
  },
  emits: [
    "update:modelValue",
    "update:items",
    "item:change",
    "onClickItems"
  ],
  setup(e, { emit: l }) {
    const o = e, { accordion: n, items: r } = b(o), p = V(r.value);
    v(
      r,
      (i) => {
        p.value = i;
      },
      { immediate: !0 }
    );
    const g = (i, d, t) => {
      l("item:change", { isOpen: i, item: d }), n.value && r.value.forEach((a, s) => {
        s === t ? a.isOpen = i : a.isOpen = !1;
      });
    };
    return (i, d) => (c(), m("div", D, [
      h(i.$slots, "default", {}, () => [
        h(i.$slots, "group:header"),
        (c(!0), m(k, null, O(p.value, (t, a) => (c(), _(j, N({
          key: a,
          modelValue: t.isOpen,
          "onUpdate:modelValue": (s) => t.isOpen = s
        }, t, {
          onChange: (s) => g(s, t, a)
        }), {
          header: y(() => [
            h(i.$slots, "item:header", {
              item: t,
              index: a
            })
          ]),
          default: y(() => [
            h(i.$slots, "items", {
              row: t,
              index: a
            }, () => [
              h(i.$slots, `item.${a}`, { item: t }, () => [
                w(T(t.content), 1)
              ])
            ])
          ]),
          _: 2
        }, 1040, ["modelValue", "onUpdate:modelValue", "onChange"]))), 128))
      ])
    ], 512));
  }
});
export {
  U as VCollapse,
  j as VCollapsible,
  L as VCollapsibleGroup,
  j as default
};
