import { RouteLocation } from 'vue-router';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            hidePrepend: boolean;
            hideAppend: boolean;
            defaultClass: string;
            prependClass: string;
            appendClass: string;
            hoverClass: string;
            shaped: boolean;
            shapedClass: string;
            rounded: boolean;
            appendTextClass: string;
            tile: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
            to?: string | RouteLocation | undefined;
            href?: string | undefined;
            as?: string | any;
            defaultClass?: string | undefined;
            prependClass?: string | undefined;
            prependIcon?: string | undefined;
            prependIconClass?: string | undefined;
            appendClass?: string | undefined;
            appendIcon?: string | undefined;
            appendIconClass?: string | undefined;
            hidePrepend?: boolean | undefined;
            hideAppend?: boolean | undefined;
            hover?: boolean | undefined;
            hoverClass?: string | undefined;
            shaped?: boolean | undefined;
            shapedClass?: string | undefined;
            rounded?: boolean | undefined;
            hideText?: boolean | undefined;
            appendText?: string | undefined;
            appendTextClass?: string | undefined;
            tile?: boolean | undefined;
        }>, {
            defaultClass: string;
            prependClass: string;
            appendClass: string;
            hidePrepend: boolean;
            hideAppend: boolean;
            hoverClass: string;
            shaped: boolean;
            shapedClass: string;
            rounded: boolean;
            appendTextClass: string;
            tile: boolean;
        }>>> & {
            "onClick:prepend"?: (() => any) | undefined;
            "onClick:prependIcon"?: (() => any) | undefined;
            "onClick:append"?: (() => any) | undefined;
            "onClick:appendIcon"?: (() => any) | undefined;
            "onClick:appendText"?: (() => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "hidePrepend" | "hideAppend" | "defaultClass" | "prependClass" | "appendClass" | "hoverClass" | "shaped" | "shapedClass" | "rounded" | "appendTextClass" | "tile">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "click:prepend") => void) & ((event: "click:prependIcon") => void) & ((event: "click:append") => void) & ((event: "click:appendIcon") => void) & ((event: "click:appendText") => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
            to?: string | RouteLocation | undefined;
            href?: string | undefined;
            as?: string | any;
            defaultClass?: string | undefined;
            prependClass?: string | undefined;
            prependIcon?: string | undefined;
            prependIconClass?: string | undefined;
            appendClass?: string | undefined;
            appendIcon?: string | undefined;
            appendIconClass?: string | undefined;
            hidePrepend?: boolean | undefined;
            hideAppend?: boolean | undefined;
            hover?: boolean | undefined;
            hoverClass?: string | undefined;
            shaped?: boolean | undefined;
            shapedClass?: string | undefined;
            rounded?: boolean | undefined;
            hideText?: boolean | undefined;
            appendText?: string | undefined;
            appendTextClass?: string | undefined;
            tile?: boolean | undefined;
        }>, {
            defaultClass: string;
            prependClass: string;
            appendClass: string;
            hidePrepend: boolean;
            hideAppend: boolean;
            hoverClass: string;
            shaped: boolean;
            shapedClass: string;
            rounded: boolean;
            appendTextClass: string;
            tile: boolean;
        }>>> & {
            "onClick:prepend"?: (() => any) | undefined;
            "onClick:prependIcon"?: (() => any) | undefined;
            "onClick:append"?: (() => any) | undefined;
            "onClick:appendIcon"?: (() => any) | undefined;
            "onClick:appendText"?: (() => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            "click:prepend": () => void;
        } & {
            "click:prependIcon": () => void;
        } & {
            "click:append": () => void;
        } & {
            "click:appendIcon": () => void;
        } & {
            "click:appendText": () => void;
        }, string, {
            hidePrepend: boolean;
            hideAppend: boolean;
            defaultClass: string;
            prependClass: string;
            appendClass: string;
            hoverClass: string;
            shaped: boolean;
            shapedClass: string;
            rounded: boolean;
            appendTextClass: string;
            tile: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
        to?: string | RouteLocation | undefined;
        href?: string | undefined;
        as?: string | any;
        defaultClass?: string | undefined;
        prependClass?: string | undefined;
        prependIcon?: string | undefined;
        prependIconClass?: string | undefined;
        appendClass?: string | undefined;
        appendIcon?: string | undefined;
        appendIconClass?: string | undefined;
        hidePrepend?: boolean | undefined;
        hideAppend?: boolean | undefined;
        hover?: boolean | undefined;
        hoverClass?: string | undefined;
        shaped?: boolean | undefined;
        shapedClass?: string | undefined;
        rounded?: boolean | undefined;
        hideText?: boolean | undefined;
        appendText?: string | undefined;
        appendTextClass?: string | undefined;
        tile?: boolean | undefined;
    }>, {
        defaultClass: string;
        prependClass: string;
        appendClass: string;
        hidePrepend: boolean;
        hideAppend: boolean;
        hoverClass: string;
        shaped: boolean;
        shapedClass: string;
        rounded: boolean;
        appendTextClass: string;
        tile: boolean;
    }>>> & {
        "onClick:prepend"?: (() => any) | undefined;
        "onClick:prependIcon"?: (() => any) | undefined;
        "onClick:append"?: (() => any) | undefined;
        "onClick:appendIcon"?: (() => any) | undefined;
        "onClick:appendText"?: (() => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    to?: string | RouteLocation | undefined;
    href?: string | undefined;
    as?: string | any;
    defaultClass?: string | undefined;
    prependClass?: string | undefined;
    prependIcon?: string | undefined;
    prependIconClass?: string | undefined;
    appendClass?: string | undefined;
    appendIcon?: string | undefined;
    appendIconClass?: string | undefined;
    hidePrepend?: boolean | undefined;
    hideAppend?: boolean | undefined;
    hover?: boolean | undefined;
    hoverClass?: string | undefined;
    shaped?: boolean | undefined;
    shapedClass?: string | undefined;
    rounded?: boolean | undefined;
    hideText?: boolean | undefined;
    appendText?: string | undefined;
    appendTextClass?: string | undefined;
    tile?: boolean | undefined;
}>, {
    defaultClass: string;
    prependClass: string;
    appendClass: string;
    hidePrepend: boolean;
    hideAppend: boolean;
    hoverClass: string;
    shaped: boolean;
    shapedClass: string;
    rounded: boolean;
    appendTextClass: string;
    tile: boolean;
}>>> & {
    "onClick:prepend"?: (() => any) | undefined;
    "onClick:prependIcon"?: (() => any) | undefined;
    "onClick:append"?: (() => any) | undefined;
    "onClick:appendIcon"?: (() => any) | undefined;
    "onClick:appendText"?: (() => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "click:prepend": () => void;
} & {
    "click:prependIcon": () => void;
} & {
    "click:append": () => void;
} & {
    "click:appendIcon": () => void;
} & {
    "click:appendText": () => void;
}, string, {
    hidePrepend: boolean;
    hideAppend: boolean;
    defaultClass: string;
    prependClass: string;
    appendClass: string;
    hoverClass: string;
    shaped: boolean;
    shapedClass: string;
    rounded: boolean;
    appendTextClass: string;
    tile: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        prepend: (_: {}) => any;
        'prepend.icon': (_: {}) => any;
        default: (_: {}) => any;
        append: (_: {}) => any;
        'append.text': (_: {}) => any;
        'append.icon': (_: {}) => any;
    };
});
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
