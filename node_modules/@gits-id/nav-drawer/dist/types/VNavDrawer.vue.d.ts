import { PropType } from 'vue';
import { type Menu } from '@gits-id/menu';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            small: boolean;
            dark: boolean;
            modelValue: boolean;
            menus: Menu[];
            mini: boolean;
            logoProps: Record<string, any>;
            color: string;
            hideToggle: boolean;
            btnToggleClass: string;
            classMenuParent: string;
            toggleColor: string;
            expandColor: string;
            expandHover: boolean;
            isExpandHover: boolean;
            drawerClass: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: BooleanConstructor;
                default: boolean;
            };
            small: {
                type: BooleanConstructor;
                default: boolean;
            };
            menus: {
                type: PropType<Menu[]>;
                default: () => never[];
            };
            mini: {
                type: BooleanConstructor;
                default: boolean;
            };
            logoProps: {
                type: ObjectConstructor;
                default: () => {
                    imgClass: string;
                };
            };
            dark: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            hideToggle: {
                type: BooleanConstructor;
                default: boolean;
            };
            btnToggleClass: {
                type: StringConstructor;
                default: string;
            };
            classMenuParent: {
                type: StringConstructor;
                default: string;
            };
            toggleColor: {
                type: StringConstructor;
                default: string;
            };
            expandColor: {
                type: StringConstructor;
                default: string;
            };
            expandHover: {
                type: BooleanConstructor;
                default: boolean;
            };
            isExpandHover: {
                type: BooleanConstructor;
                default: boolean;
            };
            drawerClass: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onUpdate:mini"?: ((...args: any[]) => any) | undefined;
            "onToggle:click"?: ((...args: any[]) => any) | undefined;
            "onUpdate:expandHover"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "small" | "dark" | "modelValue" | "menus" | "mini" | "logoProps" | "color" | "hideToggle" | "btnToggleClass" | "classMenuParent" | "toggleColor" | "expandColor" | "expandHover" | "isExpandHover" | "drawerClass">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "update:modelValue" | "update:mini" | "toggle:click" | "update:expandHover", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: BooleanConstructor;
                default: boolean;
            };
            small: {
                type: BooleanConstructor;
                default: boolean;
            };
            menus: {
                type: PropType<Menu[]>;
                default: () => never[];
            };
            mini: {
                type: BooleanConstructor;
                default: boolean;
            };
            logoProps: {
                type: ObjectConstructor;
                default: () => {
                    imgClass: string;
                };
            };
            dark: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            hideToggle: {
                type: BooleanConstructor;
                default: boolean;
            };
            btnToggleClass: {
                type: StringConstructor;
                default: string;
            };
            classMenuParent: {
                type: StringConstructor;
                default: string;
            };
            toggleColor: {
                type: StringConstructor;
                default: string;
            };
            expandColor: {
                type: StringConstructor;
                default: string;
            };
            expandHover: {
                type: BooleanConstructor;
                default: boolean;
            };
            isExpandHover: {
                type: BooleanConstructor;
                default: boolean;
            };
            drawerClass: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onUpdate:mini"?: ((...args: any[]) => any) | undefined;
            "onToggle:click"?: ((...args: any[]) => any) | undefined;
            "onUpdate:expandHover"?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:mini" | "toggle:click" | "update:expandHover")[], string, {
            small: boolean;
            dark: boolean;
            modelValue: boolean;
            menus: Menu[];
            mini: boolean;
            logoProps: Record<string, any>;
            color: string;
            hideToggle: boolean;
            btnToggleClass: string;
            classMenuParent: string;
            toggleColor: string;
            expandColor: string;
            expandHover: boolean;
            isExpandHover: boolean;
            drawerClass: string;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        small: {
            type: BooleanConstructor;
            default: boolean;
        };
        menus: {
            type: PropType<Menu[]>;
            default: () => never[];
        };
        mini: {
            type: BooleanConstructor;
            default: boolean;
        };
        logoProps: {
            type: ObjectConstructor;
            default: () => {
                imgClass: string;
            };
        };
        dark: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        hideToggle: {
            type: BooleanConstructor;
            default: boolean;
        };
        btnToggleClass: {
            type: StringConstructor;
            default: string;
        };
        classMenuParent: {
            type: StringConstructor;
            default: string;
        };
        toggleColor: {
            type: StringConstructor;
            default: string;
        };
        expandColor: {
            type: StringConstructor;
            default: string;
        };
        expandHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        isExpandHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        drawerClass: {
            type: StringConstructor;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onUpdate:mini"?: ((...args: any[]) => any) | undefined;
        "onToggle:click"?: ((...args: any[]) => any) | undefined;
        "onUpdate:expandHover"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    small: {
        type: BooleanConstructor;
        default: boolean;
    };
    menus: {
        type: PropType<Menu[]>;
        default: () => never[];
    };
    mini: {
        type: BooleanConstructor;
        default: boolean;
    };
    logoProps: {
        type: ObjectConstructor;
        default: () => {
            imgClass: string;
        };
    };
    dark: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    hideToggle: {
        type: BooleanConstructor;
        default: boolean;
    };
    btnToggleClass: {
        type: StringConstructor;
        default: string;
    };
    classMenuParent: {
        type: StringConstructor;
        default: string;
    };
    toggleColor: {
        type: StringConstructor;
        default: string;
    };
    expandColor: {
        type: StringConstructor;
        default: string;
    };
    expandHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    isExpandHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    drawerClass: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mini"?: ((...args: any[]) => any) | undefined;
    "onToggle:click"?: ((...args: any[]) => any) | undefined;
    "onUpdate:expandHover"?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:mini" | "toggle:click" | "update:expandHover")[], "update:modelValue" | "update:mini" | "toggle:click" | "update:expandHover", {
    small: boolean;
    dark: boolean;
    modelValue: boolean;
    menus: Menu[];
    mini: boolean;
    logoProps: Record<string, any>;
    color: string;
    hideToggle: boolean;
    btnToggleClass: string;
    classMenuParent: string;
    toggleColor: string;
    expandColor: string;
    expandHover: boolean;
    isExpandHover: boolean;
    drawerClass: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: typeof import('./VNavDrawer.vue.__VLS_template').default;
});
export default _default;
