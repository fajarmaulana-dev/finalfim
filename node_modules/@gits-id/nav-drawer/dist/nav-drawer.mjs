import { defineComponent as S, computed as s, openBlock as g, createElementBlock as x, normalizeClass as T, unref as r, createElementVNode as d, toRefs as O, createBlock as D, resolveDynamicComponent as A, mergeProps as B, withCtx as C, renderSlot as l, createVNode as i, toDisplayString as I, createCommentVNode as $, ref as P, watch as M, Fragment as j, Transition as F, renderList as X } from "vue";
import { XIcon as q } from "@heroicons/vue/outline";
import G from "@gits-id/menu";
import L from "@gits-id/logo";
import { ChevronLeftIcon as J } from "@heroicons/vue/solid";
import { getBgColor as K } from "@gits-id/utils";
const Q = /* @__PURE__ */ d("circle", {
  class: "opacity-25",
  cx: "12",
  cy: "12",
  r: "10",
  stroke: "currentColor",
  "stroke-width": "4"
}, null, -1), U = /* @__PURE__ */ d("path", {
  class: "opacity-75",
  fill: "currentColor",
  d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
}, null, -1), W = [
  Q,
  U
], Y = /* @__PURE__ */ S({
  __name: "VSpinner",
  props: {
    xLarge: {
      type: Boolean,
      default: !1
    },
    large: {
      type: Boolean,
      default: !1
    },
    small: {
      type: Boolean,
      default: !1
    },
    xSmall: {
      type: Boolean,
      default: !1
    },
    color: {
      type: String,
      default: ""
    }
  },
  setup(a) {
    const e = a, v = s(() => e.large ? "h-8 w-8" : e.small ? "h-4 w-4" : e.xLarge ? "h-10 w-10" : e.xSmall ? "h-3 w-3" : "h-5 w-5"), c = s(() => {
      switch (e.color) {
        case "primary":
          return "text-primary-600";
        case "info":
          return "text-info-600";
        case "warning":
          return "text-warning-600";
        case "error":
          return "text-error-600";
        case "success":
          return "text-success-600";
        case "white":
          return "text-white-600";
        default:
          return e.color || "text-gray-600";
      }
    });
    return (y, f) => (g(), x("svg", {
      class: T(["animate-spin inline", [r(v), r(c)]]),
      xmlns: "http://www.w3.org/2000/svg",
      fill: "none",
      viewBox: "0 0 24 24"
    }, W, 2));
  }
}), Z = {
  key: 0,
  class: "ml-2"
}, N = /* @__PURE__ */ S({
  __name: "VBtn",
  props: {
    size: {
      type: String,
      default: "md",
      validator: (a) => ["xs", "sm", "md", "lg", "xl"].includes(a)
    },
    color: {
      type: String,
      default: "default"
    },
    to: {
      type: [String, Object],
      default: ""
    },
    href: {
      type: String,
      default: ""
    },
    text: {
      type: Boolean,
      default: !1
    },
    outlined: {
      type: Boolean,
      default: !1
    },
    rounded: {
      type: Boolean,
      default: !1
    },
    disabled: {
      type: Boolean,
      default: !1
    },
    ring: {
      type: Boolean,
      default: !0
    },
    tile: {
      type: Boolean,
      default: !1
    },
    icon: {
      type: Boolean,
      default: !1
    },
    block: {
      type: Boolean,
      default: !1
    },
    type: {
      type: String,
      default: "button"
    },
    solid: {
      type: Boolean,
      default: !1
    },
    noRing: {
      type: Boolean,
      default: !1
    },
    loading: {
      type: Boolean,
      default: !1
    },
    loadingText: {
      type: String,
      default: ""
    },
    newTab: {
      type: Boolean,
      default: !1
    },
    shadow: {
      type: Boolean,
      default: !1
    }
  },
  setup(a) {
    const e = a, { disabled: v, loading: c, loadingText: y } = O(e), f = s(() => e.to ? "router-link" : e.href ? "a" : "button"), u = s(() => {
      const t = {};
      return e.to ? t.to = e.to : e.href ? t.href = e.href : t.type = e.type, t;
    }), m = s(() => {
      switch (e.color) {
        case "primary":
        case "info":
        case "warning":
        case "error":
        case "success":
          return "white";
        case "white":
          return "black";
        default:
          return e.color;
      }
    }), _ = {
      default: "border-gray-400 text-gray-700 bg-white hover:border-gray-500 active:bg-gray-50 active:border-gray-600 active:text-gray-600",
      primary: "border-primary-500 bg-primary-500 text-white hover:bg-primary-600 hover:border-primary-600 active:bg-primary-400 active:border-primary-400",
      secondary: "border-secondary-500 bg-secondary-500 text-white hover:bg-secondary-600 hover:border-secondary-600 active:bg-secondary-400 active:border-secondary-400",
      info: "border-info-500 bg-info-500 text-white hover:bg-info-600 hover:border-info-600 active:bg-info-400 active:border-info-400",
      warning: "border-warning-500 bg-warning-500 text-white hover:bg-warning-600 hover:border-warning-600 active:bg-warning-400 active:border-warning-400",
      success: "border-success-500 bg-success-500 text-white hover:bg-success-600 hover:border-success-600 active:bg-success-400 active:border-success-400",
      error: "border-error-500 bg-error-500 text-white hover:bg-error-600 hover:border-error-600 active:bg-error-400 active:border-error-400",
      dark: "border-gray-800 bg-gray-800 text-white hover:bg-gray-900 hover:border-gray-900 active:bg-gray-700 active:border-gray-700"
    }, V = {
      default: "border-gray-400 text-gray-700 hover:bg-gray-700 hover:border-gray-700 hover:text-white active:bg-gray-50 active:border-gray-600 active:text-gray-600",
      primary: "border-primary-500 bg-transparent text-primary-500 hover:bg-primary-600 hover:border-primary-600 hover:text-white active:bg-primary-400 active:border-primary-400",
      secondary: "border-secondary-500 bg-transparent text-secondary-500 hover:bg-secondary-600 hover:border-secondary-600 hover:text-white active:bg-secondary-400 active:border-secondary-400",
      info: "border-info-500 bg-transparent text-info-500 hover:bg-info-600 hover:border-info-600 hover:text-white active:bg-info-400 active:border-info-400",
      warning: "border-warning-500 bg-transparent text-warning-500 hover:bg-warning-600 hover:border-warning-600 hover:text-white active:bg-warning-400 active:border-warning-400",
      success: "border-success-500 bg-transparent text-success-500 hover:bg-success-600 hover:border-success-600 hover:text-white active:bg-success-400 active:border-success-400",
      error: "border-error-500 bg-transparent text-error-500 hover:bg-error-600 hover:border-error-600 hover:text-white active:bg-error-400 active:border-error-400",
      dark: "border-gray-800 bg-transparent text-gray-800 hover:bg-gray-900 hover:border-gray-900 hover:text-white active:bg-gray-700 active:border-gray-700"
    }, h = {
      default: "border-transparent bg-transparent text-gray-700 hover:text-gray-900 active:text-gray-600",
      primary: "border-transparent bg-transparent text-primary-500 hover:text-primary-600 active:text-primary-400",
      secondary: "border-transparent bg-transparent text-secondary-500 hover:text-secondary-600 active:text-secondary-400",
      info: "border-transparent bg-transparent text-info-500 hover:text-info-600 active:text-info-400",
      warning: "border-transparent bg-transparent text-warning-500 hover:text-warning-600 active:text-warning-400",
      success: "border-transparent bg-transparent text-success-500 hover:text-success-600 active:text-success-400",
      error: "border-transparent bg-transparent text-error-500 hover:text-error-600 active:text-error-400",
      dark: "border-transparent bg-transparent text-gray-800 hover:text-gray-900 active:text-gray-600"
    }, w = {
      xs: "px-2 py-1 text-xs",
      sm: "px-3 py-1.5 text-sm",
      md: "px-4 py-2 text-base",
      lg: "px-5 py-3 text-lg",
      xl: "px-6 py-4 text-xl"
    }, k = {
      default: "",
      primary: "focus:ring-primary-300",
      secondary: "focus:ring-secondary-300",
      info: "focus:ring-info-300",
      warning: "focus:ring-warning-300",
      success: "focus:ring-success-300",
      error: "focus:ring-error-300",
      dark: "focus:ring-gray-300"
    }, H = s(() => {
      let t = _[e.color];
      return e.outlined ? t = V[e.color] : e.text && (t = h[e.color]), t;
    }), n = s(() => {
      let t = "disabled:cursor-not-allowed disabled:shadow-none disabled:text-gray-400";
      e.outlined ? t += " disabled:border-gray-300 disabled:hover:bg-transparent disabled:hover:text-gray-400" : t += " disabled:bg-gray-300 disabled:border-gray-300";
      const p = {
        default: "disabled:hover:bg-transparent disabled:active:bg-transparent",
        primary: "disabled:hover:bg-primary-500 disabled:hover:border-primary-500 disabled:active:bg-primary-500",
        secondary: "disabled:hover:bg-secondary-500 disabled:hover:border-secondary-500 disabled:active:bg-secondary-500",
        info: "disabled:hover:bg-info-500 disabled:hover:border-info-500 disabled:active:bg-info-500",
        warning: "disabled:hover:bg-warning-500 disabled:hover:border-warning-500 disabled:active:bg-warning-500",
        error: "disabled:hover:bg-error-500 disabled:hover:border-error-500 disabled:active:bg-error-500",
        success: "disabled:hover:bg-success-500 disabled:hover:border-success-500 disabled:active:bg-success-500",
        dark: "disabled:hover:bg-gray-800 disabled:hover:border-gray-800 disabled:active:bg-gray-800"
      };
      return e.loading ? [
        "disabled:cursor-not-allowed disabled:shadow-none",
        p[e.color]
      ] : t;
    }), b = s(() => {
      const t = {
        xs: "w-[26px] h-[26px]",
        sm: "w-[34px] h-[34px]",
        md: "w-[42px] h-[42px]",
        lg: "w-[54px] h-[54px]",
        xl: "w-[62px] h-[62px]"
      }, p = {
        xs: "px-1",
        sm: "px-1.5",
        md: "px-2",
        lg: "px-2.5",
        xl: "px-3"
      };
      return [
        t[e.size],
        e.text ? "p-0" : p[e.size]
      ].join(" ");
    }), z = s(() => [
      "inline-flex justify-center items-center border rounded-md font-medium transition duration-300",
      n.value,
      H.value,
      {
        "focus:ring focus:ring-offset-2 focus:outline-none": !e.noRing,
        [k[e.color]]: !e.noRing,
        "rounded-full": e.rounded,
        "rounded-none": e.tile,
        shadow: e.shadow,
        "w-full": e.block,
        "btn-loading": e.loading,
        [w[e.size]]: !e.icon,
        [b.value]: e.icon
      }
    ]);
    return (t, p) => (g(), D(A(r(f)), B({
      class: r(z),
      rel: a.newTab ? "noopener" : "",
      target: a.newTab ? "_blank" : "",
      disabled: r(v) || r(c)
    }, { ...r(u), ...t.$attrs }), {
      default: C(() => [
        r(c) ? l(t.$slots, "loading", { key: 0 }, () => [
          i(r(Y), { color: r(m) }, null, 8, ["color"]),
          r(y) ? (g(), x("span", Z, I(r(y)), 1)) : $("", !0)
        ]) : l(t.$slots, "default", { key: 1 })
      ]),
      _: 3
    }, 16, ["class", "rel", "target", "disabled"]));
  }
}), ee = /* @__PURE__ */ d("div", { class: "absolute inset-0 bg-gray-900 opacity-75" }, null, -1), re = [
  ee
], te = { class: "hidden sm:block" }, ae = { class: "flex sm:hidden justify-between items-center" }, oe = { class: "mt-5 flex-grow overflow-auto space-y-1" }, ne = { class: "append flex flex-col justify-center" }, se = S({
  inheritAttrs: !1
}), pe = /* @__PURE__ */ S({
  ...se,
  __name: "VNavDrawer",
  props: {
    modelValue: {
      type: Boolean,
      default: !1
    },
    small: {
      type: Boolean,
      default: !1
    },
    menus: {
      type: Array,
      default: () => []
    },
    mini: {
      type: Boolean,
      default: !1
    },
    logoProps: {
      type: Object,
      default: () => ({
        imgClass: "h-10"
      })
    },
    dark: {
      type: Boolean,
      default: !1
    },
    color: {
      type: String,
      default: ""
    },
    hideToggle: {
      type: Boolean,
      default: !1
    },
    btnToggleClass: {
      type: String,
      default: ""
    },
    classMenuParent: {
      type: String,
      default: ""
    },
    toggleColor: {
      type: String,
      default: "primary"
    },
    expandColor: {
      type: String,
      default: ""
    },
    expandHover: {
      type: Boolean,
      default: !1
    },
    isExpandHover: {
      type: Boolean,
      default: !1
    },
    drawerClass: {
      type: String,
      default: ""
    }
  },
  emits: [
    "update:modelValue",
    "update:mini",
    "toggle:click",
    "update:expandHover"
  ],
  setup(a, { emit: e }) {
    const v = a, {
      mini: c,
      menus: y,
      logoProps: f,
      dark: u,
      color: m,
      hideToggle: _,
      classMenuParent: V,
      expandHover: h,
      isExpandHover: w,
      modelValue: k
    } = O(v), H = P(k.value);
    M(k, (o) => {
      H.value = o;
    }, { immediate: !0 });
    const n = P(c.value);
    M(c, (o) => {
      n.value = o;
    }, { immediate: !0 }), M(n, (o) => {
      e("update:mini", o);
    });
    const b = () => {
      n.value = !n.value, e("toggle:click");
    }, z = () => {
      w.value && e("update:expandHover", !0);
    }, t = () => {
      w.value && e("update:expandHover", !1);
    }, p = s(
      () => K(m.value, u.value ? "bg-gray-900" : "bg-white")
    );
    return (o, ie) => (g(), x(j, null, [
      i(F, {
        "enter-active-class": "ease-out duration-300",
        "enter-from-class": "opacity-0",
        "enter-to-class": "opacity-100",
        "leave-active-class": "ease-in duration-200",
        "leave-from-class": "opacity-100",
        "leave-to-class": "opacity-0"
      }, {
        default: C(() => [
          n.value ? (g(), x("div", {
            key: 0,
            class: "fixed sm:hidden inset-0 z-20 transition-opacity",
            "aria-hidden": "true",
            onClick: b
          }, re)) : $("", !0)
        ]),
        _: 1
      }),
      d("div", B({
        onMouseover: z,
        onMouseleave: t,
        class: ["fixed top-0 left-0 z-20 h-screen min-h-screen shadow-md py-2 px-2 transition-all duration-300 flex flex-col", [
          r(p),
          n.value ? "w-10/12 sm:w-[85px]" : "transform -translate-x-full sm:transform-none sm:w-[260px]",
          r(h) ? "hover:sm:w-[260px]" : ""
        ]]
      }, o.$attrs), [
        d("div", te, [
          r(_) ? $("", !0) : l(o.$slots, "toggle", {
            key: 0,
            on: { click: b }
          }, () => [
            i(r(N), {
              size: "sm",
              icon: "",
              rounded: "",
              "no-ring": "",
              class: T(["absolute -right-4", a.btnToggleClass]),
              color: a.toggleColor,
              onClick: b
            }, {
              default: C(() => [
                i(r(J), {
                  class: T(["w-5 h-5", [n.value ? "rotate-180" : ""]])
                }, null, 8, ["class"])
              ]),
              _: 1
            }, 8, ["class", "color"])
          ]),
          n.value && !r(h) ? l(o.$slots, "logo.mini", { key: 1 }) : l(o.$slots, "logo", { key: 2 }, () => [
            i(r(L), B({ white: r(u) }, r(f)), null, 16, ["white"])
          ])
        ]),
        d("div", ae, [
          l(o.$slots, "logo", {}, () => [
            i(r(L), B({ white: r(u) }, r(f)), null, 16, ["white"])
          ]),
          i(r(N), {
            text: "",
            icon: "",
            "no-ring": "",
            onClick: b
          }, {
            default: C(() => [
              i(r(q), { class: "w-5 h-5" })
            ]),
            _: 1
          })
        ]),
        d("div", oe, [
          l(o.$slots, "menus", {}, () => [
            (g(!0), x(j, null, X(r(y), (E, R) => (g(), D(r(G), {
              classMenuParent: r(V),
              key: R,
              menu: E,
              mini: n.value,
              expandHover: r(h),
              dark: r(u),
              "bg-color": a.expandColor,
              color: r(m),
              small: a.small
            }, null, 8, ["classMenuParent", "menu", "mini", "expandHover", "dark", "bg-color", "color", "small"]))), 128))
          ])
        ]),
        d("div", ne, [
          l(o.$slots, "append")
        ])
      ], 16)
    ], 64));
  }
});
export {
  pe as VNavDrawer,
  pe as default
};
