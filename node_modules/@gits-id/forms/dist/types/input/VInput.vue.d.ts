declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            readonly: boolean;
            label: string;
            text: boolean;
            error: boolean;
            value: string | number;
            modelValue: string | number;
            inputClass: string;
            color: string;
            size: string;
            name: string;
            id: string;
            rules: string | Record<string, any>;
            wrapperClass: string;
            disabled: boolean;
            type: string;
            shadow: boolean;
            placeholder: string;
            errorMessages: unknown[];
            classes: Record<string, any>;
            prependIcon: string;
            appendIcon: string;
            prependClass: string;
            prependIconClass: string;
            appendClass: string;
            appendIconClass: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            value: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            error: {
                type: BooleanConstructor;
                default: boolean;
            };
            errorMessages: {
                type: ArrayConstructor;
                default: () => never[];
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: StringConstructor;
                default: string;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            prependIcon: {
                type: StringConstructor;
                default: string;
            };
            appendIcon: {
                type: StringConstructor;
                default: string;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            text: {
                type: BooleanConstructor;
                default: boolean;
            };
            shadow: {
                type: BooleanConstructor;
                default: boolean;
            };
            classes: {
                type: ObjectConstructor;
                default: () => {
                    wrapper: string;
                    input: string;
                    prepend: string;
                    append: string;
                };
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            rules: {
                type: (StringConstructor | ObjectConstructor)[];
                default: null;
            };
            id: {
                type: StringConstructor;
                default: string;
            };
            inputClass: {
                type: StringConstructor;
                default: string;
            };
            wrapperClass: {
                type: StringConstructor;
                default: string;
            };
            prependClass: {
                type: StringConstructor;
                default: string;
            };
            prependIconClass: {
                type: StringConstructor;
                default: string;
            };
            appendClass: {
                type: StringConstructor;
                default: string;
            };
            appendIconClass: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            onBlur?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
            "onInput:modelValue"?: ((...args: any[]) => any) | undefined;
            onClickPrepend?: ((...args: any[]) => any) | undefined;
            onClickPrependIcon?: ((...args: any[]) => any) | undefined;
            onClickAppend?: ((...args: any[]) => any) | undefined;
            onClickAppendIcon?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "readonly" | "label" | "text" | "error" | "value" | "modelValue" | "inputClass" | "color" | "size" | "name" | "id" | "rules" | "wrapperClass" | "disabled" | "type" | "shadow" | "placeholder" | "errorMessages" | "classes" | "prependIcon" | "appendIcon" | "prependClass" | "prependIconClass" | "appendClass" | "appendIconClass">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "blur" | "change" | "input:modelValue" | "clickPrepend" | "clickPrependIcon" | "clickAppend" | "clickAppendIcon", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            value: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            error: {
                type: BooleanConstructor;
                default: boolean;
            };
            errorMessages: {
                type: ArrayConstructor;
                default: () => never[];
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: StringConstructor;
                default: string;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            prependIcon: {
                type: StringConstructor;
                default: string;
            };
            appendIcon: {
                type: StringConstructor;
                default: string;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            text: {
                type: BooleanConstructor;
                default: boolean;
            };
            shadow: {
                type: BooleanConstructor;
                default: boolean;
            };
            classes: {
                type: ObjectConstructor;
                default: () => {
                    wrapper: string;
                    input: string;
                    prepend: string;
                    append: string;
                };
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            rules: {
                type: (StringConstructor | ObjectConstructor)[];
                default: null;
            };
            id: {
                type: StringConstructor;
                default: string;
            };
            inputClass: {
                type: StringConstructor;
                default: string;
            };
            wrapperClass: {
                type: StringConstructor;
                default: string;
            };
            prependClass: {
                type: StringConstructor;
                default: string;
            };
            prependIconClass: {
                type: StringConstructor;
                default: string;
            };
            appendClass: {
                type: StringConstructor;
                default: string;
            };
            appendIconClass: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            onBlur?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
            "onInput:modelValue"?: ((...args: any[]) => any) | undefined;
            onClickPrepend?: ((...args: any[]) => any) | undefined;
            onClickPrependIcon?: ((...args: any[]) => any) | undefined;
            onClickAppend?: ((...args: any[]) => any) | undefined;
            onClickAppendIcon?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "input:modelValue" | "clickPrepend" | "clickPrependIcon" | "clickAppend" | "clickAppendIcon")[], string, {
            readonly: boolean;
            label: string;
            text: boolean;
            error: boolean;
            value: string | number;
            modelValue: string | number;
            inputClass: string;
            color: string;
            size: string;
            name: string;
            id: string;
            rules: string | Record<string, any>;
            wrapperClass: string;
            disabled: boolean;
            type: string;
            shadow: boolean;
            placeholder: string;
            errorMessages: unknown[];
            classes: Record<string, any>;
            prependIcon: string;
            appendIcon: string;
            prependClass: string;
            prependIconClass: string;
            appendClass: string;
            appendIconClass: string;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        value: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        error: {
            type: BooleanConstructor;
            default: boolean;
        };
        errorMessages: {
            type: ArrayConstructor;
            default: () => never[];
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        prependIcon: {
            type: StringConstructor;
            default: string;
        };
        appendIcon: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        text: {
            type: BooleanConstructor;
            default: boolean;
        };
        shadow: {
            type: BooleanConstructor;
            default: boolean;
        };
        classes: {
            type: ObjectConstructor;
            default: () => {
                wrapper: string;
                input: string;
                prepend: string;
                append: string;
            };
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        rules: {
            type: (StringConstructor | ObjectConstructor)[];
            default: null;
        };
        id: {
            type: StringConstructor;
            default: string;
        };
        inputClass: {
            type: StringConstructor;
            default: string;
        };
        wrapperClass: {
            type: StringConstructor;
            default: string;
        };
        prependClass: {
            type: StringConstructor;
            default: string;
        };
        prependIconClass: {
            type: StringConstructor;
            default: string;
        };
        appendClass: {
            type: StringConstructor;
            default: string;
        };
        appendIconClass: {
            type: StringConstructor;
            default: string;
        };
    }>> & {
        onBlur?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
        "onInput:modelValue"?: ((...args: any[]) => any) | undefined;
        onClickPrepend?: ((...args: any[]) => any) | undefined;
        onClickPrependIcon?: ((...args: any[]) => any) | undefined;
        onClickAppend?: ((...args: any[]) => any) | undefined;
        onClickAppendIcon?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorMessages: {
        type: ArrayConstructor;
        default: () => never[];
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    prependIcon: {
        type: StringConstructor;
        default: string;
    };
    appendIcon: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    text: {
        type: BooleanConstructor;
        default: boolean;
    };
    shadow: {
        type: BooleanConstructor;
        default: boolean;
    };
    classes: {
        type: ObjectConstructor;
        default: () => {
            wrapper: string;
            input: string;
            prepend: string;
            append: string;
        };
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    rules: {
        type: (StringConstructor | ObjectConstructor)[];
        default: null;
    };
    id: {
        type: StringConstructor;
        default: string;
    };
    inputClass: {
        type: StringConstructor;
        default: string;
    };
    wrapperClass: {
        type: StringConstructor;
        default: string;
    };
    prependClass: {
        type: StringConstructor;
        default: string;
    };
    prependIconClass: {
        type: StringConstructor;
        default: string;
    };
    appendClass: {
        type: StringConstructor;
        default: string;
    };
    appendIconClass: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    onBlur?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    "onInput:modelValue"?: ((...args: any[]) => any) | undefined;
    onClickPrepend?: ((...args: any[]) => any) | undefined;
    onClickPrependIcon?: ((...args: any[]) => any) | undefined;
    onClickAppend?: ((...args: any[]) => any) | undefined;
    onClickAppendIcon?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "input:modelValue" | "clickPrepend" | "clickPrependIcon" | "clickAppend" | "clickAppendIcon")[], "blur" | "change" | "input:modelValue" | "clickPrepend" | "clickPrependIcon" | "clickAppend" | "clickAppendIcon", {
    readonly: boolean;
    label: string;
    text: boolean;
    error: boolean;
    value: string | number;
    modelValue: string | number;
    inputClass: string;
    color: string;
    size: string;
    name: string;
    id: string;
    rules: string | Record<string, any>;
    wrapperClass: string;
    disabled: boolean;
    type: string;
    shadow: boolean;
    placeholder: string;
    errorMessages: unknown[];
    classes: Record<string, any>;
    prependIcon: string;
    appendIcon: string;
    prependClass: string;
    prependIconClass: string;
    appendClass: string;
    appendIconClass: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: typeof import('./VInput.vue.__VLS_template').default;
});
export default _default;
