import { PropType } from 'vue';
import { FileValue } from './types';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            readonly: boolean;
            button: boolean;
            label: string;
            image: boolean;
            error: boolean;
            value: FileValue;
            modelValue: FileValue;
            name: string;
            id: string;
            rules: string;
            wrapperClass: string;
            disabled: boolean;
            full: boolean;
            hideRemove: boolean;
            changeText: string;
            removeText: string;
            rounded: boolean;
            loading: boolean;
            loadingText: string;
            placeholder: string;
            browseText: string;
            viewFileText: string;
            hidePlaceholder: boolean;
            preview: boolean;
            uploadText: string;
            dragText: string;
            hint: string;
            previewClass: string;
            accept: string;
            inputProps: Record<string, any>;
            errorMessages: unknown[];
            theme: "" | "button" | "image" | "default" | "dropzone";
            multiple: boolean;
            customSize: string;
            customLayout: string;
            errorClass: string;
            labelClass: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            value: {
                type: PropType<FileValue>;
                default: null;
            };
            modelValue: {
                type: PropType<FileValue>;
                default: null;
            };
            button: {
                type: BooleanConstructor;
                default: boolean;
            };
            full: {
                type: BooleanConstructor;
                default: boolean;
            };
            rounded: {
                type: BooleanConstructor;
                default: boolean;
            };
            image: {
                type: BooleanConstructor;
                default: boolean;
            };
            accept: {
                type: StringConstructor;
                default: string;
            };
            inputProps: {
                type: ObjectConstructor;
                default: () => {};
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            error: {
                type: BooleanConstructor;
                default: boolean;
            };
            errorMessages: {
                type: ArrayConstructor;
                default: () => never[];
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            hint: {
                type: StringConstructor;
                default: string;
            };
            id: {
                type: StringConstructor;
                default: string;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            browseText: {
                type: StringConstructor;
                default: string;
            };
            changeText: {
                type: StringConstructor;
                default: string;
            };
            removeText: {
                type: StringConstructor;
                default: string;
            };
            viewFileText: {
                type: StringConstructor;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            loadingText: {
                type: StringConstructor;
                default: string;
            };
            theme: {
                type: PropType<"" | "button" | "image" | "default" | "dropzone">;
                default: string;
                validator: (v: string) => boolean;
            };
            multiple: {
                type: BooleanConstructor;
                default: boolean;
            };
            hidePlaceholder: {
                type: BooleanConstructor;
                default: boolean;
            };
            uploadText: {
                type: StringConstructor;
                default: string;
            };
            dragText: {
                type: StringConstructor;
                default: string;
            };
            preview: {
                type: BooleanConstructor;
                default: boolean;
            };
            previewClass: {
                type: StringConstructor;
                default: string;
            };
            customSize: {
                type: StringConstructor;
                default: string;
            };
            customLayout: {
                type: StringConstructor;
                default: string;
            };
            hideRemove: {
                type: BooleanConstructor;
                default: boolean;
            };
            rules: {
                type: StringConstructor;
                default: string;
            };
            errorClass: {
                type: StringConstructor;
                default: string;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            labelClass: {
                type: StringConstructor;
                default: string;
            };
            wrapperClass: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onBlur?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
            onRemoved?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "readonly" | "button" | "label" | "image" | "error" | "value" | "modelValue" | "name" | "id" | "rules" | "wrapperClass" | "disabled" | "full" | "hideRemove" | "changeText" | "removeText" | "rounded" | "loading" | "loadingText" | "placeholder" | "browseText" | "viewFileText" | "hidePlaceholder" | "preview" | "uploadText" | "dragText" | "hint" | "previewClass" | "accept" | "inputProps" | "errorMessages" | "theme" | "multiple" | "customSize" | "customLayout" | "errorClass" | "labelClass">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "update:modelValue" | "blur" | "change" | "removed", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            value: {
                type: PropType<FileValue>;
                default: null;
            };
            modelValue: {
                type: PropType<FileValue>;
                default: null;
            };
            button: {
                type: BooleanConstructor;
                default: boolean;
            };
            full: {
                type: BooleanConstructor;
                default: boolean;
            };
            rounded: {
                type: BooleanConstructor;
                default: boolean;
            };
            image: {
                type: BooleanConstructor;
                default: boolean;
            };
            accept: {
                type: StringConstructor;
                default: string;
            };
            inputProps: {
                type: ObjectConstructor;
                default: () => {};
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            error: {
                type: BooleanConstructor;
                default: boolean;
            };
            errorMessages: {
                type: ArrayConstructor;
                default: () => never[];
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            hint: {
                type: StringConstructor;
                default: string;
            };
            id: {
                type: StringConstructor;
                default: string;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            browseText: {
                type: StringConstructor;
                default: string;
            };
            changeText: {
                type: StringConstructor;
                default: string;
            };
            removeText: {
                type: StringConstructor;
                default: string;
            };
            viewFileText: {
                type: StringConstructor;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            loadingText: {
                type: StringConstructor;
                default: string;
            };
            theme: {
                type: PropType<"" | "button" | "image" | "default" | "dropzone">;
                default: string;
                validator: (v: string) => boolean;
            };
            multiple: {
                type: BooleanConstructor;
                default: boolean;
            };
            hidePlaceholder: {
                type: BooleanConstructor;
                default: boolean;
            };
            uploadText: {
                type: StringConstructor;
                default: string;
            };
            dragText: {
                type: StringConstructor;
                default: string;
            };
            preview: {
                type: BooleanConstructor;
                default: boolean;
            };
            previewClass: {
                type: StringConstructor;
                default: string;
            };
            customSize: {
                type: StringConstructor;
                default: string;
            };
            customLayout: {
                type: StringConstructor;
                default: string;
            };
            hideRemove: {
                type: BooleanConstructor;
                default: boolean;
            };
            rules: {
                type: StringConstructor;
                default: string;
            };
            errorClass: {
                type: StringConstructor;
                default: string;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            labelClass: {
                type: StringConstructor;
                default: string;
            };
            wrapperClass: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onBlur?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
            onRemoved?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "blur" | "change" | "removed")[], string, {
            readonly: boolean;
            button: boolean;
            label: string;
            image: boolean;
            error: boolean;
            value: FileValue;
            modelValue: FileValue;
            name: string;
            id: string;
            rules: string;
            wrapperClass: string;
            disabled: boolean;
            full: boolean;
            hideRemove: boolean;
            changeText: string;
            removeText: string;
            rounded: boolean;
            loading: boolean;
            loadingText: string;
            placeholder: string;
            browseText: string;
            viewFileText: string;
            hidePlaceholder: boolean;
            preview: boolean;
            uploadText: string;
            dragText: string;
            hint: string;
            previewClass: string;
            accept: string;
            inputProps: Record<string, any>;
            errorMessages: unknown[];
            theme: "" | "button" | "image" | "default" | "dropzone";
            multiple: boolean;
            customSize: string;
            customLayout: string;
            errorClass: string;
            labelClass: string;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        value: {
            type: PropType<FileValue>;
            default: null;
        };
        modelValue: {
            type: PropType<FileValue>;
            default: null;
        };
        button: {
            type: BooleanConstructor;
            default: boolean;
        };
        full: {
            type: BooleanConstructor;
            default: boolean;
        };
        rounded: {
            type: BooleanConstructor;
            default: boolean;
        };
        image: {
            type: BooleanConstructor;
            default: boolean;
        };
        accept: {
            type: StringConstructor;
            default: string;
        };
        inputProps: {
            type: ObjectConstructor;
            default: () => {};
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        error: {
            type: BooleanConstructor;
            default: boolean;
        };
        errorMessages: {
            type: ArrayConstructor;
            default: () => never[];
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        hint: {
            type: StringConstructor;
            default: string;
        };
        id: {
            type: StringConstructor;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        browseText: {
            type: StringConstructor;
            default: string;
        };
        changeText: {
            type: StringConstructor;
            default: string;
        };
        removeText: {
            type: StringConstructor;
            default: string;
        };
        viewFileText: {
            type: StringConstructor;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        loadingText: {
            type: StringConstructor;
            default: string;
        };
        theme: {
            type: PropType<"" | "button" | "image" | "default" | "dropzone">;
            default: string;
            validator: (v: string) => boolean;
        };
        multiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        hidePlaceholder: {
            type: BooleanConstructor;
            default: boolean;
        };
        uploadText: {
            type: StringConstructor;
            default: string;
        };
        dragText: {
            type: StringConstructor;
            default: string;
        };
        preview: {
            type: BooleanConstructor;
            default: boolean;
        };
        previewClass: {
            type: StringConstructor;
            default: string;
        };
        customSize: {
            type: StringConstructor;
            default: string;
        };
        customLayout: {
            type: StringConstructor;
            default: string;
        };
        hideRemove: {
            type: BooleanConstructor;
            default: boolean;
        };
        rules: {
            type: StringConstructor;
            default: string;
        };
        errorClass: {
            type: StringConstructor;
            default: string;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        labelClass: {
            type: StringConstructor;
            default: string;
        };
        wrapperClass: {
            type: StringConstructor;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onBlur?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
        onRemoved?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: PropType<FileValue>;
        default: null;
    };
    modelValue: {
        type: PropType<FileValue>;
        default: null;
    };
    button: {
        type: BooleanConstructor;
        default: boolean;
    };
    full: {
        type: BooleanConstructor;
        default: boolean;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    image: {
        type: BooleanConstructor;
        default: boolean;
    };
    accept: {
        type: StringConstructor;
        default: string;
    };
    inputProps: {
        type: ObjectConstructor;
        default: () => {};
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorMessages: {
        type: ArrayConstructor;
        default: () => never[];
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    hint: {
        type: StringConstructor;
        default: string;
    };
    id: {
        type: StringConstructor;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    browseText: {
        type: StringConstructor;
        default: string;
    };
    changeText: {
        type: StringConstructor;
        default: string;
    };
    removeText: {
        type: StringConstructor;
        default: string;
    };
    viewFileText: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingText: {
        type: StringConstructor;
        default: string;
    };
    theme: {
        type: PropType<"" | "button" | "image" | "default" | "dropzone">;
        default: string;
        validator: (v: string) => boolean;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    hidePlaceholder: {
        type: BooleanConstructor;
        default: boolean;
    };
    uploadText: {
        type: StringConstructor;
        default: string;
    };
    dragText: {
        type: StringConstructor;
        default: string;
    };
    preview: {
        type: BooleanConstructor;
        default: boolean;
    };
    previewClass: {
        type: StringConstructor;
        default: string;
    };
    customSize: {
        type: StringConstructor;
        default: string;
    };
    customLayout: {
        type: StringConstructor;
        default: string;
    };
    hideRemove: {
        type: BooleanConstructor;
        default: boolean;
    };
    rules: {
        type: StringConstructor;
        default: string;
    };
    errorClass: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    labelClass: {
        type: StringConstructor;
        default: string;
    };
    wrapperClass: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onRemoved?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "blur" | "change" | "removed")[], "update:modelValue" | "blur" | "change" | "removed", {
    readonly: boolean;
    button: boolean;
    label: string;
    image: boolean;
    error: boolean;
    value: FileValue;
    modelValue: FileValue;
    name: string;
    id: string;
    rules: string;
    wrapperClass: string;
    disabled: boolean;
    full: boolean;
    hideRemove: boolean;
    changeText: string;
    removeText: string;
    rounded: boolean;
    loading: boolean;
    loadingText: string;
    placeholder: string;
    browseText: string;
    viewFileText: string;
    hidePlaceholder: boolean;
    preview: boolean;
    uploadText: string;
    dragText: string;
    hint: string;
    previewClass: string;
    accept: string;
    inputProps: Record<string, any>;
    errorMessages: unknown[];
    theme: "" | "button" | "image" | "default" | "dropzone";
    multiple: boolean;
    customSize: string;
    customLayout: string;
    errorClass: string;
    labelClass: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: typeof import('./VFileUpload.vue.__VLS_template').default;
});
export default _default;
