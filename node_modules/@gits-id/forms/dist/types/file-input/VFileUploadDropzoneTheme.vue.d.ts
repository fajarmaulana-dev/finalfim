import { FileValue } from './types';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            readonly: boolean;
            image: boolean;
            modelValue: FileValue;
            disabled: boolean;
            hideRemove: boolean;
            changeText: string;
            removeText: string;
            hasFile: boolean;
            loading: boolean;
            fileName: string;
            previewURL: string | null;
            hasError: boolean;
            preview: boolean;
            uploadText: string;
            dragText: string;
            hint: string;
            previewClass: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
            modelValue?: FileValue | undefined;
            readonly?: boolean | undefined;
            hasError?: boolean | undefined;
            hasFile?: boolean | undefined;
            fileName?: string | undefined;
            previewURL?: string | null | undefined;
            image?: boolean | undefined;
            preview?: boolean | undefined;
            disabled?: boolean | undefined;
            hideRemove?: boolean | undefined;
            changeText?: string | undefined;
            uploadText?: string | undefined;
            dragText?: string | undefined;
            removeText?: string | undefined;
            hint?: string | undefined;
            previewClass?: string | undefined;
            loading?: boolean | undefined;
        }>, {
            modelValue: string;
            readonly: boolean;
            hasError: boolean;
            hasFile: boolean;
            fileName: string;
            previewURL: string;
            image: boolean;
            preview: boolean;
            disabled: boolean;
            hideRemove: boolean;
            changeText: string;
            uploadText: string;
            dragText: string;
            removeText: string;
            hint: string;
            previewClass: string;
            loading: boolean;
        }>>> & {
            "onUpdate:modelValue"?: ((value: any) => any) | undefined;
            onRemove?: (() => any) | undefined;
            onChoose?: (() => any) | undefined;
            onDropped?: ((file: any) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "readonly" | "image" | "modelValue" | "disabled" | "hideRemove" | "changeText" | "removeText" | "hasFile" | "loading" | "fileName" | "previewURL" | "hasError" | "preview" | "uploadText" | "dragText" | "hint" | "previewClass">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "update:modelValue", value: any) => void) & ((event: "choose") => void) & ((event: "remove") => void) & ((event: "dropped", file: any) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
            modelValue?: FileValue | undefined;
            readonly?: boolean | undefined;
            hasError?: boolean | undefined;
            hasFile?: boolean | undefined;
            fileName?: string | undefined;
            previewURL?: string | null | undefined;
            image?: boolean | undefined;
            preview?: boolean | undefined;
            disabled?: boolean | undefined;
            hideRemove?: boolean | undefined;
            changeText?: string | undefined;
            uploadText?: string | undefined;
            dragText?: string | undefined;
            removeText?: string | undefined;
            hint?: string | undefined;
            previewClass?: string | undefined;
            loading?: boolean | undefined;
        }>, {
            modelValue: string;
            readonly: boolean;
            hasError: boolean;
            hasFile: boolean;
            fileName: string;
            previewURL: string;
            image: boolean;
            preview: boolean;
            disabled: boolean;
            hideRemove: boolean;
            changeText: string;
            uploadText: string;
            dragText: string;
            removeText: string;
            hint: string;
            previewClass: string;
            loading: boolean;
        }>>> & {
            "onUpdate:modelValue"?: ((value: any) => any) | undefined;
            onRemove?: (() => any) | undefined;
            onChoose?: (() => any) | undefined;
            onDropped?: ((file: any) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            choose: () => void;
        } & {
            remove: () => void;
        } & {
            "update:modelValue": (value: any) => void;
        } & {
            dropped: (file: any) => void;
        }, string, {
            readonly: boolean;
            image: boolean;
            modelValue: FileValue;
            disabled: boolean;
            hideRemove: boolean;
            changeText: string;
            removeText: string;
            hasFile: boolean;
            loading: boolean;
            fileName: string;
            previewURL: string | null;
            hasError: boolean;
            preview: boolean;
            uploadText: string;
            dragText: string;
            hint: string;
            previewClass: string;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
        modelValue?: FileValue | undefined;
        readonly?: boolean | undefined;
        hasError?: boolean | undefined;
        hasFile?: boolean | undefined;
        fileName?: string | undefined;
        previewURL?: string | null | undefined;
        image?: boolean | undefined;
        preview?: boolean | undefined;
        disabled?: boolean | undefined;
        hideRemove?: boolean | undefined;
        changeText?: string | undefined;
        uploadText?: string | undefined;
        dragText?: string | undefined;
        removeText?: string | undefined;
        hint?: string | undefined;
        previewClass?: string | undefined;
        loading?: boolean | undefined;
    }>, {
        modelValue: string;
        readonly: boolean;
        hasError: boolean;
        hasFile: boolean;
        fileName: string;
        previewURL: string;
        image: boolean;
        preview: boolean;
        disabled: boolean;
        hideRemove: boolean;
        changeText: string;
        uploadText: string;
        dragText: string;
        removeText: string;
        hint: string;
        previewClass: string;
        loading: boolean;
    }>>> & {
        "onUpdate:modelValue"?: ((value: any) => any) | undefined;
        onRemove?: (() => any) | undefined;
        onChoose?: (() => any) | undefined;
        onDropped?: ((file: any) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    modelValue?: FileValue | undefined;
    readonly?: boolean | undefined;
    hasError?: boolean | undefined;
    hasFile?: boolean | undefined;
    fileName?: string | undefined;
    previewURL?: string | null | undefined;
    image?: boolean | undefined;
    preview?: boolean | undefined;
    disabled?: boolean | undefined;
    hideRemove?: boolean | undefined;
    changeText?: string | undefined;
    uploadText?: string | undefined;
    dragText?: string | undefined;
    removeText?: string | undefined;
    hint?: string | undefined;
    previewClass?: string | undefined;
    loading?: boolean | undefined;
}>, {
    modelValue: string;
    readonly: boolean;
    hasError: boolean;
    hasFile: boolean;
    fileName: string;
    previewURL: string;
    image: boolean;
    preview: boolean;
    disabled: boolean;
    hideRemove: boolean;
    changeText: string;
    uploadText: string;
    dragText: string;
    removeText: string;
    hint: string;
    previewClass: string;
    loading: boolean;
}>>> & {
    "onUpdate:modelValue"?: ((value: any) => any) | undefined;
    onRemove?: (() => any) | undefined;
    onChoose?: (() => any) | undefined;
    onDropped?: ((file: any) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    choose: () => void;
} & {
    remove: () => void;
} & {
    "update:modelValue": (value: any) => void;
} & {
    dropped: (file: any) => void;
}, string, {
    readonly: boolean;
    image: boolean;
    modelValue: FileValue;
    disabled: boolean;
    hideRemove: boolean;
    changeText: string;
    removeText: string;
    hasFile: boolean;
    loading: boolean;
    fileName: string;
    previewURL: string | null;
    hasError: boolean;
    preview: boolean;
    uploadText: string;
    dragText: string;
    hint: string;
    previewClass: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: typeof import('./VFileUploadDropzoneTheme.vue.__VLS_template').default;
});
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
