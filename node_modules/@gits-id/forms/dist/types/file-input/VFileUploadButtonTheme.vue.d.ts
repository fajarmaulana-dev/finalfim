declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            changeText: string;
            removeText: string;
            hasFile: boolean;
            placeholder: string;
            browseText: string;
            viewFileText: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
            hasFile?: boolean | undefined;
            disabledClass?: string | undefined;
            borderClass?: string | undefined;
            fileName?: string | undefined;
            fileURL?: string | undefined;
            viewFileText?: string | undefined;
            readonly?: boolean | undefined;
            placeholder?: string | undefined;
            hidePlaceholder?: boolean | undefined;
            changeText?: string | undefined;
            removeText?: string | undefined;
            hideRemove?: boolean | undefined;
            disabled?: boolean | undefined;
            browseText?: string | undefined;
        }>, {
            hasFile: boolean;
            removeText: string;
            changeText: string;
            browseText: string;
            placeholder: string;
            viewFileText: string;
        }>>> & {
            onRemove?: (() => any) | undefined;
            onChoose?: (() => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "changeText" | "removeText" | "hasFile" | "placeholder" | "browseText" | "viewFileText">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "choose") => void) & ((event: "remove") => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
            hasFile?: boolean | undefined;
            disabledClass?: string | undefined;
            borderClass?: string | undefined;
            fileName?: string | undefined;
            fileURL?: string | undefined;
            viewFileText?: string | undefined;
            readonly?: boolean | undefined;
            placeholder?: string | undefined;
            hidePlaceholder?: boolean | undefined;
            changeText?: string | undefined;
            removeText?: string | undefined;
            hideRemove?: boolean | undefined;
            disabled?: boolean | undefined;
            browseText?: string | undefined;
        }>, {
            hasFile: boolean;
            removeText: string;
            changeText: string;
            browseText: string;
            placeholder: string;
            viewFileText: string;
        }>>> & {
            onRemove?: (() => any) | undefined;
            onChoose?: (() => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            choose: () => void;
        } & {
            remove: () => void;
        }, string, {
            changeText: string;
            removeText: string;
            hasFile: boolean;
            placeholder: string;
            browseText: string;
            viewFileText: string;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
        hasFile?: boolean | undefined;
        disabledClass?: string | undefined;
        borderClass?: string | undefined;
        fileName?: string | undefined;
        fileURL?: string | undefined;
        viewFileText?: string | undefined;
        readonly?: boolean | undefined;
        placeholder?: string | undefined;
        hidePlaceholder?: boolean | undefined;
        changeText?: string | undefined;
        removeText?: string | undefined;
        hideRemove?: boolean | undefined;
        disabled?: boolean | undefined;
        browseText?: string | undefined;
    }>, {
        hasFile: boolean;
        removeText: string;
        changeText: string;
        browseText: string;
        placeholder: string;
        viewFileText: string;
    }>>> & {
        onRemove?: (() => any) | undefined;
        onChoose?: (() => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    hasFile?: boolean | undefined;
    disabledClass?: string | undefined;
    borderClass?: string | undefined;
    fileName?: string | undefined;
    fileURL?: string | undefined;
    viewFileText?: string | undefined;
    readonly?: boolean | undefined;
    placeholder?: string | undefined;
    hidePlaceholder?: boolean | undefined;
    changeText?: string | undefined;
    removeText?: string | undefined;
    hideRemove?: boolean | undefined;
    disabled?: boolean | undefined;
    browseText?: string | undefined;
}>, {
    hasFile: boolean;
    removeText: string;
    changeText: string;
    browseText: string;
    placeholder: string;
    viewFileText: string;
}>>> & {
    onRemove?: (() => any) | undefined;
    onChoose?: (() => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    choose: () => void;
} & {
    remove: () => void;
}, string, {
    changeText: string;
    removeText: string;
    hasFile: boolean;
    placeholder: string;
    browseText: string;
    viewFileText: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: typeof import('./VFileUploadButtonTheme.vue.__VLS_template').default;
});
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
