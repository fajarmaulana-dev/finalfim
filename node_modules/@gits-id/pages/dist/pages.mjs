import { defineComponent as B, toRefs as C, openBlock as f, createElementBlock as v, normalizeClass as E, unref as t, createElementVNode as s, renderSlot as d, createCommentVNode as k, toDisplayString as r, createBlock as P, withCtx as w, createTextVNode as g, ref as O, watch as K, createVNode as l, withModifiers as F, computed as j, mergeProps as H } from "vue";
import S from "@gits-id/button";
import { VInput as T, VCheckbox as q } from "@gits-id/forms";
import { useForm as A } from "vee-validate";
import { object as R, string as y, ref as M } from "yup";
import W from "@gits-id/alert";
import { Icon as L } from "@iconify/vue";
const N = { class: "mx-auto py-4 text-center" }, I = { class: "font-semibold text-2xl mb-2 text-gray-700" }, z = { class: "mb-6 text-gray-500" }, Z = /* @__PURE__ */ g(" Back to Home "), ke = /* @__PURE__ */ B({
  __name: "NotFound",
  props: {
    fillHeight: {
      type: Boolean,
      default: !0
    },
    noButton: {
      type: Boolean,
      default: !1
    },
    noImage: {
      type: Boolean,
      default: !1
    },
    title: {
      type: String,
      default: "404 Page Not Found"
    },
    description: {
      type: String,
      default: "Sorry, the page you are looking is not found"
    }
  },
  setup(e) {
    const i = e, { fillHeight: a, noButton: u, noImage: m, title: h, description: b } = C(i);
    return (c, o) => (f(), v("div", {
      class: E(["flex items-center justify-center", [t(a) ? "min-h-screen" : ""]])
    }, [
      s("div", N, [
        t(m) ? k("", !0) : d(c.$slots, "image", { key: 0 }),
        s("div", I, r(t(h)), 1),
        s("div", z, r(t(b)), 1),
        t(u) ? k("", !0) : (f(), P(t(S), {
          key: 1,
          to: "/",
          color: "primary"
        }, {
          default: w(() => [
            Z
          ]),
          _: 1
        }))
      ])
    ], 2));
  }
}), D = { class: "w-auto md:w-[400px] px-4" }, U = {
  key: 0,
  class: "text-gray-1"
}, G = { class: "font-extrabold text-4xl mb-2" }, Y = { class: "text-gray-600" }, J = { class: "mt-8" }, ve = /* @__PURE__ */ B({
  __name: "Activation",
  props: {
    title: {
      type: String,
      default: "Activate Your Account"
    },
    subtitle: {
      type: String,
      default: "Create a secure password to activate your account"
    },
    message: {
      type: String,
      default: ""
    },
    loading: {
      type: Boolean,
      default: !1
    },
    submitText: {
      type: String,
      default: "Ubah Kata Sandi"
    },
    passwordText: {
      type: String,
      default: "Kata Sandi Baru"
    },
    passwordHint: {
      type: String,
      default: ""
    },
    passwordConfirmationText: {
      type: String,
      default: "Konfirmasi Kata Sandi Baru"
    },
    currentPasswordText: {
      type: String,
      default: "Kata Sandi Lama"
    },
    currentPasswordHint: {
      type: String,
      default: ""
    },
    withOldPassword: {
      type: Boolean,
      default: !1
    },
    passwordFormatError: {
      type: String,
      default: "Kata Sandi harus berisi 8 karakter dan minimal ada 1 angka"
    },
    backArrow: {
      type: Boolean,
      default: !1
    },
    backText: {
      type: String,
      default: "Kembali ke halaman Login"
    },
    passwordMatchError: {
      type: String,
      default: "Tidak sesuai dengan kata sandi baru"
    },
    passwordConfirmationHint: {
      type: String,
      default: ""
    }
  },
  emits: ["submit", "cancel"],
  setup(e, { emit: i }) {
    const a = e, { message: u, title: m, subtitle: h } = C(a), b = O(!1);
    K(
      u,
      () => {
        b.value = !!a.message;
      },
      { immediate: !0 }
    );
    const c = R({
      currentPassword: a.withOldPassword ? y().required().label(a.currentPasswordText) : y(),
      password: y().required().min(8).matches(
        /[^\w\d]*(([0-9]+.*[A-Za-z]+.*)|[A-Za-z]+.*([0-9]+.*))/i,
        a.passwordFormatError
      ).label(a.passwordText),
      passwordConfirmation: y().required().oneOf([M("password"), null], a.passwordMatchError).label(a.passwordConfirmationText)
    }), { handleSubmit: o } = A({
      validationSchema: c
    }), n = o((x) => {
      i("submit", x);
    }), p = () => {
      i("cancel");
    };
    return (x, $) => (f(), v("div", D, [
      d(x.$slots, "back", {}, () => [
        e.backArrow ? (f(), P(t(S), {
          key: 0,
          color: "primary",
          text: "",
          class: "relative -left-10 md:absolute md:top-20 md:left-24 gap-4",
          onClick: p
        }, {
          default: w(() => [
            l(t(L), {
              class: "w-6 h-6",
              icon: "heroicons-outline:arrow-left"
            }),
            e.backText ? (f(), v("span", U, r(e.backText), 1)) : k("", !0)
          ]),
          _: 1
        })) : k("", !0)
      ]),
      d(x.$slots, "logo"),
      d(x.$slots, "header", {}, () => [
        s("h1", G, r(t(m)), 1),
        s("div", Y, r(t(h)), 1)
      ]),
      l(t(W), {
        modelValue: b.value,
        "onUpdate:modelValue": $[0] || ($[0] = (V) => b.value = V),
        color: "error",
        class: "mt-5",
        dismissable: ""
      }, {
        default: w(() => [
          g(r(t(u)), 1)
        ]),
        _: 1
      }, 8, ["modelValue"]),
      s("form", {
        onSubmit: $[1] || ($[1] = F(
          (...V) => t(n) && t(n)(...V),
          ["prevent"]
        ))
      }, [
        s("div", J, [
          e.withOldPassword ? (f(), P(t(T), {
            key: 0,
            id: "currentPassword",
            name: "currentPassword",
            type: "password",
            "wrapper-class": "mb-4",
            "prepend-icon": "heroicons-outline:lock-closed",
            label: e.currentPasswordText,
            placeholder: e.currentPasswordText,
            hint: e.currentPasswordHint
          }, null, 8, ["label", "placeholder", "hint"])) : k("", !0),
          l(t(T), {
            id: "password",
            name: "password",
            type: "password",
            "wrapper-class": "mb-4",
            "prepend-icon": "heroicons-outline:lock-closed",
            label: e.passwordText,
            placeholder: e.passwordText,
            hint: e.passwordHint
          }, null, 8, ["label", "placeholder", "hint"]),
          l(t(T), {
            id: "passwordConfirmation",
            name: "passwordConfirmation",
            type: "passwordConfirmation",
            "wrapper-class": "mb-4",
            "prepend-icon": "heroicons-outline:lock-closed",
            label: e.passwordConfirmationText,
            placeholder: e.passwordConfirmationText,
            hint: e.passwordConfirmationHint
          }, null, 8, ["label", "placeholder", "hint"]),
          l(t(S), {
            type: "submit",
            color: "primary",
            block: "",
            uppercase: "",
            disabled: e.loading,
            loading: e.loading
          }, {
            default: w(() => [
              g(r(e.submitText), 1)
            ]),
            _: 1
          }, 8, ["disabled", "loading"])
        ])
      ], 32)
    ]));
  }
}), Q = { class: "flex flex-col lg:flex-row sm:min-h-screen" }, $e = /* @__PURE__ */ B({
  __name: "Auth",
  props: {
    image: {
      type: String,
      default: "authentication"
    },
    formOnLeft: {
      type: Boolean,
      default: !1
    },
    imageWrapperClass: {
      type: String,
      default: ""
    },
    formWrapperClass: {
      type: String,
      default: ""
    },
    defaultImageWrapperClass: {
      type: String,
      default: "w-full lg:w-6/12 xl:w-7/12 flex items-center justify-center px-12 pt-10 xl:p-0"
    },
    defaultFormWrapperClass: {
      type: String,
      default: "w-full lg:w-6/12 xl:w-5/12 flex items-center justify-center p-4 xl:p-0"
    }
  },
  setup(e) {
    return (i, a) => (f(), v("div", Q, [
      s("div", {
        class: E(["bg-no-repeat bg-[url(https://images.unsplash.com/photo-1525351549016-1ddd272c8315?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80)] bg-cover hidden sm:block", [
          e.defaultImageWrapperClass,
          e.formOnLeft ? "order-2" : "order-1",
          e.imageWrapperClass
        ]])
      }, [
        d(i.$slots, "image")
      ], 2),
      s("div", {
        class: E([
          e.defaultFormWrapperClass,
          e.formOnLeft ? "order-1" : "order-2",
          e.formWrapperClass
        ])
      }, [
        d(i.$slots, "default")
      ], 2)
    ]));
  }
}), X = { class: "" }, _ = { class: "font-extrabold text-4xl mb-2" }, ee = { class: "text-gray-600" }, te = { class: "mt-10" }, ae = /* @__PURE__ */ g(" Submit "), Ce = {
  __name: "ForgotPassword",
  props: {
    modelValue: {
      type: String,
      default: null
    },
    title: {
      type: String,
      default: "Forgot Password"
    },
    subtitle: {
      type: String,
      default: "We'll send you a reset password link to your email"
    },
    emailText: {
      type: String,
      default: "Email"
    },
    schema: {
      type: Object,
      default: () => ({
        email: y().required().email().label("Email")
      })
    }
  },
  emits: ["submit"],
  setup(e, { emit: i }) {
    const a = e, { title: u, subtitle: m } = C(a), { handleSubmit: h, errors: b } = A({
      validationSchema: a.schema
    }), c = h((o) => {
      i("submit", o);
    });
    return (o, n) => (f(), v("div", X, [
      d(o.$slots, "logo"),
      s("h1", _, r(t(u)), 1),
      s("div", ee, r(t(m)), 1),
      s("form", {
        onSubmit: n[0] || (n[0] = F((...p) => t(c) && t(c)(...p), ["prevent"]))
      }, [
        s("div", te, [
          l(t(T), {
            id: "email",
            name: "email",
            type: "email",
            "wrapper-class": "mb-4",
            class: "pl-10",
            "prepend-icon": "heroicons-outline:at-symbol",
            label: e.emailText,
            placeholder: e.emailText
          }, null, 8, ["label", "placeholder"]),
          l(t(S), {
            type: "submit",
            color: "primary",
            block: "",
            uppercase: ""
          }, {
            default: w(() => [
              ae
            ]),
            _: 1
          })
        ])
      ], 32)
    ]));
  }
}, se = { class: "w-full md:w-[400px]" }, oe = { class: "font-extrabold text-4xl mb-2" }, re = { class: "text-gray-600" }, le = { class: "mt-8" }, ie = { class: "mb-4 flex justify-between items-center" }, ne = { class: "w-6/12" }, de = { class: "mt-4" }, ue = /* @__PURE__ */ g(" Already have an account? "), me = /* @__PURE__ */ g(" Register "), Pe = /* @__PURE__ */ B({
  __name: "Login",
  props: {
    message: {
      type: String,
      default: ""
    },
    loading: {
      type: Boolean,
      default: !1
    },
    title: {
      type: String,
      default: "Login Account"
    },
    subtitle: {
      type: String,
      default: "Please enter your credentials"
    },
    passwordPath: {
      type: String,
      default: "/auth/password/forgot"
    },
    register: {
      type: String,
      default: ""
    },
    usernameText: {
      type: String,
      default: "Email"
    },
    passwordText: {
      type: String,
      default: "Password"
    },
    forgotPasswordText: {
      type: String,
      default: "Forgot Password"
    },
    loginText: {
      type: String,
      default: "Login"
    },
    hideRememberMe: {
      type: Boolean,
      default: !1
    },
    email: {
      type: Boolean,
      default: !1
    },
    disabled: {
      type: Boolean,
      default: !1
    },
    autocomplete: {
      type: String,
      default: "off"
    },
    btnProps: {
      type: Object,
      default: () => ({})
    },
    btnRegisterProps: {
      type: Object,
      default: () => ({})
    }
  },
  emits: ["submit", "loginSSO"],
  setup(e, { emit: i }) {
    const a = e, { message: u } = C(a), m = O(!1);
    K(
      u,
      () => {
        m.value = !!a.message;
      },
      { immediate: !0 }
    );
    const h = j(() => {
      let o = y().required();
      return a.email && (o = o.email()), o = o.label(a.usernameText), R({
        email: o,
        password: y().required().label(a.passwordText)
      });
    }), { handleSubmit: b } = A({
      validationSchema: h
    }), c = b((o) => {
      i("submit", o);
    });
    return (o, n) => (f(), v("div", se, [
      d(o.$slots, "logo"),
      s("h1", oe, r(e.title), 1),
      s("div", re, r(e.subtitle), 1),
      l(t(W), {
        modelValue: m.value,
        "onUpdate:modelValue": n[0] || (n[0] = (p) => m.value = p),
        color: "error",
        class: "mt-5",
        dismissable: ""
      }, {
        default: w(() => [
          g(r(t(u)), 1)
        ]),
        _: 1
      }, 8, ["modelValue"]),
      s("form", {
        onSubmit: n[1] || (n[1] = F(
          (...p) => t(c) && t(c)(...p),
          ["prevent"]
        ))
      }, [
        s("div", le, [
          l(t(T), {
            id: "username",
            name: "email",
            "wrapper-class": "mb-4",
            "prepend-icon": "heroicons-outline:at-symbol",
            label: e.usernameText,
            placeholder: e.usernameText,
            autocomplete: e.autocomplete
          }, null, 8, ["label", "placeholder", "autocomplete"]),
          l(t(T), {
            id: "password",
            name: "password",
            type: "password",
            "prepend-icon": "heroicons-outline:lock-closed",
            "wrapper-class": "mb-4",
            label: e.passwordText,
            placeholder: e.passwordText
          }, null, 8, ["label", "placeholder"]),
          s("div", ie, [
            s("div", ne, [
              e.hideRememberMe ? k("", !0) : (f(), P(t(q), {
                key: 0,
                label: "Remember me",
                name: "remember_me"
              }))
            ]),
            d(o.$slots, "forgotPassword", {}, () => [
              l(t(S), {
                color: "primary",
                text: "",
                dense: "",
                small: "",
                to: e.passwordPath,
                class: "!p-0"
              }, {
                default: w(() => [
                  g(r(e.forgotPasswordText), 1)
                ]),
                _: 1
              }, 8, ["to"])
            ])
          ]),
          l(t(S), H({
            type: "submit",
            color: "primary",
            block: "",
            uppercase: "",
            disabled: e.loading || e.disabled,
            loading: e.loading
          }, e.btnProps), {
            default: w(() => [
              g(r(e.loginText), 1)
            ]),
            _: 1
          }, 16, ["disabled", "loading"])
        ]),
        e.register ? d(o.$slots, "register", { key: 0 }, () => [
          s("div", de, [
            ue,
            l(t(S), H({
              text: "",
              color: "primary",
              to: e.register
            }, e.btnRegisterProps), {
              default: w(() => [
                me
              ]),
              _: 1
            }, 16, ["to"])
          ])
        ]) : k("", !0),
        d(o.$slots, "extra")
      ], 32)
    ]));
  }
}), ce = { class: "" }, pe = { class: "font-extrabold text-4xl mb-2" }, fe = { class: "text-gray-600" }, be = { class: "mt-10" }, Be = {
  __name: "ResetPassword",
  props: {
    modelValue: {
      type: String,
      default: null
    },
    title: {
      type: String,
      default: "Reset Password"
    },
    subtitle: {
      type: String,
      default: "Create a new and secure password for your account"
    },
    passwordMatchError: {
      type: String,
      default: "Tidak sesuai dengan kata sandi baru"
    },
    passwordFormatError: {
      type: String,
      default: "Kata Sandi harus berisi 8 karakter dan minimal ada 1 angka"
    },
    passwordConfirmationText: {
      type: String,
      default: "Konfirmasi Kata Sandi Baru"
    },
    passwordText: {
      type: String,
      default: "Kata Sandi Baru"
    },
    submitText: {
      type: String,
      default: "Reset Password"
    }
  },
  emits: ["submit"],
  setup(e, { emit: i }) {
    const a = e, { title: u, subtitle: m } = C(a), h = /[^\w\d]*((\d+.*[A-Za-z]+.*)|[A-Za-z]+.*(\d+.*))/i, b = R({
      password: y().required().min(8).matches(h, a.passwordFormatError).label(a.passwordText),
      passwordConfirmation: y().required().oneOf([M("password"), null], a.passwordMatchError).label(a.passwordConfirmationText)
    }), { handleSubmit: c, errors: o } = A({
      validationSchema: b
    }), n = c((p) => {
      i("submit", p);
    });
    return (p, x) => (f(), v("div", ce, [
      d(p.$slots, "logo"),
      s("h1", pe, r(t(u)), 1),
      s("div", fe, r(t(m)), 1),
      s("form", {
        onSubmit: x[0] || (x[0] = (...$) => t(n) && t(n)(...$))
      }, [
        s("div", be, [
          l(t(T), {
            id: "password",
            name: "password",
            type: "password",
            "wrapper-class": "mb-4",
            "prepend-icon": "heroicons-outline:lock-closed",
            label: e.passwordText,
            placeholder: e.passwordText
          }, null, 8, ["label", "placeholder"]),
          l(t(T), {
            id: "passwordConfirmation",
            name: "passwordConfirmation",
            type: "password",
            "wrapper-class": "mb-4",
            "prepend-icon": "heroicons-outline:lock-closed",
            label: e.passwordConfirmationText,
            placeholder: e.passwordConfirmationText
          }, null, 8, ["label", "placeholder"]),
          l(t(S), {
            color: "primary",
            type: "submit",
            block: ""
          }, {
            default: w(() => [
              g(r(e.submitText), 1)
            ]),
            _: 1
          })
        ])
      ], 32)
    ]));
  }
};
export {
  ve as Activation,
  $e as Auth,
  Ce as ForgotPassword,
  Pe as Login,
  ke as NotFound,
  Be as ResetPassword
};
