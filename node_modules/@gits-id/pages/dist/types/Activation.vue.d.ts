declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            title: string;
            subtitle: string;
            message: string;
            loading: boolean;
            submitText: string;
            passwordText: string;
            passwordHint: string;
            passwordConfirmationText: string;
            currentPasswordText: string;
            currentPasswordHint: string;
            withOldPassword: boolean;
            passwordFormatError: string;
            backArrow: boolean;
            backText: string;
            passwordMatchError: string;
            passwordConfirmationHint: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            title: {
                type: StringConstructor;
                default: string;
            };
            subtitle: {
                type: StringConstructor;
                default: string;
            };
            message: {
                type: StringConstructor;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            submitText: {
                type: StringConstructor;
                default: string;
            };
            passwordText: {
                type: StringConstructor;
                default: string;
            };
            passwordHint: {
                type: StringConstructor;
                default: string;
            };
            passwordConfirmationText: {
                type: StringConstructor;
                default: string;
            };
            currentPasswordText: {
                type: StringConstructor;
                default: string;
            };
            currentPasswordHint: {
                type: StringConstructor;
                default: string;
            };
            withOldPassword: {
                type: BooleanConstructor;
                default: boolean;
            };
            passwordFormatError: {
                type: StringConstructor;
                default: string;
            };
            backArrow: {
                type: BooleanConstructor;
                default: boolean;
            };
            backText: {
                type: StringConstructor;
                default: string;
            };
            passwordMatchError: {
                type: StringConstructor;
                default: string;
            };
            passwordConfirmationHint: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            onSubmit?: ((...args: any[]) => any) | undefined;
            onCancel?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "title" | "subtitle" | "message" | "loading" | "submitText" | "passwordText" | "passwordHint" | "passwordConfirmationText" | "currentPasswordText" | "currentPasswordHint" | "withOldPassword" | "passwordFormatError" | "backArrow" | "backText" | "passwordMatchError" | "passwordConfirmationHint">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "submit" | "cancel", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            title: {
                type: StringConstructor;
                default: string;
            };
            subtitle: {
                type: StringConstructor;
                default: string;
            };
            message: {
                type: StringConstructor;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            submitText: {
                type: StringConstructor;
                default: string;
            };
            passwordText: {
                type: StringConstructor;
                default: string;
            };
            passwordHint: {
                type: StringConstructor;
                default: string;
            };
            passwordConfirmationText: {
                type: StringConstructor;
                default: string;
            };
            currentPasswordText: {
                type: StringConstructor;
                default: string;
            };
            currentPasswordHint: {
                type: StringConstructor;
                default: string;
            };
            withOldPassword: {
                type: BooleanConstructor;
                default: boolean;
            };
            passwordFormatError: {
                type: StringConstructor;
                default: string;
            };
            backArrow: {
                type: BooleanConstructor;
                default: boolean;
            };
            backText: {
                type: StringConstructor;
                default: string;
            };
            passwordMatchError: {
                type: StringConstructor;
                default: string;
            };
            passwordConfirmationHint: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            onSubmit?: ((...args: any[]) => any) | undefined;
            onCancel?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("submit" | "cancel")[], string, {
            title: string;
            subtitle: string;
            message: string;
            loading: boolean;
            submitText: string;
            passwordText: string;
            passwordHint: string;
            passwordConfirmationText: string;
            currentPasswordText: string;
            currentPasswordHint: string;
            withOldPassword: boolean;
            passwordFormatError: string;
            backArrow: boolean;
            backText: string;
            passwordMatchError: string;
            passwordConfirmationHint: string;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        title: {
            type: StringConstructor;
            default: string;
        };
        subtitle: {
            type: StringConstructor;
            default: string;
        };
        message: {
            type: StringConstructor;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        submitText: {
            type: StringConstructor;
            default: string;
        };
        passwordText: {
            type: StringConstructor;
            default: string;
        };
        passwordHint: {
            type: StringConstructor;
            default: string;
        };
        passwordConfirmationText: {
            type: StringConstructor;
            default: string;
        };
        currentPasswordText: {
            type: StringConstructor;
            default: string;
        };
        currentPasswordHint: {
            type: StringConstructor;
            default: string;
        };
        withOldPassword: {
            type: BooleanConstructor;
            default: boolean;
        };
        passwordFormatError: {
            type: StringConstructor;
            default: string;
        };
        backArrow: {
            type: BooleanConstructor;
            default: boolean;
        };
        backText: {
            type: StringConstructor;
            default: string;
        };
        passwordMatchError: {
            type: StringConstructor;
            default: string;
        };
        passwordConfirmationHint: {
            type: StringConstructor;
            default: string;
        };
    }>> & {
        onSubmit?: ((...args: any[]) => any) | undefined;
        onCancel?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    title: {
        type: StringConstructor;
        default: string;
    };
    subtitle: {
        type: StringConstructor;
        default: string;
    };
    message: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    submitText: {
        type: StringConstructor;
        default: string;
    };
    passwordText: {
        type: StringConstructor;
        default: string;
    };
    passwordHint: {
        type: StringConstructor;
        default: string;
    };
    passwordConfirmationText: {
        type: StringConstructor;
        default: string;
    };
    currentPasswordText: {
        type: StringConstructor;
        default: string;
    };
    currentPasswordHint: {
        type: StringConstructor;
        default: string;
    };
    withOldPassword: {
        type: BooleanConstructor;
        default: boolean;
    };
    passwordFormatError: {
        type: StringConstructor;
        default: string;
    };
    backArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    backText: {
        type: StringConstructor;
        default: string;
    };
    passwordMatchError: {
        type: StringConstructor;
        default: string;
    };
    passwordConfirmationHint: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    onSubmit?: ((...args: any[]) => any) | undefined;
    onCancel?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("submit" | "cancel")[], "submit" | "cancel", {
    title: string;
    subtitle: string;
    message: string;
    loading: boolean;
    submitText: string;
    passwordText: string;
    passwordHint: string;
    passwordConfirmationText: string;
    currentPasswordText: string;
    currentPasswordHint: string;
    withOldPassword: boolean;
    passwordFormatError: string;
    backArrow: boolean;
    backText: string;
    passwordMatchError: string;
    passwordConfirmationHint: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: typeof import('./Activation.vue.__VLS_template').default;
});
export default _default;
