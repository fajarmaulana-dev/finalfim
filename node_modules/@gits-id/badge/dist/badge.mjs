import { defineComponent as y, toRefs as m, computed as o, openBlock as s, createElementBlock as a, normalizeClass as n, unref as t, renderSlot as x, createVNode as h, createCommentVNode as w } from "vue";
import { XIcon as v } from "@heroicons/vue/outline";
const _ = /* @__PURE__ */ y({
  __name: "VBadge",
  props: {
    color: {
      type: String,
      default: "default"
    },
    rounded: {
      type: Boolean,
      default: !1
    },
    small: {
      type: Boolean,
      default: !1
    },
    large: {
      type: Boolean,
      default: !1
    },
    bgColor: {
      type: String,
      default: ""
    },
    textColor: {
      type: String,
      default: "text-white"
    },
    circle: {
      type: Boolean,
      default: !1
    },
    dismissable: {
      type: Boolean,
      default: !1
    },
    outlined: {
      type: Boolean,
      default: !1
    }
  },
  emits: ["dismiss"],
  setup(l, { emit: i }) {
    const e = l, { dismissable: d } = m(e), c = o(() => {
      if (e.bgColor)
        return `${e.bgColor} ${e.textColor}`;
      let r;
      return e.outlined ? r = {
        default: "bg-transparent border border-gray-800 text-gray-800",
        primary: "bg-transparent border border-primary-500 text-primary-500",
        secondary: "bg-transparent border border-secondary-500 text-secondary-500",
        info: "bg-transparent border border-info-500 text-info-500",
        warning: "bg-transparent border border-warning-500 text-warning-500",
        error: "bg-transparent border border-error-500 text-error-500",
        success: "bg-transparent border border-success-500 text-success-500",
        dark: "bg-transparent border border-gray-900 text-gray-900"
      } : r = {
        default: "bg-gray-200 text-gray-800",
        primary: "bg-primary-500 text-white",
        secondary: "bg-secondary-500 text-white",
        info: "bg-info-500 text-white",
        warning: "bg-warning-500 text-white",
        error: "bg-error-500 text-white",
        success: "bg-success-500 text-white",
        dark: "bg-gray-900 text-white"
      }, r[e.color];
    }), g = o(() => e.small ? "px-2 py-1 text-xs" : e.large ? "px-4 py-2 text-lg" : "px-2 py-1 text-sm"), b = o(() => {
      let r = "rounded-md";
      return e.small ? r = "rounded" : e.large && (r = "rounded-lg"), e.rounded ? "rounded-full" : r;
    }), u = o(() => {
      let r = "w-7 h-7";
      return e.small ? r = "w-6 h-6" : e.large && (r = "w-10 h-10"), e.circle ? "inline-flex items-center justify-center rounded-full " + r : "";
    }), f = o(() => ({
      default: "hover:bg-gray-400 active:bg-gray-300 hover:text-white",
      primary: "hover:bg-primary-400 active:bg-primary-300",
      secondary: "hover:bg-secondary-400 active:bg-secondary-300",
      info: "hover:bg-info-400 active:bg-info-300",
      warning: "hover:bg-warning-400 active:bg-warning-300",
      success: "hover:bg-success-400 active:bg-success-300",
      error: "hover:bg-error-400 active:bg-error-300"
    })[e.color]), p = () => {
      i("dismiss");
    };
    return (r, C) => (s(), a("span", {
      class: n(["inline-flex items-center gap-2", [t(c), t(b), t(g), t(u)]])
    }, [
      x(r.$slots, "default"),
      t(d) ? (s(), a("button", {
        key: 0,
        class: n(["bg-transparent rounded-sm !p-0", [t(f)]]),
        type: "button",
        onClick: p
      }, [
        h(t(v), { class: "h-4 w-4" })
      ], 2)) : w("", !0)
    ], 2));
  }
});
export {
  _ as VBadge,
  _ as default
};
