declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            title: string;
            modelValue: boolean;
            confirm: boolean;
            confirmColor: string;
            confirmProps: {};
            confirmText: string;
            closeText: string;
            closeProps: {};
            headerClass: string;
            bodyClass: string;
            footerClass: string;
            modalClass: string;
            loading: boolean;
            hideHeader: boolean;
            hideFooter: boolean;
            centered: boolean;
            fullscreen: boolean;
            persistent: boolean;
            hideXButton: boolean;
            xButtonProps: Record<string, any>;
            xIconClass: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
            modelValue?: boolean | undefined;
            title?: string | undefined;
            confirm?: boolean | undefined;
            confirmColor?: string | undefined;
            confirmProps?: {} | undefined;
            confirmText?: string | undefined;
            closeText?: string | undefined;
            closeProps?: {} | undefined;
            headerClass?: string | undefined;
            bodyClass?: string | undefined;
            footerClass?: string | undefined;
            modalClass?: string | undefined;
            loading?: boolean | undefined;
            hideHeader?: boolean | undefined;
            hideFooter?: boolean | undefined;
            centered?: boolean | undefined;
            fullscreen?: boolean | undefined;
            persistent?: boolean | undefined;
            hideXButton?: boolean | undefined;
            xButtonProps?: Record<string, any> | undefined;
            xIconClass?: string | undefined;
        }>, {
            modelValue: boolean;
            title: string;
            confirm: boolean;
            confirmColor: string;
            confirmProps: () => {};
            confirmText: string;
            closeText: string;
            closeProps: () => {};
            headerClass: string;
            bodyClass: string;
            footerClass: string;
            modalClass: string;
            boolean: boolean;
            hideHeader: boolean;
            hideFooter: boolean;
            centered: boolean;
            fullscreen: boolean;
            loading: boolean;
            persistent: boolean;
            hideXButton: boolean;
            xButtonProps: () => {};
            xIconClass: string;
        }>>> & {
            onConfirm?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onOpen?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "title" | "modelValue" | "confirm" | "confirmColor" | "confirmProps" | "confirmText" | "closeText" | "closeProps" | "headerClass" | "bodyClass" | "footerClass" | "modalClass" | "loading" | "hideHeader" | "hideFooter" | "centered" | "fullscreen" | "persistent" | "hideXButton" | "xButtonProps" | "xIconClass">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "update:modelValue" | "confirm" | "close" | "open", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
            modelValue?: boolean | undefined;
            title?: string | undefined;
            confirm?: boolean | undefined;
            confirmColor?: string | undefined;
            confirmProps?: {} | undefined;
            confirmText?: string | undefined;
            closeText?: string | undefined;
            closeProps?: {} | undefined;
            headerClass?: string | undefined;
            bodyClass?: string | undefined;
            footerClass?: string | undefined;
            modalClass?: string | undefined;
            loading?: boolean | undefined;
            hideHeader?: boolean | undefined;
            hideFooter?: boolean | undefined;
            centered?: boolean | undefined;
            fullscreen?: boolean | undefined;
            persistent?: boolean | undefined;
            hideXButton?: boolean | undefined;
            xButtonProps?: Record<string, any> | undefined;
            xIconClass?: string | undefined;
        }>, {
            modelValue: boolean;
            title: string;
            confirm: boolean;
            confirmColor: string;
            confirmProps: () => {};
            confirmText: string;
            closeText: string;
            closeProps: () => {};
            headerClass: string;
            bodyClass: string;
            footerClass: string;
            modalClass: string;
            boolean: boolean;
            hideHeader: boolean;
            hideFooter: boolean;
            centered: boolean;
            fullscreen: boolean;
            loading: boolean;
            persistent: boolean;
            hideXButton: boolean;
            xButtonProps: () => {};
            xIconClass: string;
        }>>> & {
            onConfirm?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onOpen?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "confirm" | "close" | "open")[], string, {
            title: string;
            modelValue: boolean;
            confirm: boolean;
            confirmColor: string;
            confirmProps: {};
            confirmText: string;
            closeText: string;
            closeProps: {};
            headerClass: string;
            bodyClass: string;
            footerClass: string;
            modalClass: string;
            loading: boolean;
            hideHeader: boolean;
            hideFooter: boolean;
            centered: boolean;
            fullscreen: boolean;
            persistent: boolean;
            hideXButton: boolean;
            xButtonProps: Record<string, any>;
            xIconClass: string;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
        modelValue?: boolean | undefined;
        title?: string | undefined;
        confirm?: boolean | undefined;
        confirmColor?: string | undefined;
        confirmProps?: {} | undefined;
        confirmText?: string | undefined;
        closeText?: string | undefined;
        closeProps?: {} | undefined;
        headerClass?: string | undefined;
        bodyClass?: string | undefined;
        footerClass?: string | undefined;
        modalClass?: string | undefined;
        loading?: boolean | undefined;
        hideHeader?: boolean | undefined;
        hideFooter?: boolean | undefined;
        centered?: boolean | undefined;
        fullscreen?: boolean | undefined;
        persistent?: boolean | undefined;
        hideXButton?: boolean | undefined;
        xButtonProps?: Record<string, any> | undefined;
        xIconClass?: string | undefined;
    }>, {
        modelValue: boolean;
        title: string;
        confirm: boolean;
        confirmColor: string;
        confirmProps: () => {};
        confirmText: string;
        closeText: string;
        closeProps: () => {};
        headerClass: string;
        bodyClass: string;
        footerClass: string;
        modalClass: string;
        boolean: boolean;
        hideHeader: boolean;
        hideFooter: boolean;
        centered: boolean;
        fullscreen: boolean;
        loading: boolean;
        persistent: boolean;
        hideXButton: boolean;
        xButtonProps: () => {};
        xIconClass: string;
    }>>> & {
        onConfirm?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    modelValue?: boolean | undefined;
    title?: string | undefined;
    confirm?: boolean | undefined;
    confirmColor?: string | undefined;
    confirmProps?: {} | undefined;
    confirmText?: string | undefined;
    closeText?: string | undefined;
    closeProps?: {} | undefined;
    headerClass?: string | undefined;
    bodyClass?: string | undefined;
    footerClass?: string | undefined;
    modalClass?: string | undefined;
    loading?: boolean | undefined;
    hideHeader?: boolean | undefined;
    hideFooter?: boolean | undefined;
    centered?: boolean | undefined;
    fullscreen?: boolean | undefined;
    persistent?: boolean | undefined;
    hideXButton?: boolean | undefined;
    xButtonProps?: Record<string, any> | undefined;
    xIconClass?: string | undefined;
}>, {
    modelValue: boolean;
    title: string;
    confirm: boolean;
    confirmColor: string;
    confirmProps: () => {};
    confirmText: string;
    closeText: string;
    closeProps: () => {};
    headerClass: string;
    bodyClass: string;
    footerClass: string;
    modalClass: string;
    boolean: boolean;
    hideHeader: boolean;
    hideFooter: boolean;
    centered: boolean;
    fullscreen: boolean;
    loading: boolean;
    persistent: boolean;
    hideXButton: boolean;
    xButtonProps: () => {};
    xIconClass: string;
}>>> & {
    onConfirm?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "confirm" | "close" | "open")[], "confirm" | "update:modelValue" | "close" | "open", {
    title: string;
    modelValue: boolean;
    confirm: boolean;
    confirmColor: string;
    confirmProps: {};
    confirmText: string;
    closeText: string;
    closeProps: {};
    headerClass: string;
    bodyClass: string;
    footerClass: string;
    modalClass: string;
    loading: boolean;
    hideHeader: boolean;
    hideFooter: boolean;
    centered: boolean;
    fullscreen: boolean;
    persistent: boolean;
    hideXButton: boolean;
    xButtonProps: Record<string, any>;
    xIconClass: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: typeof import('./VModal.vue.__VLS_template').default;
});
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
