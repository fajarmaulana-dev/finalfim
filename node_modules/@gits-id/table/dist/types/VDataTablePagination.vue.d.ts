import { PropType } from 'vue';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            modelValue: number;
            totalItems: number;
            itemsPerPage: number;
            itemsPerPageOptions: number[];
            showingText: string;
            backgroundColor: string;
            dataText: string;
            fromText: string;
            pagination: Partial<{
                modelValue: number;
                showFirst: boolean;
                showPrevious: boolean;
                showNext: boolean;
                showLast: boolean;
                totalItems: number;
                siblingCount: number;
                boundaryCount: number;
                itemsPerPage: number;
                activeClass: string;
                defaultClass: string;
                simple: boolean;
            }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: NumberConstructor;
                    default: number;
                };
                showFirst: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                showPrevious: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                showNext: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                showLast: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                totalItems: {
                    type: NumberConstructor;
                    default: number;
                };
                siblingCount: {
                    type: NumberConstructor;
                    default: number;
                };
                boundaryCount: {
                    type: NumberConstructor;
                    default: number;
                };
                itemsPerPage: {
                    type: NumberConstructor;
                    default: number;
                };
                activeClass: {
                    type: StringConstructor;
                    default: string;
                };
                defaultClass: {
                    type: StringConstructor;
                    default: string;
                };
                simple: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }>> & {
                "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "modelValue" | "showFirst" | "showPrevious" | "showNext" | "showLast" | "totalItems" | "siblingCount" | "boundaryCount" | "itemsPerPage" | "activeClass" | "defaultClass" | "simple">;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: NumberConstructor;
                default: number;
            };
            totalItems: {
                type: NumberConstructor;
                default: number;
            };
            itemsPerPage: {
                type: NumberConstructor;
                default: number;
            };
            itemsPerPageOptions: {
                type: PropType<number[]>;
                default: () => number[];
            };
            showingText: {
                type: StringConstructor;
                default: string;
            };
            backgroundColor: {
                type: StringConstructor;
                default: string;
            };
            dataText: {
                type: StringConstructor;
                default: string;
            };
            fromText: {
                type: StringConstructor;
                default: string;
            };
            pagination: {
                type: PropType<Partial<{
                    modelValue: number;
                    showFirst: boolean;
                    showPrevious: boolean;
                    showNext: boolean;
                    showLast: boolean;
                    totalItems: number;
                    siblingCount: number;
                    boundaryCount: number;
                    itemsPerPage: number;
                    activeClass: string;
                    defaultClass: string;
                    simple: boolean;
                }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: NumberConstructor;
                        default: number;
                    };
                    showFirst: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    showPrevious: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    showNext: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    showLast: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    totalItems: {
                        type: NumberConstructor;
                        default: number;
                    };
                    siblingCount: {
                        type: NumberConstructor;
                        default: number;
                    };
                    boundaryCount: {
                        type: NumberConstructor;
                        default: number;
                    };
                    itemsPerPage: {
                        type: NumberConstructor;
                        default: number;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    defaultClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    simple: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                }>> & {
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "modelValue" | "showFirst" | "showPrevious" | "showNext" | "showLast" | "totalItems" | "siblingCount" | "boundaryCount" | "itemsPerPage" | "activeClass" | "defaultClass" | "simple">>;
                default: () => {};
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onUpdate:itemsPerPage"?: ((...args: any[]) => any) | undefined;
            "onUpdate:perPage"?: ((...args: any[]) => any) | undefined;
            "onUpdate:itemsPerPageOptions"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "modelValue" | "totalItems" | "itemsPerPage" | "itemsPerPageOptions" | "showingText" | "backgroundColor" | "dataText" | "fromText" | "pagination">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "update:modelValue" | "update:itemsPerPage" | "update:perPage" | "update:itemsPerPageOptions", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: NumberConstructor;
                default: number;
            };
            totalItems: {
                type: NumberConstructor;
                default: number;
            };
            itemsPerPage: {
                type: NumberConstructor;
                default: number;
            };
            itemsPerPageOptions: {
                type: PropType<number[]>;
                default: () => number[];
            };
            showingText: {
                type: StringConstructor;
                default: string;
            };
            backgroundColor: {
                type: StringConstructor;
                default: string;
            };
            dataText: {
                type: StringConstructor;
                default: string;
            };
            fromText: {
                type: StringConstructor;
                default: string;
            };
            pagination: {
                type: PropType<Partial<{
                    modelValue: number;
                    showFirst: boolean;
                    showPrevious: boolean;
                    showNext: boolean;
                    showLast: boolean;
                    totalItems: number;
                    siblingCount: number;
                    boundaryCount: number;
                    itemsPerPage: number;
                    activeClass: string;
                    defaultClass: string;
                    simple: boolean;
                }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: NumberConstructor;
                        default: number;
                    };
                    showFirst: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    showPrevious: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    showNext: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    showLast: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    totalItems: {
                        type: NumberConstructor;
                        default: number;
                    };
                    siblingCount: {
                        type: NumberConstructor;
                        default: number;
                    };
                    boundaryCount: {
                        type: NumberConstructor;
                        default: number;
                    };
                    itemsPerPage: {
                        type: NumberConstructor;
                        default: number;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    defaultClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    simple: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                }>> & {
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "modelValue" | "showFirst" | "showPrevious" | "showNext" | "showLast" | "totalItems" | "siblingCount" | "boundaryCount" | "itemsPerPage" | "activeClass" | "defaultClass" | "simple">>;
                default: () => {};
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onUpdate:itemsPerPage"?: ((...args: any[]) => any) | undefined;
            "onUpdate:perPage"?: ((...args: any[]) => any) | undefined;
            "onUpdate:itemsPerPageOptions"?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:itemsPerPage" | "update:perPage" | "update:itemsPerPageOptions")[], string, {
            modelValue: number;
            totalItems: number;
            itemsPerPage: number;
            itemsPerPageOptions: number[];
            showingText: string;
            backgroundColor: string;
            dataText: string;
            fromText: string;
            pagination: Partial<{
                modelValue: number;
                showFirst: boolean;
                showPrevious: boolean;
                showNext: boolean;
                showLast: boolean;
                totalItems: number;
                siblingCount: number;
                boundaryCount: number;
                itemsPerPage: number;
                activeClass: string;
                defaultClass: string;
                simple: boolean;
            }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: NumberConstructor;
                    default: number;
                };
                showFirst: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                showPrevious: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                showNext: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                showLast: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                totalItems: {
                    type: NumberConstructor;
                    default: number;
                };
                siblingCount: {
                    type: NumberConstructor;
                    default: number;
                };
                boundaryCount: {
                    type: NumberConstructor;
                    default: number;
                };
                itemsPerPage: {
                    type: NumberConstructor;
                    default: number;
                };
                activeClass: {
                    type: StringConstructor;
                    default: string;
                };
                defaultClass: {
                    type: StringConstructor;
                    default: string;
                };
                simple: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }>> & {
                "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "modelValue" | "showFirst" | "showPrevious" | "showNext" | "showLast" | "totalItems" | "siblingCount" | "boundaryCount" | "itemsPerPage" | "activeClass" | "defaultClass" | "simple">;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: NumberConstructor;
            default: number;
        };
        totalItems: {
            type: NumberConstructor;
            default: number;
        };
        itemsPerPage: {
            type: NumberConstructor;
            default: number;
        };
        itemsPerPageOptions: {
            type: PropType<number[]>;
            default: () => number[];
        };
        showingText: {
            type: StringConstructor;
            default: string;
        };
        backgroundColor: {
            type: StringConstructor;
            default: string;
        };
        dataText: {
            type: StringConstructor;
            default: string;
        };
        fromText: {
            type: StringConstructor;
            default: string;
        };
        pagination: {
            type: PropType<Partial<{
                modelValue: number;
                showFirst: boolean;
                showPrevious: boolean;
                showNext: boolean;
                showLast: boolean;
                totalItems: number;
                siblingCount: number;
                boundaryCount: number;
                itemsPerPage: number;
                activeClass: string;
                defaultClass: string;
                simple: boolean;
            }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: NumberConstructor;
                    default: number;
                };
                showFirst: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                showPrevious: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                showNext: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                showLast: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                totalItems: {
                    type: NumberConstructor;
                    default: number;
                };
                siblingCount: {
                    type: NumberConstructor;
                    default: number;
                };
                boundaryCount: {
                    type: NumberConstructor;
                    default: number;
                };
                itemsPerPage: {
                    type: NumberConstructor;
                    default: number;
                };
                activeClass: {
                    type: StringConstructor;
                    default: string;
                };
                defaultClass: {
                    type: StringConstructor;
                    default: string;
                };
                simple: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }>> & {
                "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "modelValue" | "showFirst" | "showPrevious" | "showNext" | "showLast" | "totalItems" | "siblingCount" | "boundaryCount" | "itemsPerPage" | "activeClass" | "defaultClass" | "simple">>;
            default: () => {};
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onUpdate:itemsPerPage"?: ((...args: any[]) => any) | undefined;
        "onUpdate:perPage"?: ((...args: any[]) => any) | undefined;
        "onUpdate:itemsPerPageOptions"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    totalItems: {
        type: NumberConstructor;
        default: number;
    };
    itemsPerPage: {
        type: NumberConstructor;
        default: number;
    };
    itemsPerPageOptions: {
        type: PropType<number[]>;
        default: () => number[];
    };
    showingText: {
        type: StringConstructor;
        default: string;
    };
    backgroundColor: {
        type: StringConstructor;
        default: string;
    };
    dataText: {
        type: StringConstructor;
        default: string;
    };
    fromText: {
        type: StringConstructor;
        default: string;
    };
    pagination: {
        type: PropType<Partial<{
            modelValue: number;
            showFirst: boolean;
            showPrevious: boolean;
            showNext: boolean;
            showLast: boolean;
            totalItems: number;
            siblingCount: number;
            boundaryCount: number;
            itemsPerPage: number;
            activeClass: string;
            defaultClass: string;
            simple: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: NumberConstructor;
                default: number;
            };
            showFirst: {
                type: BooleanConstructor;
                default: boolean;
            };
            showPrevious: {
                type: BooleanConstructor;
                default: boolean;
            };
            showNext: {
                type: BooleanConstructor;
                default: boolean;
            };
            showLast: {
                type: BooleanConstructor;
                default: boolean;
            };
            totalItems: {
                type: NumberConstructor;
                default: number;
            };
            siblingCount: {
                type: NumberConstructor;
                default: number;
            };
            boundaryCount: {
                type: NumberConstructor;
                default: number;
            };
            itemsPerPage: {
                type: NumberConstructor;
                default: number;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            defaultClass: {
                type: StringConstructor;
                default: string;
            };
            simple: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "modelValue" | "showFirst" | "showPrevious" | "showNext" | "showLast" | "totalItems" | "siblingCount" | "boundaryCount" | "itemsPerPage" | "activeClass" | "defaultClass" | "simple">>;
        default: () => {};
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemsPerPage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:perPage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemsPerPageOptions"?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:itemsPerPage" | "update:perPage" | "update:itemsPerPageOptions")[], "update:modelValue" | "update:itemsPerPage" | "update:perPage" | "update:itemsPerPageOptions", {
    modelValue: number;
    totalItems: number;
    itemsPerPage: number;
    itemsPerPageOptions: number[];
    showingText: string;
    backgroundColor: string;
    dataText: string;
    fromText: string;
    pagination: Partial<{
        modelValue: number;
        showFirst: boolean;
        showPrevious: boolean;
        showNext: boolean;
        showLast: boolean;
        totalItems: number;
        siblingCount: number;
        boundaryCount: number;
        itemsPerPage: number;
        activeClass: string;
        defaultClass: string;
        simple: boolean;
    }> & Omit<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: NumberConstructor;
            default: number;
        };
        showFirst: {
            type: BooleanConstructor;
            default: boolean;
        };
        showPrevious: {
            type: BooleanConstructor;
            default: boolean;
        };
        showNext: {
            type: BooleanConstructor;
            default: boolean;
        };
        showLast: {
            type: BooleanConstructor;
            default: boolean;
        };
        totalItems: {
            type: NumberConstructor;
            default: number;
        };
        siblingCount: {
            type: NumberConstructor;
            default: number;
        };
        boundaryCount: {
            type: NumberConstructor;
            default: number;
        };
        itemsPerPage: {
            type: NumberConstructor;
            default: number;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        defaultClass: {
            type: StringConstructor;
            default: string;
        };
        simple: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "modelValue" | "showFirst" | "showPrevious" | "showNext" | "showLast" | "totalItems" | "siblingCount" | "boundaryCount" | "itemsPerPage" | "activeClass" | "defaultClass" | "simple">;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: typeof import('./VDataTablePagination.vue.__VLS_template').default;
});
export default _default;
