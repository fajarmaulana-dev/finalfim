declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            text: boolean;
            size: string;
            color: string;
            to: string | Record<string, any>;
            href: string;
            outlined: boolean;
            rounded: boolean;
            disabled: boolean;
            ring: boolean;
            tile: boolean;
            icon: boolean;
            block: boolean;
            type: string;
            solid: boolean;
            noRing: boolean;
            loading: boolean;
            loadingText: string;
            newTab: boolean;
            shadow: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            size: {
                type: StringConstructor;
                default: string;
                validator: (v: string) => boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: (StringConstructor | ObjectConstructor)[];
                default: string;
            };
            href: {
                type: StringConstructor;
                default: string;
            };
            text: {
                type: BooleanConstructor;
                default: boolean;
            };
            outlined: {
                type: BooleanConstructor;
                default: boolean;
            };
            rounded: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            ring: {
                type: BooleanConstructor;
                default: boolean;
            };
            tile: {
                type: BooleanConstructor;
                default: boolean;
            };
            icon: {
                type: BooleanConstructor;
                default: boolean;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            solid: {
                type: BooleanConstructor;
                default: boolean;
            };
            noRing: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            loadingText: {
                type: StringConstructor;
                default: string;
            };
            newTab: {
                type: BooleanConstructor;
                default: boolean;
            };
            shadow: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "text" | "size" | "color" | "to" | "href" | "outlined" | "rounded" | "disabled" | "ring" | "tile" | "icon" | "block" | "type" | "solid" | "noRing" | "loading" | "loadingText" | "newTab" | "shadow">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            size: {
                type: StringConstructor;
                default: string;
                validator: (v: string) => boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: (StringConstructor | ObjectConstructor)[];
                default: string;
            };
            href: {
                type: StringConstructor;
                default: string;
            };
            text: {
                type: BooleanConstructor;
                default: boolean;
            };
            outlined: {
                type: BooleanConstructor;
                default: boolean;
            };
            rounded: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            ring: {
                type: BooleanConstructor;
                default: boolean;
            };
            tile: {
                type: BooleanConstructor;
                default: boolean;
            };
            icon: {
                type: BooleanConstructor;
                default: boolean;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            solid: {
                type: BooleanConstructor;
                default: boolean;
            };
            noRing: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            loadingText: {
                type: StringConstructor;
                default: string;
            };
            newTab: {
                type: BooleanConstructor;
                default: boolean;
            };
            shadow: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            text: boolean;
            size: string;
            color: string;
            to: string | Record<string, any>;
            href: string;
            outlined: boolean;
            rounded: boolean;
            disabled: boolean;
            ring: boolean;
            tile: boolean;
            icon: boolean;
            block: boolean;
            type: string;
            solid: boolean;
            noRing: boolean;
            loading: boolean;
            loadingText: string;
            newTab: boolean;
            shadow: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        size: {
            type: StringConstructor;
            default: string;
            validator: (v: string) => boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: (StringConstructor | ObjectConstructor)[];
            default: string;
        };
        href: {
            type: StringConstructor;
            default: string;
        };
        text: {
            type: BooleanConstructor;
            default: boolean;
        };
        outlined: {
            type: BooleanConstructor;
            default: boolean;
        };
        rounded: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        ring: {
            type: BooleanConstructor;
            default: boolean;
        };
        tile: {
            type: BooleanConstructor;
            default: boolean;
        };
        icon: {
            type: BooleanConstructor;
            default: boolean;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        solid: {
            type: BooleanConstructor;
            default: boolean;
        };
        noRing: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        loadingText: {
            type: StringConstructor;
            default: string;
        };
        newTab: {
            type: BooleanConstructor;
            default: boolean;
        };
        shadow: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    size: {
        type: StringConstructor;
        default: string;
        validator: (v: string) => boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    to: {
        type: (StringConstructor | ObjectConstructor)[];
        default: string;
    };
    href: {
        type: StringConstructor;
        default: string;
    };
    text: {
        type: BooleanConstructor;
        default: boolean;
    };
    outlined: {
        type: BooleanConstructor;
        default: boolean;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    ring: {
        type: BooleanConstructor;
        default: boolean;
    };
    tile: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: BooleanConstructor;
        default: boolean;
    };
    block: {
        type: BooleanConstructor;
        default: boolean;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    solid: {
        type: BooleanConstructor;
        default: boolean;
    };
    noRing: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingText: {
        type: StringConstructor;
        default: string;
    };
    newTab: {
        type: BooleanConstructor;
        default: boolean;
    };
    shadow: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    text: boolean;
    size: string;
    color: string;
    to: string | Record<string, any>;
    href: string;
    outlined: boolean;
    rounded: boolean;
    disabled: boolean;
    ring: boolean;
    tile: boolean;
    icon: boolean;
    block: boolean;
    type: string;
    solid: boolean;
    noRing: boolean;
    loading: boolean;
    loadingText: string;
    newTab: boolean;
    shadow: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: typeof import('./VBtn.vue.__VLS_template').default;
});
export default _default;
