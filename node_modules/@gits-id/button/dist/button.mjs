import { defineComponent as k, toRefs as V, computed as a, openBlock as d, createBlock as S, resolveDynamicComponent as C, unref as t, mergeProps as z, withCtx as T, renderSlot as c, createVNode as R, createElementBlock as j, toDisplayString as _, createCommentVNode as $ } from "vue";
import D from "@gits-id/spinner";
const N = {
  key: 0,
  class: "ml-2"
}, H = /* @__PURE__ */ k({
  __name: "VBtn",
  props: {
    size: {
      type: String,
      default: "md",
      validator: (o) => ["xs", "sm", "md", "lg", "xl"].includes(o)
    },
    color: {
      type: String,
      default: "default"
    },
    to: {
      type: [String, Object],
      default: ""
    },
    href: {
      type: String,
      default: ""
    },
    text: {
      type: Boolean,
      default: !1
    },
    outlined: {
      type: Boolean,
      default: !1
    },
    rounded: {
      type: Boolean,
      default: !1
    },
    disabled: {
      type: Boolean,
      default: !1
    },
    ring: {
      type: Boolean,
      default: !0
    },
    tile: {
      type: Boolean,
      default: !1
    },
    icon: {
      type: Boolean,
      default: !1
    },
    block: {
      type: Boolean,
      default: !1
    },
    type: {
      type: String,
      default: "button"
    },
    solid: {
      type: Boolean,
      default: !1
    },
    noRing: {
      type: Boolean,
      default: !1
    },
    loading: {
      type: Boolean,
      default: !1
    },
    loadingText: {
      type: String,
      default: ""
    },
    newTab: {
      type: Boolean,
      default: !1
    },
    shadow: {
      type: Boolean,
      default: !1
    }
  },
  setup(o) {
    const e = o, { disabled: b, loading: s, loadingText: i } = V(e), l = a(() => e.to ? "router-link" : e.href ? "a" : "button"), g = a(() => {
      const r = {};
      return e.to ? r.to = e.to : e.href ? r.href = e.href : r.type = e.type, r;
    }), y = a(() => {
      switch (e.color) {
        case "primary":
        case "info":
        case "warning":
        case "error":
        case "success":
          return "white";
        case "white":
          return "black";
        default:
          return e.color;
      }
    }), v = {
      default: "border-gray-400 text-gray-700 bg-white hover:border-gray-500 active:bg-gray-50 active:border-gray-600 active:text-gray-600",
      primary: "border-primary-500 bg-primary-500 text-white hover:bg-primary-600 hover:border-primary-600 active:bg-primary-400 active:border-primary-400",
      secondary: "border-secondary-500 bg-secondary-500 text-white hover:bg-secondary-600 hover:border-secondary-600 active:bg-secondary-400 active:border-secondary-400",
      info: "border-info-500 bg-info-500 text-white hover:bg-info-600 hover:border-info-600 active:bg-info-400 active:border-info-400",
      warning: "border-warning-500 bg-warning-500 text-white hover:bg-warning-600 hover:border-warning-600 active:bg-warning-400 active:border-warning-400",
      success: "border-success-500 bg-success-500 text-white hover:bg-success-600 hover:border-success-600 active:bg-success-400 active:border-success-400",
      error: "border-error-500 bg-error-500 text-white hover:bg-error-600 hover:border-error-600 active:bg-error-400 active:border-error-400",
      dark: "border-gray-800 bg-gray-800 text-white hover:bg-gray-900 hover:border-gray-900 active:bg-gray-700 active:border-gray-700"
    }, p = {
      default: "border-gray-400 text-gray-700 hover:bg-gray-700 hover:border-gray-700 hover:text-white active:bg-gray-50 active:border-gray-600 active:text-gray-600",
      primary: "border-primary-500 bg-transparent text-primary-500 hover:bg-primary-600 hover:border-primary-600 hover:text-white active:bg-primary-400 active:border-primary-400",
      secondary: "border-secondary-500 bg-transparent text-secondary-500 hover:bg-secondary-600 hover:border-secondary-600 hover:text-white active:bg-secondary-400 active:border-secondary-400",
      info: "border-info-500 bg-transparent text-info-500 hover:bg-info-600 hover:border-info-600 hover:text-white active:bg-info-400 active:border-info-400",
      warning: "border-warning-500 bg-transparent text-warning-500 hover:bg-warning-600 hover:border-warning-600 hover:text-white active:bg-warning-400 active:border-warning-400",
      success: "border-success-500 bg-transparent text-success-500 hover:bg-success-600 hover:border-success-600 hover:text-white active:bg-success-400 active:border-success-400",
      error: "border-error-500 bg-transparent text-error-500 hover:bg-error-600 hover:border-error-600 hover:text-white active:bg-error-400 active:border-error-400",
      dark: "border-gray-800 bg-transparent text-gray-800 hover:bg-gray-900 hover:border-gray-900 hover:text-white active:bg-gray-700 active:border-gray-700"
    }, u = {
      default: "border-transparent bg-transparent text-gray-700 hover:text-gray-900 active:text-gray-600",
      primary: "border-transparent bg-transparent text-primary-500 hover:text-primary-600 active:text-primary-400",
      secondary: "border-transparent bg-transparent text-secondary-500 hover:text-secondary-600 active:text-secondary-400",
      info: "border-transparent bg-transparent text-info-500 hover:text-info-600 active:text-info-400",
      warning: "border-transparent bg-transparent text-warning-500 hover:text-warning-600 active:text-warning-400",
      success: "border-transparent bg-transparent text-success-500 hover:text-success-600 active:text-success-400",
      error: "border-transparent bg-transparent text-error-500 hover:text-error-600 active:text-error-400",
      dark: "border-transparent bg-transparent text-gray-800 hover:text-gray-900 active:text-gray-600"
    }, f = {
      xs: "px-2 py-1 text-xs",
      sm: "px-3 py-1.5 text-sm",
      md: "px-4 py-2 text-base",
      lg: "px-5 py-3 text-lg",
      xl: "px-6 py-4 text-xl"
    }, h = {
      default: "",
      primary: "focus:ring-primary-300",
      secondary: "focus:ring-secondary-300",
      info: "focus:ring-info-300",
      warning: "focus:ring-warning-300",
      success: "focus:ring-success-300",
      error: "focus:ring-error-300",
      dark: "focus:ring-gray-300"
    }, x = a(() => {
      let r = v[e.color];
      return e.outlined ? r = p[e.color] : e.text && (r = u[e.color]), r;
    }), w = a(() => {
      let r = "disabled:cursor-not-allowed disabled:shadow-none disabled:text-gray-400";
      e.outlined ? r += " disabled:border-gray-300 disabled:hover:bg-transparent disabled:hover:text-gray-400" : r += " disabled:bg-gray-300 disabled:border-gray-300";
      const n = {
        default: "disabled:hover:bg-transparent disabled:active:bg-transparent",
        primary: "disabled:hover:bg-primary-500 disabled:hover:border-primary-500 disabled:active:bg-primary-500",
        secondary: "disabled:hover:bg-secondary-500 disabled:hover:border-secondary-500 disabled:active:bg-secondary-500",
        info: "disabled:hover:bg-info-500 disabled:hover:border-info-500 disabled:active:bg-info-500",
        warning: "disabled:hover:bg-warning-500 disabled:hover:border-warning-500 disabled:active:bg-warning-500",
        error: "disabled:hover:bg-error-500 disabled:hover:border-error-500 disabled:active:bg-error-500",
        success: "disabled:hover:bg-success-500 disabled:hover:border-success-500 disabled:active:bg-success-500",
        dark: "disabled:hover:bg-gray-800 disabled:hover:border-gray-800 disabled:active:bg-gray-800"
      };
      return e.loading ? [
        "disabled:cursor-not-allowed disabled:shadow-none",
        n[e.color]
      ] : r;
    }), m = a(() => {
      const r = {
        xs: "w-[26px] h-[26px]",
        sm: "w-[34px] h-[34px]",
        md: "w-[42px] h-[42px]",
        lg: "w-[54px] h-[54px]",
        xl: "w-[62px] h-[62px]"
      }, n = {
        xs: "px-1",
        sm: "px-1.5",
        md: "px-2",
        lg: "px-2.5",
        xl: "px-3"
      };
      return [
        r[e.size],
        e.text ? "p-0" : n[e.size]
      ].join(" ");
    }), B = a(() => [
      "inline-flex justify-center items-center border rounded-md font-medium transition duration-300",
      w.value,
      x.value,
      {
        "focus:ring focus:ring-offset-2 focus:outline-none": !e.noRing,
        [h[e.color]]: !e.noRing,
        "rounded-full": e.rounded,
        "rounded-none": e.tile,
        shadow: e.shadow,
        "w-full": e.block,
        "btn-loading": e.loading,
        [f[e.size]]: !e.icon,
        [m.value]: e.icon
      }
    ]);
    return (r, n) => (d(), S(C(t(l)), z({
      class: t(B),
      rel: o.newTab ? "noopener" : "",
      target: o.newTab ? "_blank" : "",
      disabled: t(b) || t(s)
    }, { ...t(g), ...r.$attrs }), {
      default: T(() => [
        t(s) ? c(r.$slots, "loading", { key: 0 }, () => [
          R(t(D), { color: t(y) }, null, 8, ["color"]),
          t(i) ? (d(), j("span", N, _(t(i)), 1)) : $("", !0)
        ]) : c(r.$slots, "default", { key: 1 })
      ]),
      _: 3
    }, 16, ["class", "rel", "target", "disabled"]));
  }
});
export {
  H as VBtn,
  H as default
};
