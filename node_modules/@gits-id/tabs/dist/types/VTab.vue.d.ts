declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            item: Record<string, any>;
            index: number;
            active: boolean;
            removeable: boolean;
            getRef: Function;
            vertical: boolean;
            activeClass: string;
            inactiveClass: string;
            defaultClass: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            item: {
                type: ObjectConstructor;
                default: null;
            };
            index: {
                type: NumberConstructor;
                default: number;
            };
            active: {
                type: BooleanConstructor;
                default: boolean;
            };
            removeable: {
                type: BooleanConstructor;
                default: boolean;
            };
            getRef: {
                type: FunctionConstructor;
                default: undefined;
            };
            vertical: {
                type: BooleanConstructor;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            inactiveClass: {
                type: StringConstructor;
                default: string;
            };
            defaultClass: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
            onRemove?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "item" | "index" | "active" | "removeable" | "getRef" | "vertical" | "activeClass" | "inactiveClass" | "defaultClass">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "click" | "remove", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            item: {
                type: ObjectConstructor;
                default: null;
            };
            index: {
                type: NumberConstructor;
                default: number;
            };
            active: {
                type: BooleanConstructor;
                default: boolean;
            };
            removeable: {
                type: BooleanConstructor;
                default: boolean;
            };
            getRef: {
                type: FunctionConstructor;
                default: undefined;
            };
            vertical: {
                type: BooleanConstructor;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            inactiveClass: {
                type: StringConstructor;
                default: string;
            };
            defaultClass: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
            onRemove?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "remove")[], string, {
            item: Record<string, any>;
            index: number;
            active: boolean;
            removeable: boolean;
            getRef: Function;
            vertical: boolean;
            activeClass: string;
            inactiveClass: string;
            defaultClass: string;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        item: {
            type: ObjectConstructor;
            default: null;
        };
        index: {
            type: NumberConstructor;
            default: number;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        removeable: {
            type: BooleanConstructor;
            default: boolean;
        };
        getRef: {
            type: FunctionConstructor;
            default: undefined;
        };
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        inactiveClass: {
            type: StringConstructor;
            default: string;
        };
        defaultClass: {
            type: StringConstructor;
            default: string;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
        onRemove?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    item: {
        type: ObjectConstructor;
        default: null;
    };
    index: {
        type: NumberConstructor;
        default: number;
    };
    active: {
        type: BooleanConstructor;
        default: boolean;
    };
    removeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    getRef: {
        type: FunctionConstructor;
        default: undefined;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    activeClass: {
        type: StringConstructor;
        default: string;
    };
    inactiveClass: {
        type: StringConstructor;
        default: string;
    };
    defaultClass: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    onClick?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "remove")[], "click" | "remove", {
    item: Record<string, any>;
    index: number;
    active: boolean;
    removeable: boolean;
    getRef: Function;
    vertical: boolean;
    activeClass: string;
    inactiveClass: string;
    defaultClass: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: typeof import('./VTab.vue.__VLS_template').default;
});
export default _default;
