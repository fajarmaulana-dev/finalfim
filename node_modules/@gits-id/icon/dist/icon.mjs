import { defineComponent as d, ref as r, watch as _, computed as u, openBlock as o, createElementBlock as m, normalizeClass as p, unref as n, normalizeStyle as f, createBlock as y, toDisplayString as v } from "vue";
import { Icon as h } from "@iconify/vue/dist/offline";
import { loadIcon as z } from "@iconify/vue";
const x = ["xxs", "xs", "sm", "md", "lg", "xl"];
const g = { key: 2 }, C = d({
  __name: "Icon",
  props: {
    name: null,
    size: { default: "md" }
  },
  setup(c) {
    const e = c, s = r(!1), t = r();
    async function l() {
      s.value = !0, t.value = await z(e.name).catch(() => {
      }), s.value = !1;
    }
    _(() => e.name, l);
    const a = u(() => `v-icon v-icon--${e.size}`), i = u(() => x.includes(String(e.size)) ? {} : {
      width: e.size,
      height: e.size
    });
    return l(), (k, I) => s.value ? (o(), m("span", {
      key: 0,
      class: p(n(a)),
      style: f(n(i))
    }, null, 6)) : t.value ? (o(), y(n(h), {
      key: 1,
      icon: t.value,
      class: p(n(a)),
      style: f(n(i))
    }, null, 8, ["icon", "class", "style"])) : (o(), m("span", g, v(c.name), 1));
  }
});
export {
  C as Icon,
  C as default
};
