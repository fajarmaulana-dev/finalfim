import { defineComponent as k, toRefs as y, watch as h, computed as v, openBlock as i, createElementBlock as c, normalizeClass as m, unref as l, toDisplayString as b, createCommentVNode as g, createVNode as x, isRef as E } from "vue";
import { useField as M } from "vee-validate";
import w from "@ckeditor/ckeditor5-build-classic";
import { component as B } from "@ckeditor/ckeditor5-vue";
const L = {
  toolbar: [
    "heading",
    "|",
    "bold",
    "italic",
    "link",
    "bulletedList",
    "numberedList",
    "blockQuote",
    "|",
    "indent",
    "outdent",
    "|",
    "insertTable",
    "|",
    "undo",
    "redo"
  ]
};
const N = (e, a) => {
  const t = e.__vccOpts || e;
  for (const [r, s] of a)
    t[r] = s;
  return t;
}, R = ["for"], z = /* @__PURE__ */ k({
  __name: "VEditor",
  props: {
    modelValue: { default: "" },
    value: { default: "" },
    name: { default: "" },
    rules: null,
    label: null,
    labelClass: { default: "block mb-2" },
    wrapperClass: null,
    error: { type: Boolean },
    errorClass: { default: "text-error-600 mt-1 text-sm" },
    errorMessages: { default: () => [] },
    readonly: null
  },
  emits: ["update:modelValue", "update:value", "change", "input", "blur"],
  setup(e, { emit: a }) {
    const t = e, { modelValue: r, value: s, name: d, rules: V } = y(t), { value: n, errorMessage: f } = M(d, V, {
      initialValue: r.value || s.value
    });
    h([r, s], ([p, u]) => {
      const o = p || u;
      n.value = o, a("update:modelValue", o), a("update:value", o), a("change", o), a("input", o);
    });
    const C = v(
      () => t.error || t.errorMessages.length > 0 || !!f.value
    ), _ = v(() => t.errorMessages[0] || f.value);
    return (p, u) => (i(), c("div", {
      class: m(e.wrapperClass)
    }, [
      e.label ? (i(), c("label", {
        key: 0,
        for: l(d),
        class: m(e.labelClass)
      }, b(e.label), 11, R)) : g("", !0),
      x(l(B), {
        id: l(d),
        modelValue: l(n),
        "onUpdate:modelValue": u[0] || (u[0] = (o) => E(n) ? n.value = o : null),
        editor: l(w),
        config: l(L)
      }, null, 8, ["id", "modelValue", "editor", "config"]),
      l(C) ? (i(), c("div", {
        key: 1,
        class: m(e.errorClass)
      }, b(l(_)), 3)) : g("", !0)
    ], 2));
  }
}), Q = /* @__PURE__ */ N(z, [["__scopeId", "data-v-2b0f323a"]]);
export {
  Q as VEditor,
  Q as default
};
