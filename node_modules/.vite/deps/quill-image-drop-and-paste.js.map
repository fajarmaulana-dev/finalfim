{
  "version": 3,
  "sources": ["../../quill-image-drop-and-paste/dist/quill-image-drop-and-paste.esm.js", "dep:quill-image-drop-and-paste"],
  "sourcesContent": ["var utils = {\r\n    /* generate a filename\r\n     */\r\n    generateFilename() {\r\n        return btoa(String(Math.random() * 1e6) + String(+new Date())).replace('=', '');\r\n    },\r\n    /* detect the giving url is a image\r\n     */\r\n    urlIsImage(url, abortTimeout = 3000) {\r\n        if (!this.validURL(url)) {\r\n            return Promise.reject(false);\r\n        }\r\n        if (/\\.(jpeg|jpg|gif|png|webp|tiff|bmp)$/.test(url)) {\r\n            return Promise.resolve(true);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            let timer = undefined;\r\n            const img = new Image();\r\n            img.onerror = img.onabort = () => {\r\n                clearTimeout(timer);\r\n                reject(false);\r\n            };\r\n            img.onload = () => {\r\n                clearTimeout(timer);\r\n                resolve(true);\r\n            };\r\n            timer = setTimeout(() => {\r\n                img.src = '//!/an/invalid.jpg';\r\n                reject(false);\r\n            }, abortTimeout);\r\n            img.src = url;\r\n        });\r\n    },\r\n    /* check string is a valid url\r\n     */\r\n    validURL(str) {\r\n        try {\r\n            return Boolean(new URL(str));\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    },\r\n    /* check the giving string is a html text\r\n     */\r\n    isRichText(clipboardDataItems) {\r\n        let isHtml = false;\r\n        Array.prototype.forEach.call(clipboardDataItems, (item) => {\r\n            if (item.type.match(/^text\\/html$/i)) {\r\n                isHtml = true;\r\n            }\r\n        });\r\n        return isHtml;\r\n    },\r\n    /* resolve dataUrl to base64 string\r\n     */\r\n    resolveDataUrl(dataUrl, type) {\r\n        let str = '';\r\n        if (typeof dataUrl === 'string') {\r\n            str = dataUrl;\r\n        }\r\n        else if (dataUrl instanceof ArrayBuffer) {\r\n            str = this.arrayBufferToBase64Url(dataUrl, type);\r\n        }\r\n        return str;\r\n    },\r\n    /* generate array buffer from binary string\r\n     */\r\n    binaryStringToArrayBuffer(binary) {\r\n        const len = binary.length;\r\n        const buffer = new ArrayBuffer(len);\r\n        const arr = new Uint8Array(buffer);\r\n        let i = -1;\r\n        while (++i < len)\r\n            arr[i] = binary.charCodeAt(i);\r\n        return buffer;\r\n    },\r\n    /* generate base64 string from array buffer\r\n     */\r\n    arrayBufferToBase64Url(arrayBuffer, type) {\r\n        return (`data:${type};base64,` +\r\n            btoa(new Uint8Array(arrayBuffer).reduce((acc, byte) => acc + String.fromCharCode(byte), '')));\r\n    },\r\n    /* copy text - make text store in the clipboard\r\n     */\r\n    copyText(content, target = document.body) {\r\n        const element = document.createElement('textarea');\r\n        const previouslyFocusedElement = document.activeElement;\r\n        element.value = content;\r\n        // Prevent keyboard from showing on mobile\r\n        element.setAttribute('readonly', '');\r\n        element.style.position = 'absolute';\r\n        element.style.left = '-9999px';\r\n        element.style.fontSize = '12pt'; // Prevent zooming on iOS\r\n        const selection = document.getSelection();\r\n        let originalRange = false;\r\n        if (selection && selection.rangeCount > 0) {\r\n            originalRange = selection.getRangeAt(0);\r\n        }\r\n        target.append(element);\r\n        element.select();\r\n        // Explicit selection workaround for iOS\r\n        element.selectionStart = 0;\r\n        element.selectionEnd = content.length;\r\n        let isSuccess = false;\r\n        try {\r\n            isSuccess = document.execCommand('copy');\r\n        }\r\n        catch (_a) { }\r\n        element.remove();\r\n        if (selection && originalRange) {\r\n            selection.removeAllRanges();\r\n            selection.addRange(originalRange);\r\n        }\r\n        // Get the focus back on the previously focused element, if any\r\n        if (previouslyFocusedElement) {\r\n            previouslyFocusedElement.focus();\r\n        }\r\n        return isSuccess;\r\n    },\r\n    /* check the type of specify target\r\n     */\r\n    isType(target, type) {\r\n        return Object.prototype.toString.call(target) === `[object ${type}]`;\r\n    },\r\n};\n\nclass QuillImageData {\r\n    constructor(dataUrl, type, name) {\r\n        this.dataUrl = dataUrl;\r\n        this.type = type;\r\n        this.name = name || '';\r\n    }\r\n}\r\nclass ImageData extends QuillImageData {\r\n    constructor(dataUrl, type, name) {\r\n        super(dataUrl, type, name);\r\n        this.dataUrl = dataUrl;\r\n        this.type = type;\r\n        this.name = name || `${utils.generateFilename()}.${this.getSuffix()}`;\r\n    }\r\n    /* minify the image\r\n     */\r\n    minify(option) {\r\n        return new Promise((resolve, reject) => {\r\n            const maxWidth = option.maxWidth || 800;\r\n            const maxHeight = option.maxHeight || 800;\r\n            const quality = option.quality || 0.8;\r\n            if (!this.dataUrl) {\r\n                return reject({\r\n                    message: '[error] QuillImageDropAndPaste: Fail to minify the image, dataUrl should not be empty.',\r\n                });\r\n            }\r\n            const image = new Image();\r\n            image.onload = () => {\r\n                const width = image.width;\r\n                const height = image.height;\r\n                if (width > height) {\r\n                    if (width > maxWidth) {\r\n                        image.height = (height * maxWidth) / width;\r\n                        image.width = maxWidth;\r\n                    }\r\n                }\r\n                else {\r\n                    if (height > maxHeight) {\r\n                        image.width = (width * maxHeight) / height;\r\n                        image.height = maxHeight;\r\n                    }\r\n                }\r\n                const canvas = document.createElement('canvas');\r\n                canvas.width = image.width;\r\n                canvas.height = image.height;\r\n                const ctx = canvas.getContext('2d');\r\n                if (ctx) {\r\n                    ctx.drawImage(image, 0, 0, image.width, image.height);\r\n                    const canvasType = this.type || 'image/png';\r\n                    const canvasDataUrl = canvas.toDataURL(canvasType, quality);\r\n                    resolve(new ImageData(canvasDataUrl, canvasType, this.name));\r\n                }\r\n                else {\r\n                    reject({\r\n                        message: '[error] QuillImageDropAndPaste: Fail to minify the image, create canvas context failure.',\r\n                    });\r\n                }\r\n            };\r\n            image.src = utils.resolveDataUrl(this.dataUrl, this.type);\r\n        });\r\n    }\r\n    /* convert blob to file\r\n     */\r\n    toFile(filename) {\r\n        filename = filename || this.name;\r\n        if (!window.File) {\r\n            console.error('[error] QuillImageDropAndPaste: Your browser didnot support File API.');\r\n            return null;\r\n        }\r\n        return new File([this.toBlob()], filename, { type: this.type });\r\n    }\r\n    /* convert dataURL to blob\r\n     */\r\n    toBlob() {\r\n        const base64 = utils.resolveDataUrl(this.dataUrl, this.type).replace(/^[^,]+,/, '');\r\n        const buff = utils.binaryStringToArrayBuffer(atob(base64));\r\n        return this.createBlob([buff], { type: this.type });\r\n    }\r\n    /* create blob\r\n     */\r\n    createBlob(parts, properties) {\r\n        if (!properties)\r\n            properties = {};\r\n        if (typeof properties === 'string')\r\n            properties = { type: properties };\r\n        try {\r\n            return new Blob(parts, properties);\r\n        }\r\n        catch (e) {\r\n            if (e.name !== 'TypeError')\r\n                throw e;\r\n            const Builder = 'BlobBuilder' in window\r\n                ? window.BlobBuilder\r\n                : 'MSBlobBuilder' in window\r\n                    ? window.MSBlobBuilder\r\n                    : 'MozBlobBuilder' in window\r\n                        ? window.MozBlobBuilder\r\n                        : window.WebKitBlobBuilder;\r\n            const builder = new Builder();\r\n            for (let i = 0; i < parts.length; i++)\r\n                builder.append(parts[i]);\r\n            return builder.getBlob(properties.type);\r\n        }\r\n    }\r\n    getSuffix() {\r\n        const matched = this.type.match(/^image\\/(\\w+)$/);\r\n        const suffix = matched ? matched[1] : 'png';\r\n        return suffix;\r\n    }\r\n}\n\nclass QuillImageDropAndPaste {\r\n    constructor(quill, option) {\r\n        this.quill = quill;\r\n        this.option = option;\r\n    }\r\n}\r\nclass ImageDropAndPaste extends QuillImageDropAndPaste {\r\n    constructor(quill, option) {\r\n        super(quill, option);\r\n        this.quill = quill;\r\n        this.option = option;\r\n        this.handleDrop = this.handleDrop.bind(this);\r\n        this.handlePaste = this.handlePaste.bind(this);\r\n        this.insert = this.insert.bind(this);\r\n        this.quill.root.addEventListener('drop', this.handleDrop, false);\r\n        this.quill.root.addEventListener('paste', this.handlePaste, false);\r\n    }\r\n    /* handle image drop event\r\n     */\r\n    handleDrop(e) {\r\n        if (e.dataTransfer && e.dataTransfer.files && e.dataTransfer.files.length) {\r\n            e.preventDefault();\r\n            if (document.caretRangeFromPoint) {\r\n                const selection = document.getSelection();\r\n                const range = document.caretRangeFromPoint(e.clientX, e.clientY);\r\n                if (selection && range) {\r\n                    selection.setBaseAndExtent(range.startContainer, range.startOffset, range.startContainer, range.startOffset);\r\n                }\r\n            }\r\n            this.readFiles(e.dataTransfer.files, (dataUrl, type = 'image/png', name) => {\r\n                if (typeof this.option.handler === 'function') {\r\n                    this.option.handler.call(this, dataUrl, type, new ImageData(dataUrl, type, name));\r\n                }\r\n                else {\r\n                    this.insert.call(this, utils.resolveDataUrl(dataUrl, type), type);\r\n                }\r\n            }, e);\r\n        }\r\n    }\r\n    /* handle image paste event\r\n     */\r\n    handlePaste(e) {\r\n        if (e.clipboardData && e.clipboardData.items && e.clipboardData.items.length) {\r\n            if (utils.isRichText(e.clipboardData.items))\r\n                return;\r\n            this.readFiles(e.clipboardData.items, (dataUrl, type = 'image/png') => {\r\n                if (typeof this.option.handler === 'function') {\r\n                    this.option.handler.call(this, dataUrl, type, new ImageData(dataUrl, type));\r\n                }\r\n                else {\r\n                    this.insert(utils.resolveDataUrl(dataUrl, type), 'image');\r\n                }\r\n            }, e);\r\n        }\r\n    }\r\n    /* read the files\r\n     */\r\n    readFiles(files, callback, e) {\r\n        Array.prototype.forEach.call(files, (file) => {\r\n            if (utils.isType(file, 'DataTransferItem')) {\r\n                this.handleDataTransfer(file, callback, e);\r\n            }\r\n            else if (file instanceof File) {\r\n                this.handleDroppedFile(file, callback, e);\r\n            }\r\n        });\r\n    }\r\n    /* handle the pasted data\r\n     */\r\n    handleDataTransfer(file, callback, e) {\r\n        const that = this;\r\n        const { type } = file;\r\n        if (type.match(/^image\\/(gif|jpe?g|a?png|svg|webp|bmp)/i)) {\r\n            e.preventDefault();\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                if (e.target && e.target.result) {\r\n                    callback(e.target.result, type);\r\n                }\r\n            };\r\n            const blob = file.getAsFile ? file.getAsFile() : file;\r\n            if (blob instanceof Blob)\r\n                reader.readAsDataURL(blob);\r\n        }\r\n        else if (type.match(/^text\\/plain$/i)) {\r\n            file.getAsString((s) => {\r\n                // Don't preventDefault here, because there might be clipboard matchers need to be triggered\r\n                // see https://github.com/chenjuneking/quill-image-drop-and-paste/issues/37\r\n                const i = this.getIndex();\r\n                utils\r\n                    .urlIsImage(s)\r\n                    .then(() => {\r\n                    // If the pasted plain text is an image, delete the pasted text and insert the image\r\n                    const j = this.getIndex();\r\n                    this.quill.deleteText(i, j - i, 'user');\r\n                    that.insert(s, 'image');\r\n                })\r\n                    .catch(() => {\r\n                    // Otherwise, do nothing\r\n                });\r\n            });\r\n        }\r\n    }\r\n    /* handle the dropped data\r\n     */\r\n    handleDroppedFile(file, callback, e) {\r\n        const { type, name = '' } = file;\r\n        if (type.match(/^image\\/(gif|jpe?g|a?png|svg|webp|bmp)/i)) {\r\n            e.preventDefault();\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                if (e.target && e.target.result) {\r\n                    callback(e.target.result, type, name);\r\n                }\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n    /* insert into the editor\r\n     */\r\n    insert(content, type) {\r\n        const index = this.getIndex();\r\n        let _index;\r\n        if (type === 'image') {\r\n            _index = index + 1;\r\n            this.quill.insertEmbed(index, type, content, 'user');\r\n        }\r\n        else if (type === 'text') {\r\n            _index = index + content.length;\r\n            this.quill.insertText(index, content, 'user');\r\n        }\r\n        setTimeout(() => {\r\n            this.quill.setSelection(_index);\r\n        });\r\n    }\r\n    getIndex() {\r\n        let index = (this.quill.getSelection(true) || {}).index;\r\n        if (index === undefined || index < 0)\r\n            index = this.quill.getLength();\r\n        return index;\r\n    }\r\n}\r\nImageDropAndPaste.ImageData = ImageData;\r\nwindow.QuillImageDropAndPaste = ImageDropAndPaste;\r\nif ('Quill' in window) {\r\n    window.Quill.register('modules/imageDropAndPaste', ImageDropAndPaste);\r\n}\n\nexport { ImageData, ImageDropAndPaste as default };\n", "import d from \"./node_modules/quill-image-drop-and-paste/dist/quill-image-drop-and-paste.esm.js\";export default d;\nexport * from \"./node_modules/quill-image-drop-and-paste/dist/quill-image-drop-and-paste.esm.js\""],
  "mappings": "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",
  "names": ["e"]
}
